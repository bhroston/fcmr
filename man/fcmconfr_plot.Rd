% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fcmconfr.R
\name{fcmconfr_plot}
\alias{fcmconfr_plot}
\title{Plot fcmconfr Output}
\usage{
fcmconfr_plot(
  fcmconfr_output,
  swap_axes = FALSE,
  aggregate_point_fill = "#fb0009",
  monte_carlo_col_fill = "#fcdbd0",
  monte_carlo_col_alpha = 0.6
)
}
\arguments{
\item{fcmconfr_output}{Output directly from fcmconfr}

\item{swap_axes}{Switch x and y axes. Preferable when concepts have longer names}

\item{aggregate_point_fill}{Hex code value for the aggregate point fill}

\item{monte_carlo_col_fill}{Hex code value for the columns/bars representing monte carlo data}

\item{monte_carlo_col_alpha}{Between 0 and 1, the opacity of the monte_carlo_col_fill}
}
\value{
A plot of the results generated from fcmconfr
}
\description{
This function plots the primary results of the \code{\link{fcmconfr}}
output. The plot features the results of the input fcm inferences,
aggregate analysis inferences, and the monte carlo analysis bulk inference
confidence intervals. This function takes \code{\link{fcmconfr}} outputs
generated from Conventional FCMs, Interval-Value Fuzzy Number (IVFN) FCMs,
and Triangular Fuzzy Number (TFN) FCMs as inputs.
}
\details{
Plots generated using ggplot2
}
\examples{
# Conventional FCMs fcmconfr
test_adj_matrix_1 <- data.frame(
  "A" = c(0, 0, 0, 0),
  "B" = c(1, 0, 0, 1),
  "C" = c(0, 1, 0, 0),
  "D" = c(0, 0, 1, 0)
)
test_adj_matrix_2 <- data.frame(
  "A" = c(0, 0, 0, 0),
  "B" = c(0.25, 0, 0, 0.25),
  "C" = c(0, 0.25, 0, 0),
  "D" = c(0, 0, 0.25, 0)
)
test_adj_matrix_3 <- data.frame(
  "A" = c(0, 0, 0, 0),
  "B" = c(0.75, 0, 0, 0.75),
  "C" = c(0, 0.75, 0, 0),
  "D" = c(0, 0, 0.75, 0)
)
test_adj_matrix_4 <- data.frame(
  "A" = c(0, 0, 0, 0),
  "B" = c(0.5, 0, 0, 0.5),
  "C" = c(0, 0.5, 0, 0),
  "D" = c(0, 0, 0.5, 0)
)
ex_conventional_fcms <- list(
  test_adj_matrix_1, test_adj_matrix_2, test_adj_matrix_3, test_adj_matrix_4
)
ex_conventional_fcmconfr <- fcmconfr(
  adj_matrices = ex_conventional_fcms,
  # Aggregation and Monte Carlo Sampling
  aggregation_function = 'mean',
  monte_carlo_sampling_draws = 100,
  # Simulation
  initial_state_vector = c(1, 1, 1, 1),
  clamping_vector = c(0, 1, 0, 0),
  activation = 'kosko',
  squashing = 'sigmoid',
  lambda = 1,
  max_iter = 100,
  min_error = 1e-05,
  # Inference Estimation (bootstrap)
  inference_estimation_function = "median",
  inference_estimation_CI = 0.95,
  inference_estimation_bootstrap_reps = 1000,
  # Runtime Options
  show_progress = TRUE,
  parallel = TRUE,
  n_cores = 2,
  # Additional Options
  perform_aggregate_analysis = TRUE,
  perform_monte_carlo_analysis = TRUE,
  perform_monte_carlo_inference_bootstrap_analysis = TRUE,
  include_zero_weighted_edges_in_aggregation_and_mc_sampling = FALSE,
  include_monte_carlo_FCM_simulations_in_output = TRUE
)


fcmconfr_plot(ex_conventional_fcmconfr)



# IVFN FCM fcmconfr
lower_adj_matrix_1 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0.25, 0)
)
upper_adj_matrix_1 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0.75, 0)
)
adj_matrix_w_ivfns_1 <- make_adj_matrix_w_ivfns(
  lower_adj_matrix_1, upper_adj_matrix_1
)
lower_adj_matrix_2 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0.15, 0)
)
upper_adj_matrix_2 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0.85, 0)
)
adj_matrix_w_ivfns_2 <- make_adj_matrix_w_ivfns(
  lower_adj_matrix_2, upper_adj_matrix_2
)
ex_ivfn_fcms <- list(adj_matrix_w_ivfns_1, adj_matrix_w_ivfns_2)
ex_ivfn_fcmconfr <- fcmconfr(
  adj_matrices = ex_ivfn_fcms,
  # Aggregation and Monte Carlo Sampling
  aggregation_function = 'mean',
  monte_carlo_sampling_draws = 100,
  # Simulation
  initial_state_vector = c(1, 1),
  clamping_vector = c(0, 1),
  activation = 'kosko',
  squashing = 'sigmoid',
  lambda = 1,
  max_iter = 100,
  min_error = 1e-05,
  # Inference Estimation (bootstrap)
  inference_estimation_function = "mean",
  inference_estimation_CI = 0.95,
  inference_estimation_bootstrap_reps = 1000,
  # Runtime Options
  show_progress = TRUE,
  parallel = FALSE,
  n_cores = 10,
  # Additional Options
  perform_aggregate_analysis = TRUE,
  perform_monte_carlo_analysis = TRUE,
  perform_monte_carlo_inference_bootstrap_analysis = TRUE,
  include_zero_weighted_edges_in_aggregation_and_mc_sampling = FALSE,
  include_monte_carlo_FCM_simulations_in_output = TRUE
)

fcmconfr_plot(ex_ivfn_fcmconfr)


# TFN FCM fcmconfr
lower_adj_matrix_1 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0.25, 0)
)
mode_adj_matrix_1 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0.5, 0)
)
upper_adj_matrix_1 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0.75, 0)
)
adj_matrix_w_tfns_1 <- make_adj_matrix_w_tfns(
  lower_adj_matrix_1, mode_adj_matrix_1, upper_adj_matrix_1
)

lower_adj_matrix_2 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0.15, 0)
)
mode_adj_matrix_2 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0.65, 0)
)
upper_adj_matrix_2 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0.85, 0)
)
adj_matrix_w_tfns_2 <- make_adj_matrix_w_tfns(
  lower_adj_matrix_2, mode_adj_matrix_2, upper_adj_matrix_2
)

ex_tfn_fcms <- list(adj_matrix_w_tfns_1, adj_matrix_w_tfns_2)
ex_tfn_fcmconfr <- fcmconfr(
  adj_matrices = ex_tfn_fcms,
  # Aggregation and Monte Carlo Sampling
  aggregation_function = 'mean',
  monte_carlo_sampling_draws = 100,
  # Simulation
  initial_state_vector = c(1, 1),
  clamping_vector = c(0, 1),
  activation = 'kosko',
  squashing = 'sigmoid',
  lambda = 1,
  max_iter = 100,
  min_error = 1e-05,
  # Inference Estimation (bootstrap)
  inference_estimation_function = "mean",
  inference_estimation_CI = 0.95,
  inference_estimation_bootstrap_reps = 1000,
  # Runtime Options
  show_progress = TRUE,
  parallel = FALSE,
  n_cores = 10,
  # Additional Options
  perform_aggregate_analysis = TRUE,
  perform_monte_carlo_analysis = TRUE,
  perform_monte_carlo_inference_bootstrap_analysis = TRUE,
  include_zero_weighted_edges_in_aggregation_and_mc_sampling = FALSE,
  include_monte_carlo_FCM_simulations_in_output = TRUE
)

fcmconfr_plot(ex_tfn_fcmconfr)
}
