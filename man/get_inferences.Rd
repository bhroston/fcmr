% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-general.R
\name{get_inferences}
\alias{get_inferences}
\title{Get inferences from an fcmconfr output}
\usage{
get_inferences(
  fcmconfr_obj = list(),
  analysis = c("individual", "aggregate", "mc")
)
}
\arguments{
\item{fcmconfr_obj}{An fcmconfr output object}

\item{analysis}{The}
}
\value{
A dataframe (or list of dataframes) of inferences from the selected
analysis (analyses)
}
\description{
Given an fcmconfr output object, return the inferences of all or just a
specific analysis
}
\examples{
ex_conventional_fcmconfr <- fcmconfr(
  adj_matrices = sample_fcms$simple_fcms$conventional_fcms,
  # adj_matrices = group_conventional_fcms,
  # Aggregation and Monte Carlo Sampling
  agg_function = 'mean',
  num_mc_fcms = 100,
  # Simulation
  initial_state_vector = c(1, 1, 1, 1, 1, 1, 1),
  clamping_vector = c(1, 0, 0, 0, 0, 0, 0),
  activation = 'kosko',
  squashing = 'tanh',
  lambda = 0.5,
  point_of_inference = "final",
  max_iter = 10000,
  min_error = 1e-05,
  # Inference Estimation (bootstrap)
  ci_centering_function = "mean",
  confidence_interval = 0.95,
  num_ci_bootstraps = 1000,
  # Runtime Options
  show_progress = TRUE,
  parallel = TRUE,
  n_cores = 2,
  # Additional Options
  run_agg_calcs = TRUE,
  run_mc_calcs = TRUE,
  run_ci_calcs = TRUE,
  include_zeroes_in_sampling = TRUE,
  include_sims_in_output = TRUE
)
get_inferences(ex_conventional_fcmconfr, analysis = c("individual"))
get_inferences(ex_conventional_fcmconfr, analysis = c("individual", "aggregate"))
get_inferences(ex_conventional_fcmconfr, analysis = c("individual", "aggregate", "mc"))
get_inferences(ex_conventional_fcmconfr)


ex_ivfn_fcmconfr <- fcmconfr(
  adj_matrices = sample_fcms$simple_fcms$ivfn_fcms,
  # adj_matrices = group_ivfn_fcms,
  # Aggregation and Monte Carlo Sampling
  agg_function = 'mean',
  num_mc_fcms = 100,
  # Simulation
  initial_state_vector = c(1, 1, 1, 1, 1, 1, 1),
  clamping_vector = c(1, 0, 0, 0, 0, 0, 0),
  activation = 'rescale',
  squashing = 'sigmoid',
  lambda = 1,
  point_of_inference = "final",
  max_iter = 1000,
  min_error = 1e-05,
  # Inference Estimation (bootstrap)
  ci_centering_function = mean,
  confidence_interval = 0.95,
  num_ci_bootstraps = 1000,
  # Runtime Options
  show_progress = TRUE,
  parallel = TRUE,
  n_cores = 2,
  # Additional Options
  run_agg_calcs = TRUE,
  run_mc_calcs = TRUE,
  run_ci_calcs = TRUE,
  include_zeroes_in_sampling = TRUE,
  include_sims_in_output = TRUE
)
get_inferences(ex_ivfn_fcmconfr, analysis = c("individual"))
get_inferences(ex_ivfn_fcmconfr, analysis = c("individual", "aggregate"))
get_inferences(ex_ivfn_fcmconfr, analysis = c("individual", "aggregate", "mc"))
get_inferences(ex_ivfn_fcmconfr)


ex_tfn_fcmconfr <- fcmconfr(
  adj_matrices = sample_fcms$simple_fcms$tfn_fcms,
  # adj_matrices = group_tfn_fcms,
  # Aggregation and Monte Carlo Sampling
  agg_function = 'mean',
  num_mc_fcms = 100,
  # Simulation
  initial_state_vector = c(1, 1, 1, 1, 1, 1, 1),
  clamping_vector = c(1, 0, 0, 0, 0, 0, 0),
  activation = 'rescale',
  squashing = 'sigmoid',
  lambda = 1,
  point_of_inference = "final",
  max_iter = 1000,
  min_error = 1e-05,
  # Inference Estimation (bootstrap)
  ci_centering_function = mean,
  confidence_interval = 0.95,
  num_ci_bootstraps = 1000,
  # Runtime Options
  show_progress = TRUE,
  parallel = TRUE,
  n_cores = 2,
  # Additional Options
  run_agg_calcs = TRUE,
  run_mc_calcs = TRUE,
  run_ci_calcs = TRUE,
  include_zeroes_in_sampling = TRUE,
  include_sims_in_output = TRUE
)
get_inferences(ex_tfn_fcmconfr, analysis = c("individual"))
get_inferences(ex_tfn_fcmconfr, analysis = c("individual", "aggregate"))
get_inferences(ex_tfn_fcmconfr, analysis = c("individual", "aggregate", "mc"))
get_inferences(ex_tfn_fcmconfr)
}
\seealso{
Other utility: 
\code{\link{check_if_local_machine_has_access_to_parallel_processing_functionalities}()},
\code{\link{check_if_local_machine_has_access_to_show_progress_functionalities}()},
\code{\link{fcm_view}()},
\code{\link{get_adj_matrices_input_type}()},
\code{\link{get_edgelist_from_adj_matrix}()},
\code{\link{get_node_IDs_from_input}()},
\code{\link{standardize_adj_matrices}()}
}
\concept{utility}
