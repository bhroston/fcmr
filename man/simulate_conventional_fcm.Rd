% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/infer_and_simulate_fcm.R
\name{simulate_conventional_fcm}
\alias{simulate_conventional_fcm}
\title{Simulate (Conventional) FCM}
\usage{
simulate_conventional_fcm(
  adj_matrix = matrix(),
  initial_state_vector = c(),
  clamping_vector = c(),
  activation = c("kosko", "modified-kosko", "rescale"),
  squashing = c("sigmoid", "tanh"),
  lambda = 1,
  point_of_inference = c("peak", "final"),
  max_iter = 100,
  min_error = 1e-05
)
}
\arguments{
\item{adj_matrix}{An n x n adjacency matrix that represents an FCM}

\item{initial_state_vector}{A list state values at the start of an fcm simulation}

\item{clamping_vector}{A list of values representing specific actions taken to
control the behavior of an FCM. Specifically, non-zero values defined in this vector
will remain constant throughout the entire simulation as if they were "clamped" at those values.}

\item{activation}{The activation function to be applied. Must be one of the following:
'kosko', 'modified-kosko', or 'rescale'.}

\item{squashing}{A squashing function to apply. Must be one of the following:
'bivalent', 'saturation', 'trivalent', 'tanh', or 'sigmoid'.}

\item{lambda}{A numeric value that defines the steepness of the slope of the
squashing function when tanh or sigmoid are applied}

\item{point_of_inference}{The point along the simulation time-series to be
identified as the inference. Must be one of the following: 'peak' or 'final'}

\item{max_iter}{The maximum number of iterations to run if the minimum error value is not achieved}

\item{min_error}{The lowest error (sum of the absolute value of the current state
vector minus the previous state vector) at which no more iterations are necessary
and the simulation will stop}
}
\value{
(Conventional) FCM simulation results
}
\description{
This simulates a conventional fcm based on its adjacency matrix.
}
\details{
This function performs two fcm simulations and compares the output between the two.
The first simulation considers the baseline activity where no nodes are "clamped" and the
system behaves without any outside inputs. The second simulation considers a scenario where
one or multiple nodes are "clamped" so that the system is reactive to additional inputs.
The function returns the difference in simulation results between the scenario and baseline
activity to understand how system manipulations compare to structural expectations of the system.

This function produces the same output as mental modeler for the following inputs:
 - initial_state_vector = c(1, 1, ..., 1)
 - activation = "kosko"
 - squashing = either "sigmoid" or "tanh"
 - lambda = 1
}
\examples{
adj_matrix <- data.frame(
  C1 = c(0, 0, 0, 0, 0, 0),
  C2 = c(-0.85, 0, 0, 0.35, 0, 0),
  C3 = c(0, 0, 0, 0, 0, 0),
  C4 = c(-0.7, 0.6, -1, 0, -1, 0),
  C5 = c(0.1, 0, 0, -0.8, 0, 0),
  C6 = c(0, -0.95, 0, 0, -0.95, 0)
)

simulate_fcm(adj_matrix,
             initial_state_vector = c(1, 1, 1, 1, 1, 1),
             clamping_vector = c(1, 0, 0, 0, 0, 0),
             activation = "kosko",
             squashing = "sigmoid",
             lambda = 1)

# To simulate an fcm without clamping (i.e. don't calculate the difference
# from steady-state), change the values in the initial_state_vector while
# leaving all values in the clamping_vector at 0
simulate_fcm(adj_matrix,
             initial_state_vector = c(1, 0, 0, 0, 0, 0),
             clamping_vector = c(0, 0, 0, 0, 0, 0),
             activation = "kosko",
             squashing = "sigmoid",
             lambda = 1)
}
