% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/monte_carlo_model_generation_and_simulation.R
\name{infer_fmcm_with_clamping}
\alias{infer_fmcm_with_clamping}
\title{infer_fmcm_with_clamping}
\usage{
infer_fmcm_with_clamping(
  simulated_adj_matrices = list(matrix()),
  initial_state_vector = c(),
  clamping_vector = c(),
  activation = c("kosko", "modified-kosko", "rescale"),
  squashing = c("sigmoid", "tanh"),
  lambda = 1,
  max_iter = 100,
  min_error = 1e-05,
  IDs = c(),
  parallel = TRUE,
  n_cores = integer(),
  show_progress = TRUE,
  include_simulations_in_output = FALSE
)
}
\arguments{
\item{simulated_adj_matrices}{A list of adjecency matrices generated from simulation using build_fmcm_models.}

\item{initial_state_vector}{A list state values at the start of an fcm simulation}

\item{clamping_vector}{A list of values representing specific actions taken to
control the behavior of an FCM. Specifically, non-zero values defined in this vector
will remain constant throughout the entire simulation as if they were "clamped" at those values.}

\item{activation}{The activation function to be applied. Must be one of the following:
'kosko', 'modified-kosko', or 'papageorgiou'.}

\item{squashing}{A squashing function to apply. Must be one of the following:
'bivalent', 'saturation', 'trivalent', 'tanh', or 'sigmoid'.}

\item{lambda}{A numeric value that defines the steepness of the slope of the
squashing function when tanh or sigmoid are applied}

\item{max_iter}{The maximum number of iterations to run if the minimum error value is not achieved}

\item{min_error}{The lowest error (sum of the absolute value of the current state
vector minus the previous state vector) at which no more iterations are necessary
and the simulation will stop}

\item{IDs}{A list of names for each node (must have n items). If empty, will use
column names of adjacancy matrix (if given).}

\item{parallel}{TRUE/FALSE Whether to utilize parallel processing}

\item{n_cores}{Number of cores to use in parallel processing. If no input given,
will use all available cores in the machine.}

\item{show_progress}{TRUE/FALSE Show progress bar when creating fmcm. Uses pbmapply
from the pbapply package as the underlying function.}

\item{include_simulations_in_output}{TRUE/FALSE whether to include simulations of monte-carlo-generated
FCM. Will dramatically increase size of output if TRUE.}
}
\description{
This calculates a sequence of iterations of a simulation over every item in
a list of fmcm objects given an initial state vector along with the
activation, squashing, and lambda parameters.
Additional variables may be defined to control simulation length,
column names, and lambda optimization.
}
\details{
[ADD DETAILS HERE!!!]

Use vignette("fmcm-class") for more information.
}
