% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/monte_carlo_model_generation_and_simulation.R
\name{build_monte_carlo_fcms_from_fuzzy_set_adj_matrices}
\alias{build_monte_carlo_fcms_from_fuzzy_set_adj_matrices}
\title{Build Monte Carlo (IVFN or TFN) FCMs}
\usage{
build_monte_carlo_fcms_from_fuzzy_set_adj_matrices(
  fuzzy_set_adj_matrix_list = list(data.frame()),
  fuzzy_set_adj_matrix_list_class = c("conventional", "ivfn", "tfn"),
  N_samples = integer(),
  include_zeroes = FALSE,
  show_progress = TRUE
)
}
\arguments{
\item{fuzzy_set_adj_matrix_list}{A list of n x n fuzzy adjacency matrices representing fcms}

\item{fuzzy_set_adj_matrix_list_class}{"fgcm" or "fcm_w_tfn" - the class of elements in the fuzzy_set_adj_matrix_list}

\item{N_samples}{The number of samples to draw from the corresponding distribution}

\item{include_zeroes}{TRUE/FALSE Whether to incorporate zeroes as intentionally-defined
edge weights or ignore them in aggregation}

\item{show_progress}{TRUE/FALSE Show progress bar when creating fmcm. Uses pbmapply
from the pbapply package as the underlying function.}
}
\value{
A list of empirical (Conventional) FCM adj. matrices generated via monte carlo methods
}
\description{
This function generates n fcm adjacency matrices whose edge weights are sampled
from edge values (that may be Conventional, IVFNs, or TFNs) and
stores them as a list of adjacency matrices.
}
\details{
If an edge is represented by IVFNs/TFNs, then those distributions
are averaged together to create the aggregate distribution to sample from.

The show_progress and parallel inputs change the functions called, but do NOT
change the output! These are allowed to be toggled on/off to increase user
control at runtime.
}
\examples{

# For Interval-Valued Fuzzy Numbers (IVFNs)
lower_adj_matrix_1 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0.4, 0)
)
upper_adj_matrix_1 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0.6, 0)
)
adj_matrix_1 <- make_adj_matrix_w_ivfns(lower_adj_matrix_1, upper_adj_matrix_1)
lower_adj_matrix_2 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0.6, 0)
)
upper_adj_matrix_2 <- data.frame(
  "A" = c(0, 0),
  "B" = c(1, 0)
)
adj_matrix_2 <- make_adj_matrix_w_ivfns(lower_adj_matrix_2, upper_adj_matrix_2)
lower_adj_matrix_3 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0.2, 0)
)
upper_adj_matrix_3 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0.6, 0)
)
adj_matrix_3 <- make_adj_matrix_w_ivfns(lower_adj_matrix_3, upper_adj_matrix_3)
lower_adj_matrix_4 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0.0, 0)
)
upper_adj_matrix_4 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0.4, 0)
)
adj_matrix_4 <- make_adj_matrix_w_ivfns(lower_adj_matrix_4, upper_adj_matrix_4)
fcms_w_ivfns <- list(adj_matrix_1, adj_matrix_2, adj_matrix_3, adj_matrix_4)

mc_ivfn_fcms <- build_monte_carlo_fcms_from_fuzzy_set_adj_matrices(
  fcms_w_ivfns, "ivfn", 1000, include_zeroes = FALSE
)


# For Triangular Fuzzy Numbers (TFNs)
lower_adj_matrix_1 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0.4, 0)
)
mode_adj_matrix_1 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0.4, 0)
)
upper_adj_matrix_1 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0.6, 0)
)
adj_matrix_1 <- make_adj_matrix_w_tfns(
  lower_adj_matrix_1, mode_adj_matrix_1, upper_adj_matrix_1
)
lower_adj_matrix_2 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0.6, 0)
)
mode_adj_matrix_2 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0.7, 0)
)
upper_adj_matrix_2 <- data.frame(
  "A" = c(0, 0),
  "B" = c(1, 0)
)
adj_matrix_2 <- make_adj_matrix_w_tfns(
  lower_adj_matrix_2, mode_adj_matrix_2, upper_adj_matrix_2
)
lower_adj_matrix_3 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0.2, 0)
)
mode_adj_matrix_3 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0.4, 0)
)
upper_adj_matrix_3 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0.6, 0)
)
adj_matrix_3 <- make_adj_matrix_w_tfns(
  lower_adj_matrix_3, mode_adj_matrix_3, upper_adj_matrix_3
)
lower_adj_matrix_4 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0.0, 0)
)
mode_adj_matrix_4 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0, 0)
)
upper_adj_matrix_4 <- data.frame(
  "A" = c(0, 0),
  "B" = c(0.4, 0)
)
adj_matrix_4 <- make_adj_matrix_w_tfns(
  lower_adj_matrix_4, mode_adj_matrix_4, upper_adj_matrix_4
)

fcms_w_tfns <- list(
  adj_matrix_1, adj_matrix_2, adj_matrix_3, adj_matrix_4
)

mc_tfn_fcms <- build_monte_carlo_fcms_from_fuzzy_set_adj_matrices(
  fcms_w_tfns, "tfn", 1000, include_zeroes = FALSE
)

}
\seealso{
Other monte-carlo-model-generation-and-simulation: 
\code{\link{build_monte_carlo_fcms}()},
\code{\link{build_monte_carlo_fcms_from_conventional_adj_matrices}()},
\code{\link{check_build_monte_carlo_fcms_inputs}()},
\code{\link{check_infer_fcm_set_inputs}()},
\code{\link{check_monte_carlo_bootstrap_inputs}()},
\code{\link{get_mc_simulations_inference_CIs_w_bootstrap}()},
\code{\link{infer_fcm_set}()}
}
\concept{monte-carlo-model-generation-and-simulation}
