[{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to fcmconfr","title":"Contributing to fcmconfr","text":"outlines propose change fcmconfr. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to fcmconfr","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to fcmconfr","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to fcmconfr","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"bhroston/fcmconfr\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to fcmconfr","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to fcmconfr","text":"Please note fcmconfr project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"/articles/Input-Outut.html","id":"input","dir":"Articles","previous_headings":"","what":"Input","title":"Input-Outut","text":"Inputs: Users can upload collection adjacency matrices R 3 ways Upload single .xlsx file sheet storing different adjacency matrix Select folder contains multiple .xlsx files single sheet storing adjacency matrix Select folder contains multiple .csv files, one adjacency matrix","code":"library(fcmconfr)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ben Roston. Author, maintainer, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Roston B (2024). FCMConfR: FCM Uncertainty Analysis Tools. R package version 0.2.1, https://github.com/bhroston/fcmconfr.","code":"@Manual{,   author = {Ben Roston},   title = {FCMConfR: FCM Uncertainty Analysis Tools},   year = {2024},   note = {R package version 0.2.1},   url = {https://github.com/bhroston/fcmconfr},   copyright = {GNU General Public License}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Fuzzy Cognitive Map Analysis in R","text":"fcmconfr tool evaluate sets Fuzzy Cognitive Maps (FCMs) generate inferences leverage uncertainty individual FCMs across collective. fcmconfr() package’s primary function takes list FCM adjacency matrices (individual adjacency matrix) performs following analyses: Simulate Input FCMs Generate Aggregate FCM Simulate result Generate Bulk Monte-Carlo FCMs Simulate fcmconfr_gui() provides graphical user interface (GUI) help users identify appropriate inputs preferred analyses generally improve overall user-experience defining many inputs required primary fcmconfr() function. fcmconfr aims consolidate existing software theory centralized package: landscape software tools analyse FCMs diverse, approaches outputs varying across . reflective decentralized nature FCM theory whole features array analysis methods, strengths weaknesses, without one particular consistently adopted throughout literature. fcmconfr offers novel tools analyze FCMs edge weights incorporate uncertainty: One limitation conventional FCM approach restricts edge weights discrete values. Many extensions conventional approach introduced literature allow edge weights represented intervals, distributions, numerous abstractions. fcmconfr offers novel tools streamline access two extensions: one represents edge weights Interval-Value Fuzzy Numbers (IVFNs, named IVFN-FCMs) represents edge weights Triangular Fuzzy Numbers (TFNs, named TFN-FCMs).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fuzzy Cognitive Map Analysis in R","text":"can install development version fcmconfr() GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"bhroston/fcmconfr\")"},{"path":"/index.html","id":"using-fcmconfr-example","dir":"","previous_headings":"","what":"Using fcmconfr (Example)","title":"Fuzzy Cognitive Map Analysis in R","text":"","code":"library(fcmconfr)  # This example uses the salinization_ses_fcms dataset included within the package #   # Use fcmconfr_gui() to select inputs or manually identify input parameters # fcmconfr_gui()  # Use fcmconfr() to perform the analysis fcmconfr(   adj_matrices = salinization_ses_fcms,   # Aggregation and Monte Carlo Sampling   aggregation_function = 'mean',   monte_carlo_sampling_draws = 1000,   # Simulation   initial_state_vector = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),   clamping_vector = c(0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),   activation = 'modified-kosko',   squashing = 'sigmoid',   lambda = 1,   max_iter = 100,   min_error = 1e-05,   # Inference Estimation (bootstrap)   inference_estimation_function = mean,   inference_estimation_CI = 0.95,   inference_estimation_bootstrap_reps = 1000,   inference_estimation_bootstrap_draws_per_rep = 1000,   # Runtime Options   show_progress = TRUE,   parallel = FALSE,   n_cores = 1,   # Additional Options   perform_aggregate_analysis = TRUE,   perform_monte_carlo_analysis = TRUE,   perform_monte_carlo_inference_bootstrap_analysis = TRUE,   include_zero_weighted_edges_in_aggregation_and_mc_sampling = FALSE,   include_monte_carlo_FCM_simulations_in_output = FALSE )"},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Fuzzy Cognitive Map Analysis in R","text":"","code":"citation(\"fcmconfr\") #> To cite fcmconfr in publications use: #>  #>   Roston & Rippy, (2024). FCMConfR: FCM Uncertainty Analysis Tools. #>   https://github.com/bhroston/fcmconfr.git. #>  #> A BibTeX entry for LaTeX users is #>  #>   @bibentry{, #>     bibtype = {Manual} #>     title = {FCMConfR: FCM Uncertainty Analysis Tools}, #>     author = {Ben Roston and Megan Rippy}, #>     year = {2024}, #>     url = {https://github.com/bhroston/fcmconfr}, #>     copyright = {GNU General Public License} #>   }"},{"path":"/index.html","id":"further-reading","dir":"","previous_headings":"","what":"Further Reading","title":"Fuzzy Cognitive Map Analysis in R","text":"reading ","code":""},{"path":"/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Fuzzy Cognitive Map Analysis in R","text":"Please note package released Contributor Code Conduct. contributing project, agree abide terms. think encountered bug, please submit issue. Please include reprex (minimal, reproducible example) clearly communicate code. However, remain untested, mathematical complexity leaves many largely inaccessible (citation). Package FCM packages across R (fcm) Python (PyFCM) ecosystems well (Dikopoulou Papageorgiou 2017; Aminpour 2018)","code":""},{"path":"/reference/aggregate_conventional_fcms.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate (Conventional) FCMs — aggregate_conventional_fcms","title":"Aggregate (Conventional) FCMs — aggregate_conventional_fcms","text":"Generate aggregate adj. matrix list (Conventional) adj. matrices. FCM aggregation works calculating mean/median edge weight edges across input adj. matrices (.e. mean/median edge weight connecting -> B across maps, mean/median edge weight connecting B -> C across maps, ). user may dictate whether incorporate 0-valued edge weights mean/median calculations.","code":""},{"path":"/reference/aggregate_conventional_fcms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate (Conventional) FCMs — aggregate_conventional_fcms","text":"","code":"aggregate_conventional_fcms(   adj_matrices = list(matrix()),   aggregation_function = c(\"mean\", \"median\"),   include_zeroes = TRUE,   false_zero_locs_by_adj_matrix = list() )"},{"path":"/reference/aggregate_conventional_fcms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate (Conventional) FCMs — aggregate_conventional_fcms","text":"adj_matrices list Conventional FCM adj. matrix objects aggregation_function Calculate aggregate edge weights either \"mean\" \"median\" input edge weights across inputs include_zeroes TRUE/FALSE Whether include zeroes mean/median calculations. (.e. edges included map count zero-weighted edge ) false_zero_locs_by_adj_matrix !DEVELOPER USE ! list array indexes IVFN TFN matrices contain false-zero edges (False-zero edges contain zero lower bound IVFNs /mode TFNs non-zero value upper bound)","code":""},{"path":"/reference/aggregate_conventional_fcms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate (Conventional) FCMs — aggregate_conventional_fcms","text":"aggregate adj. matrix (class 'aggregate') edges represented numeric data types","code":""},{"path":"/reference/aggregate_conventional_fcms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate (Conventional) FCMs — aggregate_conventional_fcms","text":"input adj. matrices must represent Conventional FCMs input adj. matrices must dimensions concept names generate aggregate.","code":""},{"path":[]},{"path":"/reference/aggregate_conventional_fcms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate (Conventional) FCMs — aggregate_conventional_fcms","text":"","code":"ex_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(1, 0) ) ex_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.25, 0) ) ex_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.75, 0) ) ex_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.5, 0) ) ex_fcms <- list(   ex_adj_matrix_1, ex_adj_matrix_2, ex_adj_matrix_3, ex_adj_matrix_4 ) aggregate_conventional_fcms(ex_fcms, \"mean\", include_zeroes = TRUE) #> $adj_matrix #>   A     B #> A 0 0.625 #> B 0 0.000 #>  #> $params #> $params$input_adj_matrices #> $params$input_adj_matrices[[1]] #>   A B #> 1 0 1 #> 2 0 0 #>  #> $params$input_adj_matrices[[2]] #>   A    B #> 1 0 0.25 #> 2 0 0.00 #>  #> $params$input_adj_matrices[[3]] #>   A    B #> 1 0 0.75 #> 2 0 0.00 #>  #> $params$input_adj_matrices[[4]] #>   A   B #> 1 0 0.5 #> 2 0 0.0 #>  #>  #> $params$aggregation_fun #> [1] \"mean\" #>  #> $params$IDs #> [1] \"A\" \"B\" #>  #>  #> attr(,\"class\") #> [1] \"aggregate_of_conventional_fcms\" aggregate_conventional_fcms(ex_fcms, \"mean\", include_zeroes = FALSE) #> $adj_matrix #>   A     B #> A 0 0.625 #> B 0 0.000 #>  #> $params #> $params$input_adj_matrices #> $params$input_adj_matrices[[1]] #>   A B #> 1 0 1 #> 2 0 0 #>  #> $params$input_adj_matrices[[2]] #>   A    B #> 1 0 0.25 #> 2 0 0.00 #>  #> $params$input_adj_matrices[[3]] #>   A    B #> 1 0 0.75 #> 2 0 0.00 #>  #> $params$input_adj_matrices[[4]] #>   A   B #> 1 0 0.5 #> 2 0 0.0 #>  #>  #> $params$aggregation_fun #> [1] \"mean\" #>  #> $params$IDs #> [1] \"A\" \"B\" #>  #>  #> attr(,\"class\") #> [1] \"aggregate_of_conventional_fcms\" aggregate_conventional_fcms(ex_fcms, \"median\") #> $adj_matrix #>   A     B #> A 0 0.625 #> B 0 0.000 #>  #> $params #> $params$input_adj_matrices #> $params$input_adj_matrices[[1]] #>   A B #> 1 0 1 #> 2 0 0 #>  #> $params$input_adj_matrices[[2]] #>   A    B #> 1 0 0.25 #> 2 0 0.00 #>  #> $params$input_adj_matrices[[3]] #>   A    B #> 1 0 0.75 #> 2 0 0.00 #>  #> $params$input_adj_matrices[[4]] #>   A   B #> 1 0 0.5 #> 2 0 0.0 #>  #>  #> $params$aggregation_fun #> [1] \"median\" #>  #> $params$IDs #> [1] \"A\" \"B\" #>  #>  #> attr(,\"class\") #> [1] \"aggregate_of_conventional_fcms\""},{"path":"/reference/aggregate_fcms.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate FCMs — aggregate_fcms","title":"Aggregate FCMs — aggregate_fcms","text":"Generate aggregate adj. matrix list adj. matrices. FCM aggregation works calculating mean/median edge weight edges across input adj. matrices (.e. mean/median edge weight connecting -> B across maps, mean/median edge weight connecting B -> C across maps, ). user may dictate whether incorporate 0-valued edge weights mean/median calculations.","code":""},{"path":"/reference/aggregate_fcms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate FCMs — aggregate_fcms","text":"","code":"aggregate_fcms(   adj_matrices = list(matrix()),   aggregation_function = c(\"mean\", \"median\"),   include_zeroes = FALSE )"},{"path":"/reference/aggregate_fcms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate FCMs — aggregate_fcms","text":"adj_matrices list adj. matrix objects; can represent conventional FCM, IVFN FCM, TFN FCM, adj. matrices must type three options. aggregation_function Calculate aggregate edge weights either \"mean\" \"median\" input edge weights across inputs include_zeroes TRUE/FALSE Whether include zeroes mean/median calculations. (.e. edges included map count zero-weighted edge )","code":""},{"path":"/reference/aggregate_fcms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate FCMs — aggregate_fcms","text":"aggregate adj. matrix (class 'aggregate') edges represented data types inputs (.e. Numerics conventional, IVFNs, TFNs)","code":""},{"path":"/reference/aggregate_fcms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate FCMs — aggregate_fcms","text":"input adj. matrices must dimensions concept names generate aggregate.","code":""},{"path":"/reference/aggregate_fcms.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Aggregate FCMs — aggregate_fcms","text":"aminpourWisdomStakeholderCrowds2020fcmconfr","code":""},{"path":[]},{"path":"/reference/aggregate_fcms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate FCMs — aggregate_fcms","text":"","code":"# Aggregate Conventional FCMs adj_matrix_1 <- data.frame(   \"A\" = c(0, 0.8),   \"B\" = c(1, 0) ) adj_matrix_2 <- data.frame(   \"A\" = c(0, 0.4),   \"B\" = c(0.25, 0) ) adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.75, 0) ) adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.5, 0) ) fcms <- list(adj_matrix_1, adj_matrix_2, adj_matrix_3, adj_matrix_4) aggregate_fcms(fcms, \"mean\", include_zeroes = TRUE) #>     A     B #> A 0.0 0.625 #> B 0.3 0.000 #>  #> Aggregate (mean) of 4 adj. matrices   # Aggregate IVFN FCMs lower_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) upper_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0.2),   \"B\" = c(0.6, 0) ) adj_matrix_1 <- make_adj_matrix_w_ivfns(lower_adj_matrix_1, upper_adj_matrix_1) lower_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0.3),   \"B\" = c(0.6, 0) ) upper_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0.4),   \"B\" = c(1, 0) ) adj_matrix_2 <- make_adj_matrix_w_ivfns(lower_adj_matrix_2, upper_adj_matrix_2) lower_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.2, 0) ) upper_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) adj_matrix_3 <- make_adj_matrix_w_ivfns(lower_adj_matrix_3, upper_adj_matrix_3) lower_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.0, 0) ) upper_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) adj_matrix_4 <- make_adj_matrix_w_ivfns(lower_adj_matrix_4, upper_adj_matrix_4)  fcms_w_ivfns <- list(adj_matrix_1, adj_matrix_2, adj_matrix_3, adj_matrix_4)  # NOTE: If the lower bound of an edge weight is 0, but the upper bound is > 0, # the assumption that a stakeholder simply did not include the edge is invalid. # Thus, since the 0-lower bound is meaningful, it is included in mean/median # calculations even if include_zeroes = FALSE aggregate_fcms(fcms_w_ivfns, \"mean\", include_zeroes = FALSE) #>            A          B #> A       0, 0 0.30, 0.65 #> B 0.15, 0.30       0, 0 #>  #> Aggregate (mean) of 4 adj. matrices"},{"path":"/reference/aggregate_fcms_w_ivfns.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate (IVFN) FCMs — aggregate_fcms_w_ivfns","title":"Aggregate (IVFN) FCMs — aggregate_fcms_w_ivfns","text":"Generate aggregate adj. matrix list (IVFN) adj. matrices. FCM aggregation works calculating mean/median edge weight edges across input adj. matrices (.e. mean/median edge weight connecting -> B across maps, mean/median edge weight connecting B -> C across maps, ). user may dictate whether incorporate 0-valued edge weights mean/median calculations.","code":""},{"path":"/reference/aggregate_fcms_w_ivfns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate (IVFN) FCMs — aggregate_fcms_w_ivfns","text":"","code":"aggregate_fcms_w_ivfns(   adj_matrices = list(matrix()),   aggregation_function = c(\"mean\", \"median\"),   include_zeroes = TRUE )"},{"path":"/reference/aggregate_fcms_w_ivfns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate (IVFN) FCMs — aggregate_fcms_w_ivfns","text":"adj_matrices list IVFN FCM adj. matrix objects aggregation_function Calculate aggregate edge weights either \"mean\" \"median\" input edge weights across inputs include_zeroes TRUE/FALSE Whether include zeroes mean/median calculations. (.e. edges included map count zero-weighted edge )","code":""},{"path":"/reference/aggregate_fcms_w_ivfns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate (IVFN) FCMs — aggregate_fcms_w_ivfns","text":"aggregate adj. matrix (class 'aggregate') edges represented IVFN data types","code":""},{"path":"/reference/aggregate_fcms_w_ivfns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate (IVFN) FCMs — aggregate_fcms_w_ivfns","text":"input adj. matrices must represent IVFN FCMs input adj. matrices must dimensions concept names generate aggregate.","code":""},{"path":[]},{"path":"/reference/aggregate_fcms_w_ivfns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate (IVFN) FCMs — aggregate_fcms_w_ivfns","text":"","code":"lower_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) upper_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) adj_matrix_1 <- make_adj_matrix_w_ivfns(lower_adj_matrix_1, upper_adj_matrix_1) lower_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) upper_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(1, 0) ) adj_matrix_2 <- make_adj_matrix_w_ivfns(lower_adj_matrix_2, upper_adj_matrix_2) lower_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.2, 0) ) upper_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) adj_matrix_3 <- make_adj_matrix_w_ivfns(lower_adj_matrix_3, upper_adj_matrix_3) lower_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.0, 0) ) upper_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) adj_matrix_4 <- make_adj_matrix_w_ivfns(lower_adj_matrix_4, upper_adj_matrix_4) fcms_w_ivfns <- list(adj_matrix_1, adj_matrix_2, adj_matrix_3, adj_matrix_4)  # Note that Row (1), Column(2) of adj_matrix 3 has a false-zero lower # edge weight. See how the aggregate incorporates those values even though # include_zeroes = FALSE aggregate_fcms_w_ivfns(fcms_w_ivfns, \"mean\", include_zeroes = FALSE) #> $adj_matrix #>      A          B #> A 0, 0 0.30, 0.65 #> B 0, 0       0, 0 #>  #> $params #> $params$input_adj_matrices #> $params$input_adj_matrices[[1]] #>      A        B #> A 0, 0 0.4, 0.6 #> B 0, 0     0, 0 #>  #> $params$input_adj_matrices[[2]] #>      A        B #> A 0, 0 0.6, 1.0 #> B 0, 0     0, 0 #>  #> $params$input_adj_matrices[[3]] #>      A        B #> A 0, 0 0.2, 0.6 #> B 0, 0     0, 0 #>  #> $params$input_adj_matrices[[4]] #>      A        B #> A 0, 0 0.0, 0.4 #> B 0, 0     0, 0 #>  #>  #> $params$aggregation_fun #> [1] \"mean\" #>  #> $params$IDs #> [1] \"A\" \"B\" #>  #>  #> attr(,\"class\") #> [1] \"aggregate_of_fcms_w_ivfns\" aggregate_fcms_w_ivfns(fcms_w_ivfns, \"mean\", include_zeroes = TRUE) #> $adj_matrix #>      A          B #> A 0, 0 0.30, 0.65 #> B 0, 0       0, 0 #>  #> $params #> $params$input_adj_matrices #> $params$input_adj_matrices[[1]] #>      A        B #> A 0, 0 0.4, 0.6 #> B 0, 0     0, 0 #>  #> $params$input_adj_matrices[[2]] #>      A        B #> A 0, 0 0.6, 1.0 #> B 0, 0     0, 0 #>  #> $params$input_adj_matrices[[3]] #>      A        B #> A 0, 0 0.2, 0.6 #> B 0, 0     0, 0 #>  #> $params$input_adj_matrices[[4]] #>      A        B #> A 0, 0 0.0, 0.4 #> B 0, 0     0, 0 #>  #>  #> $params$aggregation_fun #> [1] \"mean\" #>  #> $params$IDs #> [1] \"A\" \"B\" #>  #>  #> attr(,\"class\") #> [1] \"aggregate_of_fcms_w_ivfns\""},{"path":"/reference/aggregate_fcms_w_tfns.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate (TFN) FCMs — aggregate_fcms_w_tfns","title":"Aggregate (TFN) FCMs — aggregate_fcms_w_tfns","text":"Generate aggregate adj. matrix list (TFN) adj. matrices. FCM aggregation works calculating mean/median edge weight edges across input adj. matrices (.e. mean/median edge weight connecting -> B across maps, mean/median edge weight connecting B -> C across maps, ). user may dictate whether incorporate 0-valued edge weights mean/median calculations.","code":""},{"path":"/reference/aggregate_fcms_w_tfns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate (TFN) FCMs — aggregate_fcms_w_tfns","text":"","code":"aggregate_fcms_w_tfns(   adj_matrices = list(matrix()),   aggregation_function = c(\"mean\", \"median\"),   include_zeroes = TRUE )"},{"path":"/reference/aggregate_fcms_w_tfns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate (TFN) FCMs — aggregate_fcms_w_tfns","text":"adj_matrices list TFN FCM adj. matrix objects aggregation_function Calculate aggregate edge weights either \"mean\" \"median\" input edge weights across inputs include_zeroes TRUE/FALSE Whether include zeroes mean/median calculations. (.e. edges included map count zero-weighted edge )","code":""},{"path":"/reference/aggregate_fcms_w_tfns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate (TFN) FCMs — aggregate_fcms_w_tfns","text":"aggregate adj. matrix (class 'aggregate') edges represented TFN data types","code":""},{"path":"/reference/aggregate_fcms_w_tfns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate (TFN) FCMs — aggregate_fcms_w_tfns","text":"input adj. matrices must represent TFN FCMs input adj. matrices must dimensions concept names generate aggregate.","code":""},{"path":[]},{"path":"/reference/aggregate_fcms_w_tfns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate (TFN) FCMs — aggregate_fcms_w_tfns","text":"","code":"lower_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) mode_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) upper_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) adj_matrix_1 <- make_adj_matrix_w_tfns(lower_adj_matrix_1, mode_adj_matrix_1, upper_adj_matrix_1) lower_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) mode_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.7, 0) ) upper_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(1, 0) ) adj_matrix_2 <- make_adj_matrix_w_tfns(lower_adj_matrix_2, mode_adj_matrix_2, upper_adj_matrix_2) lower_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.2, 0) ) mode_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) upper_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) adj_matrix_3 <- make_adj_matrix_w_tfns(   lower_adj_matrix_3, mode_adj_matrix_3, upper_adj_matrix_3 ) lower_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.0, 0) ) mode_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0, 0) ) upper_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) adj_matrix_4 <- make_adj_matrix_w_tfns(   lower_adj_matrix_4, mode_adj_matrix_4, upper_adj_matrix_4 )  fcms_w_tfns <- list(adj_matrix_1, adj_matrix_2, adj_matrix_3, adj_matrix_4)  # Note that Row (1), Column(2) of adj_matrix 3 has false-zero lower and mode # edge weights. See how the aggregate incorporates those values even though # include_zeroes = FALSE aggregate_fcms_w_tfns(fcms_w_tfns, \"mean\", include_zeroes = FALSE) #> $adj_matrix #>         A                   B #> A 0, 0, 0 0.300, 0.375, 0.650 #> B 0, 0, 0             0, 0, 0 #>  #> $params #> $params$input_adj_matrices #> $params$input_adj_matrices[[1]] #>         A             B #> A 0, 0, 0 0.4, 0.4, 0.6 #> B 0, 0, 0       0, 0, 0 #>  #> $params$input_adj_matrices[[2]] #>         A             B #> A 0, 0, 0 0.6, 0.7, 1.0 #> B 0, 0, 0       0, 0, 0 #>  #> $params$input_adj_matrices[[3]] #>         A             B #> A 0, 0, 0 0.2, 0.4, 0.6 #> B 0, 0, 0       0, 0, 0 #>  #> $params$input_adj_matrices[[4]] #>         A             B #> A 0, 0, 0 0.0, 0.0, 0.4 #> B 0, 0, 0       0, 0, 0 #>  #>  #> $params$aggregation_fun #> [1] \"mean\" #>  #> $params$IDs #> [1] \"A\" \"B\" #>  #>  #> attr(,\"class\") #> [1] \"aggregate_of_fcms_w_tfns\" aggregate_fcms_w_tfns(fcms_w_tfns, \"mean\", include_zeroes = TRUE) #> $adj_matrix #>         A                   B #> A 0, 0, 0 0.300, 0.375, 0.650 #> B 0, 0, 0             0, 0, 0 #>  #> $params #> $params$input_adj_matrices #> $params$input_adj_matrices[[1]] #>         A             B #> A 0, 0, 0 0.4, 0.4, 0.6 #> B 0, 0, 0       0, 0, 0 #>  #> $params$input_adj_matrices[[2]] #>         A             B #> A 0, 0, 0 0.6, 0.7, 1.0 #> B 0, 0, 0       0, 0, 0 #>  #> $params$input_adj_matrices[[3]] #>         A             B #> A 0, 0, 0 0.2, 0.4, 0.6 #> B 0, 0, 0       0, 0, 0 #>  #> $params$input_adj_matrices[[4]] #>         A             B #> A 0, 0, 0 0.0, 0.0, 0.4 #> B 0, 0, 0       0, 0, 0 #>  #>  #> $params$aggregation_fun #> [1] \"mean\" #>  #> $params$IDs #> [1] \"A\" \"B\" #>  #>  #> attr(,\"class\") #> [1] \"aggregate_of_fcms_w_tfns\""},{"path":"/reference/autoplot.fcmconfr.html","id":null,"dir":"Reference","previous_headings":"","what":"Autoplot fcmconfr — autoplot.fcmconfr","title":"Autoplot fcmconfr — autoplot.fcmconfr","text":"Generate generic plot visualizing fcmconfr results. Call function name directly (autoplot.fcmconfr)) without parentheses see exact code generate plots, copy--paste edit needed.","code":""},{"path":"/reference/autoplot.fcmconfr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Autoplot fcmconfr — autoplot.fcmconfr","text":"","code":"# S3 method for class 'fcmconfr' autoplot(object, ...)"},{"path":"/reference/autoplot.fcmconfr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Autoplot fcmconfr — autoplot.fcmconfr","text":"object direct output fcmconfr function ... Additional inputs","code":""},{"path":"/reference/autoplot.fcmconfr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Autoplot fcmconfr — autoplot.fcmconfr","text":"autoplot plot fcmconfr object's results","code":""},{"path":"/reference/autoplot.fcmconfr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Autoplot fcmconfr — autoplot.fcmconfr","text":"function produces slightly different outputs fcmconfr outputs generated conventional, ivfn, tfn FCMs.","code":""},{"path":"/reference/autoplot.fcmconfr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Autoplot fcmconfr — autoplot.fcmconfr","text":"","code":"NULL #> NULL"},{"path":"/reference/build_monte_carlo_fcms.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Monte Carlo FCMs — build_monte_carlo_fcms","title":"Build Monte Carlo FCMs — build_monte_carlo_fcms","text":"function generates N fcm adjacency matrices whose edge weights sampled edge values (may numeric, IVFNs, TFNs) stores list adjacency matrices. show_progress parallel inputs change functions called, change output! allowed toggled /increase user control runtime.","code":""},{"path":"/reference/build_monte_carlo_fcms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Monte Carlo FCMs — build_monte_carlo_fcms","text":"","code":"build_monte_carlo_fcms(   adj_matrix_list = list(matrix()),   N_samples = 1000,   include_zeroes = TRUE,   show_progress = TRUE )"},{"path":"/reference/build_monte_carlo_fcms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Monte Carlo FCMs — build_monte_carlo_fcms","text":"adj_matrix_list list n x n adjacency matrices representing fcms N_samples number samples draw selected sampling method. Also, number sampled models generate include_zeroes TRUE/FALSE Whether incorporate zeroes intentionally-defined edge weights ignore aggregation show_progress TRUE/FALSE Show progress bar creating fmcm. Uses pbmapply pbapply package underlying function.","code":""},{"path":"/reference/build_monte_carlo_fcms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Monte Carlo FCMs — build_monte_carlo_fcms","text":"list empirical (Conventional) FCM adj. matrices generated via monte carlo methods","code":""},{"path":"/reference/build_monte_carlo_fcms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build Monte Carlo FCMs — build_monte_carlo_fcms","text":"Conventional FCMs, edge weights sampled edge weight explicitly defined input FCMs. IVFN TFN FCMs, edge weights sampled combined distributions representative IVFN/TFN edge weights. example, edge given following weights across two maps: IVFN(0.4, 0.8) IVFN[0.5, 0.7], samples drawn combined distribution: sample(N, c(runif(N, 0.4, 0.8), runif(N, 0.5, 0.7)), replace = TRUE).","code":""},{"path":[]},{"path":"/reference/build_monte_carlo_fcms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build Monte Carlo FCMs — build_monte_carlo_fcms","text":"","code":"# Conventional FCMs ex_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0, 0, 0),   \"B\" = c(0, 0, 0, 1),   \"C\" = c(0, 1, 0, 0),   \"D\" = c(0, 0, 1, 0) ) ex_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0, 0, 0),   \"B\" = c(0.25, 0, 0, 0.25),   \"C\" = c(0, 0.25, 0, 0),   \"D\" = c(0, 0, 0.25, 0) ) ex_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0, 0, 0),   \"B\" = c(0.75, 0, 0, 0.75),   \"C\" = c(0, 0.75, 0, 0),   \"D\" = c(0, 0, 0.75, 0) ) ex_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0, 0, 0),   \"B\" = c(0.5, 0, 0, 0.5),   \"C\" = c(0, 0.5, 0, 0),   \"D\" = c(0, 0, 0.5, 0) ) ex_fcms <- list(   ex_adj_matrix_1, ex_adj_matrix_2, ex_adj_matrix_3, ex_adj_matrix_4 )  mc_conventional_fcms <- build_monte_carlo_fcms(   ex_fcms, N_samples = 1000, include_zeroes = FALSE, show_progress = TRUE ) #> Loading required namespace: pbapply #> [1] Sampling from column vectors #> Sampling from column vectors[1] Constructing monte carlo fcms from samples #> Constructing monte carlo fcms from samples    # For Interval-Valued Fuzzy Numbers (IVFNs) lower_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) upper_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) adj_matrix_1 <- make_adj_matrix_w_ivfns(lower_adj_matrix_1, upper_adj_matrix_1) lower_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) upper_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(1, 0) ) adj_matrix_2 <- make_adj_matrix_w_ivfns(lower_adj_matrix_2, upper_adj_matrix_2) lower_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.2, 0) ) upper_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) adj_matrix_3 <- make_adj_matrix_w_ivfns(lower_adj_matrix_3, upper_adj_matrix_3) lower_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.0, 0) ) upper_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) adj_matrix_4 <- make_adj_matrix_w_ivfns(lower_adj_matrix_4, upper_adj_matrix_4) fcms_w_ivfns <- list(adj_matrix_1, adj_matrix_2, adj_matrix_3, adj_matrix_4)  mc_ivfn_fcms <- build_monte_carlo_fcms(   fcms_w_ivfns, N_samples = 1000, include_zeroes = FALSE ) #> [1] Sampling from column vectors #> Sampling from column vectors[1] Constructing monte carlo fcms from samples #> Constructing monte carlo fcms from samples   # For Triangular Fuzzy Numbers (TFNs) lower_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) mode_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) upper_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) adj_matrix_1 <- make_adj_matrix_w_tfns(   lower_adj_matrix_1, mode_adj_matrix_1, upper_adj_matrix_1 ) lower_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) mode_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.7, 0) ) upper_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(1, 0) ) adj_matrix_2 <- make_adj_matrix_w_tfns(   lower_adj_matrix_2, mode_adj_matrix_2, upper_adj_matrix_2 ) lower_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.2, 0) ) mode_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) upper_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) adj_matrix_3 <- make_adj_matrix_w_tfns(   lower_adj_matrix_3, mode_adj_matrix_3, upper_adj_matrix_3 ) lower_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.0, 0) ) mode_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0, 0) ) upper_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) adj_matrix_4 <- make_adj_matrix_w_tfns(   lower_adj_matrix_4, mode_adj_matrix_4, upper_adj_matrix_4 )  fcms_w_tfns <- list(   adj_matrix_1, adj_matrix_2, adj_matrix_3, adj_matrix_4 )  mc_tfn_fcms <- build_monte_carlo_fcms(   fcms_w_tfns, N_samples = 1000, include_zeroes = FALSE ) #> [1] Sampling from column vectors #> Sampling from column vectors[1] Constructing monte carlo fcms from samples #> Constructing monte carlo fcms from samples"},{"path":"/reference/build_monte_carlo_fcms_from_conventional_adj_matrices.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Monte Carlo (Conventional) FCMs — build_monte_carlo_fcms_from_conventional_adj_matrices","title":"Build Monte Carlo (Conventional) FCMs — build_monte_carlo_fcms_from_conventional_adj_matrices","text":"function generates n fcm models whose edge weights sampled either defined edge values set adjacency matrices derived sets edge values, stores list adjacency matrices.","code":""},{"path":"/reference/build_monte_carlo_fcms_from_conventional_adj_matrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Monte Carlo (Conventional) FCMs — build_monte_carlo_fcms_from_conventional_adj_matrices","text":"","code":"build_monte_carlo_fcms_from_conventional_adj_matrices(   adj_matrix_list = list(Matrix::sparseMatrix()),   N_samples = integer(),   include_zeroes = TRUE,   show_progress = TRUE )"},{"path":"/reference/build_monte_carlo_fcms_from_conventional_adj_matrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Monte Carlo (Conventional) FCMs — build_monte_carlo_fcms_from_conventional_adj_matrices","text":"adj_matrix_list list n x n adjacency matrices representing fcms N_samples number samples draw selected sampling method. Also, number sampled models generate include_zeroes TRUE/FALSE Whether incorporate zeroes intentionally-defined edge weights ignore aggregation show_progress TRUE/FALSE Show progress bar creating fmcm. Uses pbmapply pbapply package underlying function.","code":""},{"path":"/reference/build_monte_carlo_fcms_from_conventional_adj_matrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Monte Carlo (Conventional) FCMs — build_monte_carlo_fcms_from_conventional_adj_matrices","text":"list empirical (Conventional) FCM adj. matrices generated via monte carlo methods","code":""},{"path":"/reference/build_monte_carlo_fcms_from_conventional_adj_matrices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build Monte Carlo (Conventional) FCMs — build_monte_carlo_fcms_from_conventional_adj_matrices","text":"show_progress parallel inputs change functions called, change output! allowed toggled /increase user control runtime.","code":""},{"path":[]},{"path":"/reference/build_monte_carlo_fcms_from_conventional_adj_matrices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build Monte Carlo (Conventional) FCMs — build_monte_carlo_fcms_from_conventional_adj_matrices","text":"","code":"ex_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0, 0, 0),   \"B\" = c(0, 0, 0, 1),   \"C\" = c(0, 1, 0, 0),   \"D\" = c(0, 0, 1, 0) ) ex_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0, 0, 0),   \"B\" = c(0.25, 0, 0, 0.25),   \"C\" = c(0, 0.25, 0, 0),   \"D\" = c(0, 0, 0.25, 0) ) ex_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0, 0, 0),   \"B\" = c(0.75, 0, 0, 0.75),   \"C\" = c(0, 0.75, 0, 0),   \"D\" = c(0, 0, 0.75, 0) ) ex_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0, 0, 0),   \"B\" = c(0.5, 0, 0, 0.5),   \"C\" = c(0, 0.5, 0, 0),   \"D\" = c(0, 0, 0.5, 0) ) ex_fcms <- list(   ex_adj_matrix_1, ex_adj_matrix_2, ex_adj_matrix_3, ex_adj_matrix_4 )  mc_conventional_fcms <- build_monte_carlo_fcms_from_conventional_adj_matrices(   ex_fcms, N_samples = 1000, include_zeroes = FALSE, show_progress = TRUE ) #> [1] Sampling from column vectors #> Sampling from column vectors[1] Constructing monte carlo fcms from samples #> Constructing monte carlo fcms from samples"},{"path":"/reference/build_monte_carlo_fcms_from_fuzzy_set_adj_matrices.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Monte Carlo (IVFN or TFN) FCMs — build_monte_carlo_fcms_from_fuzzy_set_adj_matrices","title":"Build Monte Carlo (IVFN or TFN) FCMs — build_monte_carlo_fcms_from_fuzzy_set_adj_matrices","text":"function generates n fcm adjacency matrices whose edge weights sampled edge values (may Conventional, IVFNs, TFNs) stores list adjacency matrices.","code":""},{"path":"/reference/build_monte_carlo_fcms_from_fuzzy_set_adj_matrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Monte Carlo (IVFN or TFN) FCMs — build_monte_carlo_fcms_from_fuzzy_set_adj_matrices","text":"","code":"build_monte_carlo_fcms_from_fuzzy_set_adj_matrices(   fuzzy_set_adj_matrix_list = list(data.frame()),   fuzzy_set_adj_matrix_list_class = c(\"conventional\", \"ivfn\", \"tfn\"),   N_samples = integer(),   include_zeroes = FALSE,   show_progress = TRUE )"},{"path":"/reference/build_monte_carlo_fcms_from_fuzzy_set_adj_matrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Monte Carlo (IVFN or TFN) FCMs — build_monte_carlo_fcms_from_fuzzy_set_adj_matrices","text":"fuzzy_set_adj_matrix_list list n x n fuzzy adjacency matrices representing fcms fuzzy_set_adj_matrix_list_class \"fgcm\" \"fcm_w_tfn\" - class elements fuzzy_set_adj_matrix_list N_samples number samples draw corresponding distribution include_zeroes TRUE/FALSE Whether incorporate zeroes intentionally-defined edge weights ignore aggregation show_progress TRUE/FALSE Show progress bar creating fmcm. Uses pbmapply pbapply package underlying function.","code":""},{"path":"/reference/build_monte_carlo_fcms_from_fuzzy_set_adj_matrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Monte Carlo (IVFN or TFN) FCMs — build_monte_carlo_fcms_from_fuzzy_set_adj_matrices","text":"list empirical (Conventional) FCM adj. matrices generated via monte carlo methods","code":""},{"path":"/reference/build_monte_carlo_fcms_from_fuzzy_set_adj_matrices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build Monte Carlo (IVFN or TFN) FCMs — build_monte_carlo_fcms_from_fuzzy_set_adj_matrices","text":"edge represented IVFNs/TFNs, distributions averaged together create aggregate distribution sample . show_progress parallel inputs change functions called, change output! allowed toggled /increase user control runtime.","code":""},{"path":[]},{"path":"/reference/build_monte_carlo_fcms_from_fuzzy_set_adj_matrices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build Monte Carlo (IVFN or TFN) FCMs — build_monte_carlo_fcms_from_fuzzy_set_adj_matrices","text":"","code":"# For Interval-Valued Fuzzy Numbers (IVFNs) lower_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) upper_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) adj_matrix_1 <- make_adj_matrix_w_ivfns(lower_adj_matrix_1, upper_adj_matrix_1) lower_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) upper_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(1, 0) ) adj_matrix_2 <- make_adj_matrix_w_ivfns(lower_adj_matrix_2, upper_adj_matrix_2) lower_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.2, 0) ) upper_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) adj_matrix_3 <- make_adj_matrix_w_ivfns(lower_adj_matrix_3, upper_adj_matrix_3) lower_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.0, 0) ) upper_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) adj_matrix_4 <- make_adj_matrix_w_ivfns(lower_adj_matrix_4, upper_adj_matrix_4) fcms_w_ivfns <- list(adj_matrix_1, adj_matrix_2, adj_matrix_3, adj_matrix_4)  mc_ivfn_fcms <- build_monte_carlo_fcms_from_fuzzy_set_adj_matrices(   fcms_w_ivfns, \"ivfn\", 1000, include_zeroes = FALSE ) #> [1] Sampling from column vectors #> Sampling from column vectors[1] Constructing monte carlo fcms from samples #> Constructing monte carlo fcms from samples   # For Triangular Fuzzy Numbers (TFNs) lower_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) mode_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) upper_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) adj_matrix_1 <- make_adj_matrix_w_tfns(   lower_adj_matrix_1, mode_adj_matrix_1, upper_adj_matrix_1 ) lower_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) mode_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.7, 0) ) upper_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(1, 0) ) adj_matrix_2 <- make_adj_matrix_w_tfns(   lower_adj_matrix_2, mode_adj_matrix_2, upper_adj_matrix_2 ) lower_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.2, 0) ) mode_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) upper_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) adj_matrix_3 <- make_adj_matrix_w_tfns(   lower_adj_matrix_3, mode_adj_matrix_3, upper_adj_matrix_3 ) lower_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.0, 0) ) mode_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0, 0) ) upper_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) adj_matrix_4 <- make_adj_matrix_w_tfns(   lower_adj_matrix_4, mode_adj_matrix_4, upper_adj_matrix_4 )  fcms_w_tfns <- list(   adj_matrix_1, adj_matrix_2, adj_matrix_3, adj_matrix_4 )  mc_tfn_fcms <- build_monte_carlo_fcms_from_fuzzy_set_adj_matrices(   fcms_w_tfns, \"tfn\", 1000, include_zeroes = FALSE ) #> [1] Sampling from column vectors #> Sampling from column vectors[1] Constructing monte carlo fcms from samples #> Constructing monte carlo fcms from samples"},{"path":"/reference/c.ivfn.html","id":null,"dir":"Reference","previous_headings":"","what":"c.ivfn — c.ivfn","title":"c.ivfn — c.ivfn","text":"forces output c() equivalent list() inputs type ivfn","code":""},{"path":"/reference/c.ivfn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"c.ivfn — c.ivfn","text":"","code":"# S3 method for class 'ivfn' c(...)"},{"path":"/reference/c.ivfn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"c.ivfn — c.ivfn","text":"... set ivfn objects","code":""},{"path":"/reference/c.ivfn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"c.ivfn — c.ivfn","text":"list ivfn objects","code":""},{"path":"/reference/c.ivfn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"c.ivfn — c.ivfn","text":"ivfn objects, c() combines lower upper data single ivfn object, list() returns expected output list distinct ivfn objects.","code":""},{"path":[]},{"path":"/reference/c.ivfn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"c.ivfn — c.ivfn","text":"","code":"c(ivfn(0, 1), ivfn(0.2, 0.5)) #> [[1]] #> ivfn: [0, 1] #> [[2]] #> ivfn: [0.2, 0.5]"},{"path":"/reference/c.tfn.html","id":null,"dir":"Reference","previous_headings":"","what":"c.tfn — c.tfn","title":"c.tfn — c.tfn","text":"forces output c() equivalent list() inputs type tfn","code":""},{"path":"/reference/c.tfn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"c.tfn — c.tfn","text":"","code":"# S3 method for class 'tfn' c(...)"},{"path":"/reference/c.tfn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"c.tfn — c.tfn","text":"... set tfn objects","code":""},{"path":"/reference/c.tfn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"c.tfn — c.tfn","text":"list tfn objects","code":""},{"path":"/reference/c.tfn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"c.tfn — c.tfn","text":"tfn objects, c() combines lower upper data single tfn object, list() returns expected output list distinct tfn objects.","code":""},{"path":"/reference/c.tfn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"c.tfn — c.tfn","text":"","code":"c(tfn(0, 1), tfn(0.2, 0.5)) #> [[1]] #> tfn: [0, 1, Inf] #> [[2]] #> tfn: [0.2, 0.5, Inf]"},{"path":"/reference/calculate_next_conventional_fcm_state_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"[INTENDED FOR DEVELOPER USE ONLY] Calculate Next (Conventional) FCM State Vector — calculate_next_conventional_fcm_state_vector","title":"[INTENDED FOR DEVELOPER USE ONLY] Calculate Next (Conventional) FCM State Vector — calculate_next_conventional_fcm_state_vector","text":"calculates next iteration state vector fcm simulation based kosko, modified-kosko, rescale activation functions","code":""},{"path":"/reference/calculate_next_conventional_fcm_state_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[INTENDED FOR DEVELOPER USE ONLY] Calculate Next (Conventional) FCM State Vector — calculate_next_conventional_fcm_state_vector","text":"","code":"calculate_next_conventional_fcm_state_vector(   adj_matrix = matrix(),   state_vector = c(),   activation = c(\"kosko\", \"modified-kosko\", \"rescale\") )"},{"path":"/reference/calculate_next_conventional_fcm_state_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[INTENDED FOR DEVELOPER USE ONLY] Calculate Next (Conventional) FCM State Vector — calculate_next_conventional_fcm_state_vector","text":"adj_matrix n x n adjacency matrix represents FCM state_vector list state values particular iteration fcm simulation activation activation function applied. Must one following: 'kosko', 'modified-kosko', 'rescale'.","code":""},{"path":"/reference/calculate_next_conventional_fcm_state_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[INTENDED FOR DEVELOPER USE ONLY] Calculate Next (Conventional) FCM State Vector — calculate_next_conventional_fcm_state_vector","text":"(+ 1) iteration input state_vector based adj_matrix activation function","code":""},{"path":"/reference/calculate_next_conventional_fcm_state_vector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[INTENDED FOR DEVELOPER USE ONLY] Calculate Next (Conventional) FCM State Vector — calculate_next_conventional_fcm_state_vector","text":"INTENDED DEVELOPER USE state art fcm typically applies one three activation functions calculating iterative state vector values: kosko, modified-kosko, rescale (identified Gonzales et al. 2018 - https://doi.org/10.1142/S0218213018600102). kosko: considers current iteration (Kosko, 1986 - https://doi.org/10.1016/S0020-7373(86)80040-2) modified-kosko: previous value node influences future value (Stylio & Groumpos, 2004 - https://doi.org/10.1109/TSMCA.2003.818878) rescale: Like modified-kosko, assigns nodes value value 0.5 reduce influence lack initial state information can simulation output (rescale, 2011 - https://doi.org/10.1016/j.asoc.2009.12.010)= Use vignette(\"fcm-class\") information.","code":""},{"path":"/reference/calculate_next_conventional_fcm_state_vector.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"[INTENDED FOR DEVELOPER USE ONLY] Calculate Next (Conventional) FCM State Vector — calculate_next_conventional_fcm_state_vector","text":"Kosko, 1986","code":""},{"path":"/reference/calculate_next_conventional_fcm_state_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[INTENDED FOR DEVELOPER USE ONLY] Calculate Next (Conventional) FCM State Vector — calculate_next_conventional_fcm_state_vector","text":"","code":"NULL #> NULL"},{"path":"/reference/calculate_next_fuzzy_set_fcm_state_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"[INTENDED FOR DEVELOPER USE ONLY] Calculate Next (IVFN-FCM or TFN-FCM) State Vector — calculate_next_fuzzy_set_fcm_state_vector","title":"[INTENDED FOR DEVELOPER USE ONLY] Calculate Next (IVFN-FCM or TFN-FCM) State Vector — calculate_next_fuzzy_set_fcm_state_vector","text":"calculates next iteration state vector fcm simulation based kosko, modified-kosko, rescale activation functions","code":""},{"path":"/reference/calculate_next_fuzzy_set_fcm_state_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[INTENDED FOR DEVELOPER USE ONLY] Calculate Next (IVFN-FCM or TFN-FCM) State Vector — calculate_next_fuzzy_set_fcm_state_vector","text":"","code":"calculate_next_fuzzy_set_fcm_state_vector(   fuzzy_set_adj_matrix = matrix(),   fuzzy_set_state_vector = c(),   crisp_state_vector = c(),   activation = c(\"kosko\", \"modified-kosko\", \"rescale\"),   fcm_class = c(\"ivfn\", \"tfn\") )"},{"path":"/reference/calculate_next_fuzzy_set_fcm_state_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[INTENDED FOR DEVELOPER USE ONLY] Calculate Next (IVFN-FCM or TFN-FCM) State Vector — calculate_next_fuzzy_set_fcm_state_vector","text":"fuzzy_set_adj_matrix n x n adjacency matrix represents FCM every element matrix tfn. fuzzy_set_state_vector list state values tfn objects crisp_state_vector list state values defuzzed tfn objects activation activation function applied. Must one following: 'kosko', 'modified-kosko', 'rescale'. fcm_class Class edges fuzzy_set_adj_matrix. Either 'ivfn' 'tfn'","code":""},{"path":"/reference/calculate_next_fuzzy_set_fcm_state_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[INTENDED FOR DEVELOPER USE ONLY] Calculate Next (IVFN-FCM or TFN-FCM) State Vector — calculate_next_fuzzy_set_fcm_state_vector","text":"(+ 1) iteration input state_vector based adj_matrix activation function","code":""},{"path":"/reference/calculate_next_fuzzy_set_fcm_state_vector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[INTENDED FOR DEVELOPER USE ONLY] Calculate Next (IVFN-FCM or TFN-FCM) State Vector — calculate_next_fuzzy_set_fcm_state_vector","text":"INTENDED DEVELOPER USE state art fcm typically applies one three activation functions calculating iterative state vector values: kosko, modified-kosko, rescale (identified Gonzales et al. 2018 - https://doi.org/10.1142/S0218213018600102). kosko: considers current iteration (Kosko, 1986 - https://doi.org/10.1016/S0020-7373(86)80040-2) modified-kosko: previous value node influences future value (Stylio & Groumpos, 2004 - https://doi.org/10.1109/TSMCA.2003.818878) rescale: Like modified-kosko, assigns nodes value value 0.5 reduce influence lack initial state information can simulation output (rescale, 2011 - https://doi.org/10.1016/j.asoc.2009.12.010)=","code":""},{"path":"/reference/calculate_next_fuzzy_set_fcm_state_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[INTENDED FOR DEVELOPER USE ONLY] Calculate Next (IVFN-FCM or TFN-FCM) State Vector — calculate_next_fuzzy_set_fcm_state_vector","text":"","code":"NULL #> NULL"},{"path":"/reference/check_build_monte_carlo_fcms_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Check inputs for building monte carlo fcm inputs — check_build_monte_carlo_fcms_inputs","title":"Check inputs for building monte carlo fcm inputs — check_build_monte_carlo_fcms_inputs","text":"Check inputs building monte carlo fcm inputs","code":""},{"path":"/reference/check_build_monte_carlo_fcms_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check inputs for building monte carlo fcm inputs — check_build_monte_carlo_fcms_inputs","text":"","code":"check_build_monte_carlo_fcms_inputs(   adj_matrix_list,   N_samples,   include_zeroes,   show_progress )"},{"path":"/reference/check_build_monte_carlo_fcms_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check inputs for building monte carlo fcm inputs — check_build_monte_carlo_fcms_inputs","text":"adj_matrix_list list n x n adjacency matrices representing fcms N_samples number samples draw corresponding distribution include_zeroes TRUE/FALSE Whether incorporate zeroes intentionally-defined edge weights ignore aggregation show_progress TRUE/FALSE Show progress bar creating fmcm. Uses pbmapply pbapply package underlying function.","code":""},{"path":"/reference/check_build_monte_carlo_fcms_inputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check inputs for building monte carlo fcm inputs — check_build_monte_carlo_fcms_inputs","text":"NULL; Errors checks fail","code":""},{"path":[]},{"path":"/reference/check_build_monte_carlo_fcms_inputs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check inputs for building monte carlo fcm inputs — check_build_monte_carlo_fcms_inputs","text":"","code":"NULL #> NULL"},{"path":"/reference/check_fcmconfr_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"[INTENDED FOR DEVELOPER USE ONLY] Check fcmconfr Inputs — check_fcmconfr_inputs","title":"[INTENDED FOR DEVELOPER USE ONLY] Check fcmconfr Inputs — check_fcmconfr_inputs","text":"Confirm inputs work fcmconfr function return appropriate error messages necessary","code":""},{"path":"/reference/check_fcmconfr_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[INTENDED FOR DEVELOPER USE ONLY] Check fcmconfr Inputs — check_fcmconfr_inputs","text":"","code":"check_fcmconfr_inputs(   adj_matrices = list(matrix()),   aggregation_function = c(\"mean\", \"median\"),   monte_carlo_sampling_draws = 1000,   initial_state_vector = c(),   clamping_vector = c(),   activation = c(\"kosko\", \"modified-kosko\", \"rescale\"),   squashing = c(\"sigmoid\", \"tanh\", \"bivalent\", \"saturation\", \"trivalent\"),   lambda = 1,   point_of_inference = c(\"peak\", \"final\"),   max_iter = 100,   min_error = 1e-05,   inference_estimation_function = c(\"mean\", \"median\"),   inference_estimation_CI = 0.95,   inference_estimation_bootstrap_reps = 5000,   show_progress = TRUE,   parallel = TRUE,   n_cores = integer(),   perform_aggregate_analysis = TRUE,   perform_monte_carlo_analysis = TRUE,   perform_monte_carlo_inference_bootstrap_analysis = TRUE,   include_zero_weighted_edges_in_aggregation_and_mc_sampling = FALSE,   include_monte_carlo_FCM_simulations_in_output = TRUE )"},{"path":"/reference/check_fcmconfr_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[INTENDED FOR DEVELOPER USE ONLY] Check fcmconfr Inputs — check_fcmconfr_inputs","text":"adj_matrices list adjacency matrices (n x n) representing FCMs. can also individual adjacency matrix.Adj. Matrices can conventional FCMs, FCMs edge weights Interval Value Fuzzy Numbers (IVFNs) FCMs edge weights Triangular Fuzzy Numbers (TFNs) aggregation_function Aggregate adj. matrices single FCM taking either mean median edge weights edges included multiple maps monte_carlo_sampling_draws number FCMs generate via monte carlo sampling input adj. matrices initial_state_vector list state values start fcm simulation clamping_vector list values representing specific actions taken control behavior FCM. Specifically, non-zero values defined vector remain constant throughout entire simulation \"clamped\" values. activation activation function applied. Must one following: 'kosko', 'modified-kosko', 'papageorgiou'. squashing squashing function apply. Must one following: 'bivalent', 'saturation', 'trivalent', 'tanh', 'sigmoid'. lambda numeric value defines steepness slope squashing function tanh sigmoid applied point_of_inference point along simulation time-series identified inference. Must one following: 'peak' 'final' max_iter maximum number iterations run minimum error value achieved min_error lowest error (sum absolute value current state vector minus previous state vector) iterations necessary simulation stop inference_estimation_function Estimate confidence intervals \"mean\" \"median\" inferences monte carlo simulations inference_estimation_CI confidence interval estimate inferences concept across monte carlo FCMs (via bootstrap) inference_estimation_bootstrap_reps number bootstraps perform estimating confidence interval inferences concept across monte carlo FCMs show_progress TRUE/FALSE Show progress bar creating fmcm. Uses pbmapply pbapply package underlying function. parallel TRUE/FALSE Whether utilize parallel processing n_cores Number cores use parallel processing. input given, use available cores machine. perform_aggregate_analysis TRUE/FALSE Run code generate simulate aggregate FCM generated input adj_matrices perform_monte_carlo_analysis TRUE/FALSE Run code generate simulate monte carlo-generated FCM sampled input adj_matrices perform_monte_carlo_inference_bootstrap_analysis TRUE/FALSE Run code estimate 95 percent CI bounds means inferences monte carlo adj matrices include_zero_weighted_edges_in_aggregation_and_mc_sampling TRUE/FALSE Whether incorporate zeroes intentionally-defined edge weights ignore aggregating adj. matrices sampling monte carlo FCMs include_monte_carlo_FCM_simulations_in_output TRUE/FALSE Whether include simulations monte carlo FCMs. Switch FALSE concerned size output fcmconfr (simulations necessary run regardless)","code":""},{"path":"/reference/check_fcmconfr_inputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[INTENDED FOR DEVELOPER USE ONLY] Check fcmconfr Inputs — check_fcmconfr_inputs","text":"list resolved inputs pass fcmconfr","code":""},{"path":"/reference/check_fcmconfr_inputs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[INTENDED FOR DEVELOPER USE ONLY] Check fcmconfr Inputs — check_fcmconfr_inputs","text":"INTENDED DEVELOPER USE checks inputs fcmconfr function appropriate format, also fills missing inputs initial_state_vector, clamping_vector, IDs appropriate.","code":""},{"path":"/reference/check_fcmconfr_inputs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[INTENDED FOR DEVELOPER USE ONLY] Check fcmconfr Inputs — check_fcmconfr_inputs","text":"","code":"NULL #> NULL"},{"path":"/reference/check_if_local_machine_has_access_to_parallel_processing_functionalities.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the local machine can access internal parallel processing functionalities — check_if_local_machine_has_access_to_parallel_processing_functionalities","title":"Check if the local machine can access internal parallel processing functionalities — check_if_local_machine_has_access_to_parallel_processing_functionalities","text":"Check whether local machine access necessary packages run code parallel /using progress bar. Specifically, checks parallel, doSNOW, foreach, pbapply packages.","code":""},{"path":"/reference/check_if_local_machine_has_access_to_parallel_processing_functionalities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the local machine can access internal parallel processing functionalities — check_if_local_machine_has_access_to_parallel_processing_functionalities","text":"","code":"check_if_local_machine_has_access_to_parallel_processing_functionalities(   use_parallel,   use_show_progress )"},{"path":"/reference/check_if_local_machine_has_access_to_parallel_processing_functionalities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the local machine can access internal parallel processing functionalities — check_if_local_machine_has_access_to_parallel_processing_functionalities","text":"use_parallel TRUE/FALSE user intends use parallel processing use_show_progress TRUE/FALSE user intends display progress bars","code":""},{"path":"/reference/check_if_local_machine_has_access_to_parallel_processing_functionalities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the local machine can access internal parallel processing functionalities — check_if_local_machine_has_access_to_parallel_processing_functionalities","text":"TRUE/FALSE Whether machine access dependencies access internal parallel processing functionalities","code":""},{"path":"/reference/check_if_local_machine_has_access_to_parallel_processing_functionalities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if the local machine can access internal parallel processing functionalities — check_if_local_machine_has_access_to_parallel_processing_functionalities","text":"Confirms local machine can access required packages parallel processing /displaying progress bars runtime. revise inputs particular packages unavailable warn user changes, halt run.","code":""},{"path":[]},{"path":"/reference/check_if_local_machine_has_access_to_parallel_processing_functionalities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if the local machine can access internal parallel processing functionalities — check_if_local_machine_has_access_to_parallel_processing_functionalities","text":"","code":"check_if_local_machine_has_access_to_parallel_processing_functionalities(   use_parallel = TRUE, use_show_progress = TRUE ) #> Loading required namespace: doSNOW #> [1] TRUE"},{"path":"/reference/check_if_local_machine_has_access_to_show_progress_functionalities.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the local machine can access internal 'show_progress' functionalities — check_if_local_machine_has_access_to_show_progress_functionalities","title":"Check if the local machine can access internal 'show_progress' functionalities — check_if_local_machine_has_access_to_show_progress_functionalities","text":"Check whether local machine access necessary packages run code parallel /using progress bar. Specifically, checks doSNOW, foreach, pbapply packages.","code":""},{"path":"/reference/check_if_local_machine_has_access_to_show_progress_functionalities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the local machine can access internal 'show_progress' functionalities — check_if_local_machine_has_access_to_show_progress_functionalities","text":"","code":"check_if_local_machine_has_access_to_show_progress_functionalities(   use_parallel,   use_show_progress )"},{"path":"/reference/check_if_local_machine_has_access_to_show_progress_functionalities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the local machine can access internal 'show_progress' functionalities — check_if_local_machine_has_access_to_show_progress_functionalities","text":"use_parallel TRUE/FALSE user intends use parallel processing use_show_progress TRUE/FALSE user intends display progress bars","code":""},{"path":"/reference/check_if_local_machine_has_access_to_show_progress_functionalities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the local machine can access internal 'show_progress' functionalities — check_if_local_machine_has_access_to_show_progress_functionalities","text":"TRUE/FALSE Whether machine access dependencies access internal 'show_progress' functionalities","code":""},{"path":"/reference/check_if_local_machine_has_access_to_show_progress_functionalities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if the local machine can access internal 'show_progress' functionalities — check_if_local_machine_has_access_to_show_progress_functionalities","text":"Confirms local machine can access required packages displaying progress bars runtime. revise inputs particular packages unavailable warn user changes, halt run.","code":""},{"path":[]},{"path":"/reference/check_if_local_machine_has_access_to_show_progress_functionalities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if the local machine can access internal 'show_progress' functionalities — check_if_local_machine_has_access_to_show_progress_functionalities","text":"","code":"check_if_local_machine_has_access_to_show_progress_functionalities(   use_parallel = TRUE, use_show_progress = TRUE ) #> [1] TRUE"},{"path":"/reference/check_infer_fcm_set_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Check inputs for running infer_fcm on a list of adj. matrices — check_infer_fcm_set_inputs","title":"Check inputs for running infer_fcm on a list of adj. matrices — check_infer_fcm_set_inputs","text":"Check inputs running infer_fcm list adj. matrices","code":""},{"path":"/reference/check_infer_fcm_set_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check inputs for running infer_fcm on a list of adj. matrices — check_infer_fcm_set_inputs","text":"","code":"check_infer_fcm_set_inputs(   adj_matrices = list(matrix()),   initial_state_vector = c(),   clamping_vector = c(),   activation = c(\"kosko\", \"modified-kosko\", \"rescale\"),   squashing = c(\"sigmoid\", \"tanh\"),   lambda = 1,   point_of_inference = c(\"peak\", \"final\"),   max_iter = 100,   min_error = 1e-05,   parallel = TRUE,   n_cores = integer(),   show_progress = TRUE,   include_simulations_in_output = FALSE )"},{"path":"/reference/check_infer_fcm_set_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check inputs for running infer_fcm on a list of adj. matrices — check_infer_fcm_set_inputs","text":"adj_matrices list adjecency matrices initial_state_vector list state values start fcm simulation clamping_vector list values representing specific actions taken control behavior FCM. Specifically, non-zero values defined vector remain constant throughout entire simulation \"clamped\" values. activation activation function applied. Must one following: 'kosko', 'modified-kosko', 'papageorgiou'. squashing squashing function apply. Must one following: 'bivalent', 'saturation', 'trivalent', 'tanh', 'sigmoid'. lambda numeric value defines steepness slope squashing function tanh sigmoid applied point_of_inference point along simulation time-series identified inference. Must one following: 'peak' 'final' max_iter maximum number iterations run minimum error value achieved min_error lowest error (sum absolute value current state vector minus previous state vector) iterations necessary simulation stop parallel TRUE/FALSE Whether utilize parallel processing n_cores Number cores use parallel processing. input given, use available cores machine. show_progress TRUE/FALSE Show progress bar creating fmcm. Uses pbmapply pbapply package underlying function. include_simulations_in_output TRUE/FALSE whether include simulations monte-carlo-generated FCM. dramatically increase size output TRUE.","code":""},{"path":"/reference/check_infer_fcm_set_inputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check inputs for running infer_fcm on a list of adj. matrices — check_infer_fcm_set_inputs","text":"NULL; Errors checks fail","code":""},{"path":[]},{"path":"/reference/check_infer_fcm_set_inputs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check inputs for running infer_fcm on a list of adj. matrices — check_infer_fcm_set_inputs","text":"","code":"NULL #> NULL"},{"path":"/reference/check_monte_carlo_bootstrap_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Check inputs for monte carlo bootstrap analysis — check_monte_carlo_bootstrap_inputs","title":"Check inputs for monte carlo bootstrap analysis — check_monte_carlo_bootstrap_inputs","text":"Check inputs monte carlo bootstrap analysis","code":""},{"path":"/reference/check_monte_carlo_bootstrap_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check inputs for monte carlo bootstrap analysis — check_monte_carlo_bootstrap_inputs","text":"","code":"check_monte_carlo_bootstrap_inputs(   inference_estimation_function = c(\"mean\", \"median\"),   inference_estimation_CI = 0.95,   inference_estimation_bootstrap_reps = 1000,   parallel = TRUE,   n_cores = integer(),   show_progress = TRUE )"},{"path":"/reference/check_monte_carlo_bootstrap_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check inputs for monte carlo bootstrap analysis — check_monte_carlo_bootstrap_inputs","text":"inference_estimation_function Estimate confidence intervals \"mean\" \"median\" inferences monte carlo simulations inference_estimation_CI distribution bounded confidence intervals? (e.g. 0.95) inference_estimation_bootstrap_reps Repetitions bootstrap process, chosen parallel TRUE/FALSE Whether perform function using parallel processing n_cores Number cores use parallel processing. input given, use available cores machine. show_progress TRUE/FALSE Show progress bar creating fmcm. Uses pbmapply pbapply package underlying function.","code":""},{"path":"/reference/check_monte_carlo_bootstrap_inputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check inputs for monte carlo bootstrap analysis — check_monte_carlo_bootstrap_inputs","text":"NULL; Errors checks fail","code":""},{"path":[]},{"path":"/reference/check_monte_carlo_bootstrap_inputs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check inputs for monte carlo bootstrap analysis — check_monte_carlo_bootstrap_inputs","text":"","code":"NULL #> NULL"},{"path":"/reference/check_simulation_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"[INTENDED FOR DEVELOPER USE ONLY] Check Simulation Inputs — check_simulation_inputs","title":"[INTENDED FOR DEVELOPER USE ONLY] Check Simulation Inputs — check_simulation_inputs","text":"Confirm inputs work simulation function return appropriate error messages necessary","code":""},{"path":"/reference/check_simulation_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[INTENDED FOR DEVELOPER USE ONLY] Check Simulation Inputs — check_simulation_inputs","text":"","code":"check_simulation_inputs(   adj_matrix = matrix(),   initial_state_vector = c(),   clamping_vector = c(),   activation = c(\"kosko\", \"modified-kosko\", \"rescale\"),   squashing = c(\"sigmoid\", \"tanh\", \"bivalent\", \"saturation\", \"trivalent\"),   lambda = 1,   point_of_inference = c(\"peak\", \"final\"),   max_iter = 100,   min_error = 1e-04 )"},{"path":"/reference/check_simulation_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[INTENDED FOR DEVELOPER USE ONLY] Check Simulation Inputs — check_simulation_inputs","text":"adj_matrix n x n adjacency matrix represents FCM initial_state_vector list state values start fcm simulation clamping_vector list values representing specific actions taken control behavior FCM. Specifically, non-zero values defined vector remain constant throughout entire simulation \"clamped\" values. activation activation function applied. Must one following: 'kosko', 'modified-kosko', 'rescale'. squashing squashing function apply. Must one following: 'bivalent', 'saturation', 'trivalent', 'tanh', 'sigmoid'. lambda numeric value defines steepness slope squashing function tanh sigmoid applied point_of_inference point along simulation time-series identified inference. Must one following: 'peak' 'final' max_iter maximum number iterations run minimum error value achieved min_error lowest error (sum absolute value current state vector minus previous state vector) iterations necessary simulation stop","code":""},{"path":"/reference/check_simulation_inputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[INTENDED FOR DEVELOPER USE ONLY] Check Simulation Inputs — check_simulation_inputs","text":"formatted initial_state_vector clamping_vector","code":""},{"path":"/reference/check_simulation_inputs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[INTENDED FOR DEVELOPER USE ONLY] Check Simulation Inputs — check_simulation_inputs","text":"INTENDED DEVELOPER USE checks inputs simulation function appropriate format, also fills missing inputs initial_state_vector, clamping_vector, IDs appropriate.","code":""},{"path":"/reference/check_simulation_inputs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[INTENDED FOR DEVELOPER USE ONLY] Check Simulation Inputs — check_simulation_inputs","text":"","code":"NULL #> NULL"},{"path":"/reference/clean_simulation_output.html","id":null,"dir":"Reference","previous_headings":"","what":"[INTENDED FOR DEVELOPER USE ONLY] Clean Simulation Output — clean_simulation_output","title":"[INTENDED FOR DEVELOPER USE ONLY] Clean Simulation Output — clean_simulation_output","text":"INTENDED DEVELOPER USE adds quality--life improvements detail simulation output objects adding column names iter column","code":""},{"path":"/reference/clean_simulation_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[INTENDED FOR DEVELOPER USE ONLY] Clean Simulation Output — clean_simulation_output","text":"","code":"clean_simulation_output(output_obj, concepts)"},{"path":"/reference/clean_simulation_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[INTENDED FOR DEVELOPER USE ONLY] Clean Simulation Output — clean_simulation_output","text":"output_obj fcm_w_fcm_w_tfn simulation output object concepts list names node (must n items). empty, use column names adjacancy matrix (given).","code":""},{"path":"/reference/clean_simulation_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[INTENDED FOR DEVELOPER USE ONLY] Clean Simulation Output — clean_simulation_output","text":"cleaned simulation output","code":""},{"path":"/reference/clean_simulation_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[INTENDED FOR DEVELOPER USE ONLY] Clean Simulation Output — clean_simulation_output","text":"","code":"NULL #> NULL"},{"path":"/reference/convert_element_to_ivfn_or_tfn_if_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Value to IVFN or TFN if Value is Numeric — convert_element_to_ivfn_or_tfn_if_numeric","title":"Convert Value to IVFN or TFN if Value is Numeric — convert_element_to_ivfn_or_tfn_if_numeric","text":"checks whether input element ordinary number triangular number. ivfn tfn, returns input, numeric type object (ordinary number), convert number ivfn tfn","code":""},{"path":"/reference/convert_element_to_ivfn_or_tfn_if_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Value to IVFN or TFN if Value is Numeric — convert_element_to_ivfn_or_tfn_if_numeric","text":"","code":"convert_element_to_ivfn_or_tfn_if_numeric(   element,   desired_class = c(\"ivfn\", \"tfn\") )"},{"path":"/reference/convert_element_to_ivfn_or_tfn_if_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Value to IVFN or TFN if Value is Numeric — convert_element_to_ivfn_or_tfn_if_numeric","text":"element element matrix desired_class Transform element 'ivfn' 'tfn'","code":""},{"path":"/reference/convert_element_to_ivfn_or_tfn_if_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Value to IVFN or TFN if Value is Numeric — convert_element_to_ivfn_or_tfn_if_numeric","text":"IVFN TFN representation crisp, numeric value","code":""},{"path":"/reference/convert_element_to_ivfn_or_tfn_if_numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Value to IVFN or TFN if Value is Numeric — convert_element_to_ivfn_or_tfn_if_numeric","text":"","code":"convert_element_to_ivfn_or_tfn_if_numeric(0.6, \"ivfn\") #> ivfn: [0.6, 0.6] convert_element_to_ivfn_or_tfn_if_numeric(0.7, \"tfn\") #> tfn: [0.7, 0.7, 0.7]"},{"path":"/reference/convert_fuzzy_set_elements_in_matrix_to_distributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert IVFN or TFN Elements in Adj. Matrix to Distributions (i.e. sets) — convert_fuzzy_set_elements_in_matrix_to_distributions","title":"Convert IVFN or TFN Elements in Adj. Matrix to Distributions (i.e. sets) — convert_fuzzy_set_elements_in_matrix_to_distributions","text":"Given list adjacency matrices include either ivfns tfns, convert objects corresponding distributions representative values.","code":""},{"path":"/reference/convert_fuzzy_set_elements_in_matrix_to_distributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert IVFN or TFN Elements in Adj. Matrix to Distributions (i.e. sets) — convert_fuzzy_set_elements_in_matrix_to_distributions","text":"","code":"convert_fuzzy_set_elements_in_matrix_to_distributions(   fuzzy_set_matrix = matrix(),   object_class = c(\"ivfn\", \"tfn\"),   N_samples = integer() )"},{"path":"/reference/convert_fuzzy_set_elements_in_matrix_to_distributions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert IVFN or TFN Elements in Adj. Matrix to Distributions (i.e. sets) — convert_fuzzy_set_elements_in_matrix_to_distributions","text":"fuzzy_set_matrix matrix contains fuzzy sets elements object_class Values represented either ivfns tfns. Options: 'ivfn' 'tfn' N_samples number samples draw corresponding distribution","code":""},{"path":"/reference/convert_fuzzy_set_elements_in_matrix_to_distributions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert IVFN or TFN Elements in Adj. Matrix to Distributions (i.e. sets) — convert_fuzzy_set_elements_in_matrix_to_distributions","text":"adj. matrix IVFNs TFNs represented lists (sets) representative distributions","code":""},{"path":"/reference/convert_fuzzy_set_elements_in_matrix_to_distributions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert IVFN or TFN Elements in Adj. Matrix to Distributions (i.e. sets) — convert_fuzzy_set_elements_in_matrix_to_distributions","text":"function assists subtracting baseline scenario simulation calling infer_fcm IVFN-FCMs TFN-FCMs.","code":""},{"path":"/reference/convert_fuzzy_set_elements_in_matrix_to_distributions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert IVFN or TFN Elements in Adj. Matrix to Distributions (i.e. sets) — convert_fuzzy_set_elements_in_matrix_to_distributions","text":"","code":"lower_adj_matrix <- data.frame(   C1 = c(0, 0, 0, 0, 0, 0),   C2 = c(-0.85, 0, 0, 0.35, 0, 0),   C3 = c(0, 0, 0, 0, 0, 0),   C4 = c(-0.7, 0.6, -1, 0, -1, 0),   C5 = c(0.1, 0, 0, -0.8, 0, 0),   C6 = c(0, -0.95, 0, 0, -0.95, 0) ) mode_adj_matrix <- data.frame(   C1 = c(0, 0, 0, 0, 0, 0),   C2 = c(-0.65, 0, 0, 0.80, 0, 0),   C3 = c(0, 0, 0, 0, 0, 0),   C4 = c(-0.6, 0.65, -0.85, 0, -0.95, 0),   C5 = c(0.6, 0, 0, -0.2, 0, 0),   C6 = c(0, -0.85, 0.1, 0, -0.75, 0) ) upper_adj_matrix <- data.frame(   C1 = c(0, 0, 0, 0, 0, 0),   C2 = c(-0.1, 0, 0, 1, 0, 0),   C3 = c(0, 0, 0, 0, 0, 0),   C4 = c(-0.4, 0.7, -0.7, 0, -0.1, 0),   C5 = c(0.7, 0, 0, -0.1, 0, 0),   C6 = c(0, -0.2, 0.25, 0, -0.7, 0) ) ex_tfn_adj_matrix <- make_adj_matrix_w_tfns(   lower_adj_matrix, mode_adj_matrix, upper_adj_matrix )  convert_fuzzy_set_elements_in_matrix_to_distributions(   ex_tfn_adj_matrix, \"tfn\", 1000 ) #>    C1     C2     C3     C4     C5     C6     #> C1 list,1 list,1 list,1 list,1 list,1 list,1 #> C2 list,1 list,1 list,1 list,1 list,1 list,1 #> C3 list,1 list,1 list,1 list,1 list,1 list,1 #> C4 list,1 list,1 list,1 list,1 list,1 list,1 #> C5 list,1 list,1 list,1 list,1 list,1 list,1 #> C6 list,1 list,1 list,1 list,1 list,1 list,1"},{"path":"/reference/defuzz_ivfn_or_tfn.html","id":null,"dir":"Reference","previous_headings":"","what":"Defuzz (IVFN or TFN) — defuzz_ivfn_or_tfn","title":"Defuzz (IVFN or TFN) — defuzz_ivfn_or_tfn","text":"Convert fuzzy number crisp value. IVFNs, return average upper lower bounds. TFNs, return average lower bound, mode, upper bound.","code":""},{"path":"/reference/defuzz_ivfn_or_tfn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defuzz (IVFN or TFN) — defuzz_ivfn_or_tfn","text":"","code":"defuzz_ivfn_or_tfn(fuzzy_number)"},{"path":"/reference/defuzz_ivfn_or_tfn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defuzz (IVFN or TFN) — defuzz_ivfn_or_tfn","text":"fuzzy_number fuzzy number object. Either ivfn tfn","code":""},{"path":"/reference/defuzz_ivfn_or_tfn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Defuzz (IVFN or TFN) — defuzz_ivfn_or_tfn","text":"crisp value representative input IVFN TFN","code":""},{"path":"/reference/defuzz_ivfn_or_tfn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Defuzz (IVFN or TFN) — defuzz_ivfn_or_tfn","text":"","code":"defuzz_ivfn_or_tfn(ivfn(-1, 1)) #> [1] 0 defuzz_ivfn_or_tfn(tfn(-1, 0, 1)) #> [1] 0"},{"path":"/reference/fcmconfr.html","id":null,"dir":"Reference","previous_headings":"","what":"fcmconfr — fcmconfr","title":"fcmconfr — fcmconfr","text":"primary function fcmconfr package. function performs three different analyses set (individual) input FCM(s). Call fcmconfr_gui. assistance inputs. FCM Simulation: Simulate (raw/unmodified) input FCMs estimate          inferences. Inferences calculated comparing simulation          output particular scenario simulation output          baseline (.e. natural behavior network without external          perturbation), (Ozesmi & Ozesmi, 2003) help distinguish          decision-making impacts structural          expected, steady-state system. Aggregate Analysis: Generate aggregate adj. matrix list          adj. matrices. FCM aggregation works calculating mean/median          edge weight edges across input adj. matrices (.e.          mean/median edge weight connecting -> B across maps,          mean/median edge weight connecting B -> C across          maps, ) (Aminpour et al., 2020). user may dictate          whether incorporate 0-valued edge weights mean/median          calculations. Monte Carlo Analysis: Generate empirical adj. matrices whose edge          weights drawn edge weights input FCMs using          monte carlo sampling methods.empirical FCMs simulated          bulk using FCM Simulation method previously described.          outputs dataframe inferences across empirical FCMs          represent possibility space inferences representative          collective. function also uses bootstrapping methods          estimate confidence intervals inferences generated          empirical FCMs (may toggled wanting reduce runtime). function accepts three different types FCMs differ represent edge weights. Note: input FCMs must type (.e. list input FCMs must one type another, contain multiple types FCMs input set). Conventional FCMs: represent edge weights fuzzy numbers          represent FCMs thir traditional form (Stylios, 1997) Interval-Valued Fuzzy Number (IVFN) FCMs: extension Conventional          FCMs, represent edge weights interval-valued fuzzy numbers          (IVFNs) describe range values defined lower          upper bound (e.g. [0.2, 0.8] represents set values          0.2 0.8 may represented uniform distribution          via runif(N, min = 0.2, max = 0.8)) (Moore & Lodwick, 2003) Triangular Fuzzy Number (TFN) FCMs: extension Conventional          FCMs, represent edge weights triangular fuzzy numbers (TFNs)          describe bounded range values greater density          values point , probability density          function distribution appears triangular (Moore & Lodwick, 2003).          defined lower upper bounds well mode          value, can called within package via          rtriangular_dist function packages          EnvStats::rtri().","code":""},{"path":"/reference/fcmconfr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fcmconfr — fcmconfr","text":"","code":"fcmconfr(   adj_matrices = list(matrix()),   aggregation_function = c(\"mean\", \"median\"),   monte_carlo_sampling_draws = 1000,   initial_state_vector = c(),   clamping_vector = c(),   activation = c(\"kosko\", \"modified-kosko\", \"rescale\"),   squashing = c(\"sigmoid\", \"tanh\", \"bivalent\", \"saturation\", \"trivalent\"),   lambda = 1,   point_of_inference = c(\"peak\", \"final\"),   max_iter = 100,   min_error = 1e-05,   inference_estimation_function = c(\"mean\", \"median\"),   inference_estimation_CI = 0.95,   inference_estimation_bootstrap_reps = 5000,   show_progress = TRUE,   parallel = TRUE,   n_cores = integer(),   perform_aggregate_analysis = TRUE,   perform_monte_carlo_analysis = TRUE,   perform_monte_carlo_inference_bootstrap_analysis = TRUE,   include_zero_weighted_edges_in_aggregation_and_mc_sampling = FALSE,   include_monte_carlo_FCM_simulations_in_output = TRUE )"},{"path":"/reference/fcmconfr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fcmconfr — fcmconfr","text":"adj_matrices list adjacency matrices (n x n) representing FCMs. can also individual adjacency matrix.Adj. Matrices can conventional FCMs, FCMs edge weights Interval Value Fuzzy Numbers (IVFNs) FCMs edge weights Triangular Fuzzy Numbers (TFNs) aggregation_function Aggregate adj. matrices single FCM taking either mean median edge weights edges included multiple maps monte_carlo_sampling_draws number FCMs generate via monte carlo sampling input adj. matrices initial_state_vector list state values start fcm simulation clamping_vector list values representing specific actions taken control behavior FCM. Specifically, non-zero values defined vector remain constant throughout entire simulation \"clamped\" values. activation activation function applied. Must one following: 'kosko', 'modified-kosko', 'papageorgiou'. squashing squashing function apply. Must one following: 'bivalent', 'saturation', 'trivalent', 'tanh', 'sigmoid'. lambda numeric value defines steepness slope squashing function tanh sigmoid applied point_of_inference point along simulation time-series identified inference. Must one following: 'peak' 'final' max_iter maximum number iterations run minimum error value achieved min_error lowest error (sum absolute value current state vector minus previous state vector) iterations necessary simulation stop inference_estimation_function Estimate confidence intervals \"mean\" \"median\" inferences monte carlo simulations inference_estimation_CI confidence interval estimate inferences concept across monte carlo FCMs (via bootstrap) inference_estimation_bootstrap_reps number bootstraps perform estimating confidence interval inferences concept across monte carlo FCMs show_progress TRUE/FALSE Show progress bar creating fmcm. Uses pbmapply pbapply package underlying function. parallel TRUE/FALSE Whether utilize parallel processing n_cores Number cores use parallel processing. input given, use available cores machine. perform_aggregate_analysis TRUE/FALSE Run code generate simulate aggregate FCM generated input adj_matrices perform_monte_carlo_analysis TRUE/FALSE Run code generate simulate monte carlo-generated FCM sampled input adj_matrices perform_monte_carlo_inference_bootstrap_analysis TRUE/FALSE Run code estimate 95 percent CI bounds means inferences monte carlo adj matrices include_zero_weighted_edges_in_aggregation_and_mc_sampling TRUE/FALSE Whether incorporate zeroes intentionally-defined edge weights ignore aggregating adj. matrices sampling monte carlo FCMs include_monte_carlo_FCM_simulations_in_output TRUE/FALSE Whether include simulations monte carlo FCMs. Switch FALSE concerned size output fcmconfr (simulations necessary run regardless)","code":""},{"path":"/reference/fcmconfr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fcmconfr — fcmconfr","text":"list outputs generated input_fcms simulations,          aggregate_fcm analysis, monte_carlo_fcms analysis. Bootstrap          estimates inferences monte carlo analysis included,          well function inputs.","code":""},{"path":"/reference/fcmconfr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"fcmconfr — fcmconfr","text":"Call fcmconfr_gui. assistance inputs.","code":""},{"path":"/reference/fcmconfr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"fcmconfr — fcmconfr","text":"ozesmiParticipatoryApproachEcosystem2003fcmconfr aminpourWisdomStakeholderCrowds2020fcmconfr styliosIntroducingTheoryFuzzy1997fcmconfr mooreIntervalAnalysisFuzzy2003fcmconfr","code":""},{"path":"/reference/fcmconfr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fcmconfr — fcmconfr","text":"","code":"# Conventional FCMs test_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0, 0, 0),   \"B\" = c(1, 0, 0, 1),   \"C\" = c(0, 1, 0, 0),   \"D\" = c(0, 0, 1, 0) ) test_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0, 0, 0),   \"B\" = c(0.25, 0, 0, 0.25),   \"C\" = c(0, 0.25, 0, 0),   \"D\" = c(0, 0, 0.25, 0) ) test_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0, 0, 0),   \"B\" = c(0.75, 0, 0, 0.75),   \"C\" = c(0, 0.75, 0, 0),   \"D\" = c(0, 0, 0.75, 0) ) test_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0, 0, 0),   \"B\" = c(0.5, 0, 0, 0.5),   \"C\" = c(0, 0.5, 0, 0),   \"D\" = c(0, 0, 0.5, 0) ) ex_conventional_fcms <- list(   test_adj_matrix_1, test_adj_matrix_2, test_adj_matrix_3, test_adj_matrix_4 ) ex_conventional_fcmconfr <- fcmconfr(   adj_matrices = ex_conventional_fcms,   # Aggregation and Monte Carlo Sampling   aggregation_function = 'mean',   monte_carlo_sampling_draws = 100,   # Simulation   initial_state_vector = c(1, 1, 1, 1),   clamping_vector = c(0, 1, 0, 0),   activation = 'kosko',   squashing = 'sigmoid',   lambda = 1,   point_of_inference = \"final\",   max_iter = 100,   min_error = 1e-05,   # Inference Estimation (bootstrap)   inference_estimation_function = \"median\",   inference_estimation_CI = 0.95,   inference_estimation_bootstrap_reps = 1000,   # Runtime Options   show_progress = TRUE,   parallel = TRUE,   n_cores = 2,   # Additional Options   perform_aggregate_analysis = TRUE,   perform_monte_carlo_analysis = TRUE,   perform_monte_carlo_inference_bootstrap_analysis = TRUE,   include_zero_weighted_edges_in_aggregation_and_mc_sampling = FALSE,   include_monte_carlo_FCM_simulations_in_output = TRUE ) #> [1] Simulating Input FCMs #> [1] Initializing cluster #> [1] Running Simulations in Parallel #> [1] Sampling from column vectors #> Sampling from column vectors[1] Constructing monte carlo fcms from samples #> Constructing monte carlo fcms from samples[1] Initializing cluster #> [1] Running Simulations in Parallel #> [1] Performing bootstrap simulations #> [1] Initializing cluster #> [1] Sampling means #>    |                                                           |                                                  |   1%   |                                                           |=                                                 |   1%   |                                                           |=                                                 |   2%   |                                                           |=                                                 |   3%   |                                                           |==                                                |   3%   |                                                           |==                                                |   4%   |                                                           |==                                                |   5%   |                                                           |===                                               |   5%   |                                                           |===                                               |   6%   |                                                           |===                                               |   7%   |                                                           |====                                              |   7%   |                                                           |====                                              |   8%   |                                                           |====                                              |   9%   |                                                           |=====                                             |   9%   |                                                           |=====                                             |  10%   |                                                           |=====                                             |  11%   |                                                           |======                                            |  11%   |                                                           |======                                            |  12%   |                                                           |======                                            |  13%   |                                                           |=======                                           |  13%   |                                                           |=======                                           |  14%   |                                                           |=======                                           |  15%   |                                                           |========                                          |  15%   |                                                           |========                                          |  16%   |                                                           |========                                          |  17%   |                                                           |=========                                         |  17%   |                                                           |=========                                         |  18%   |                                                           |=========                                         |  19%   |                                                           |==========                                        |  19%   |                                                           |==========                                        |  20%   |                                                           |==========                                        |  21%   |                                                           |===========                                       |  21%   |                                                           |===========                                       |  22%   |                                                           |===========                                       |  23%   |                                                           |============                                      |  23%   |                                                           |============                                      |  24%   |                                                           |============                                      |  25%   |                                                           |=============                                     |  25%   |                                                           |=============                                     |  26%   |                                                           |=============                                     |  27%   |                                                           |==============                                    |  27%   |                                                           |==============                                    |  28%   |                                                           |==============                                    |  29%   |                                                           |===============                                   |  29%   |                                                           |===============                                   |  30%   |                                                           |===============                                   |  31%   |                                                           |================                                  |  31%   |                                                           |================                                  |  32%   |                                                           |================                                  |  33%   |                                                           |=================                                 |  33%   |                                                           |=================                                 |  34%   |                                                           |=================                                 |  35%   |                                                           |==================                                |  35%   |                                                           |==================                                |  36%   |                                                           |==================                                |  37%   |                                                           |===================                               |  37%   |                                                           |===================                               |  38%   |                                                           |===================                               |  39%   |                                                           |====================                              |  39%   |                                                           |====================                              |  40%   |                                                           |====================                              |  41%   |                                                           |=====================                             |  41%   |                                                           |=====================                             |  42%   |                                                           |=====================                             |  43%   |                                                           |======================                            |  43%   |                                                           |======================                            |  44%   |                                                           |======================                            |  45%   |                                                           |=======================                           |  45%   |                                                           |=======================                           |  46%   |                                                           |=======================                           |  47%   |                                                           |========================                          |  47%   |                                                           |========================                          |  48%   |                                                           |========================                          |  49%   |                                                           |=========================                         |  49%   |                                                           |=========================                         |  50%   |                                                           |=========================                         |  51%   |                                                           |==========================                        |  51%   |                                                           |==========================                        |  52%   |                                                           |==========================                        |  53%   |                                                           |===========================                       |  53%   |                                                           |===========================                       |  54%   |                                                           |===========================                       |  55%   |                                                           |============================                      |  55%   |                                                           |============================                      |  56%   |                                                           |============================                      |  57%   |                                                           |=============================                     |  57%   |                                                           |=============================                     |  58%   |                                                           |=============================                     |  59%   |                                                           |==============================                    |  59%   |                                                           |==============================                    |  60%   |                                                           |==============================                    |  61%   |                                                           |===============================                   |  61%   |                                                           |===============================                   |  62%   |                                                           |===============================                   |  63%   |                                                           |================================                  |  63%   |                                                           |================================                  |  64%   |                                                           |================================                  |  65%   |                                                           |=================================                 |  65%   |                                                           |=================================                 |  66%   |                                                           |=================================                 |  67%   |                                                           |==================================                |  67%   |                                                           |==================================                |  68%   |                                                           |==================================                |  69%   |                                                           |===================================               |  69%   |                                                           |===================================               |  70%   |                                                           |===================================               |  71%   |                                                           |====================================              |  71%   |                                                           |====================================              |  72%   |                                                           |====================================              |  73%   |                                                           |=====================================             |  73%   |                                                           |=====================================             |  74%   |                                                           |=====================================             |  75%   |                                                           |======================================            |  75%   |                                                           |======================================            |  76%   |                                                           |======================================            |  77%   |                                                           |=======================================           |  77%   |                                                           |=======================================           |  78%   |                                                           |=======================================           |  79%   |                                                           |========================================          |  79%   |                                                           |========================================          |  80%   |                                                           |========================================          |  81%   |                                                           |=========================================         |  81%   |                                                           |=========================================         |  82%   |                                                           |=========================================         |  83%   |                                                           |==========================================        |  83%   |                                                           |==========================================        |  84%   |                                                           |==========================================        |  85%   |                                                           |===========================================       |  85%   |                                                           |===========================================       |  86%   |                                                           |===========================================       |  87%   |                                                           |============================================      |  87%   |                                                           |============================================      |  88%   |                                                           |============================================      |  89%   |                                                           |=============================================     |  89%   |                                                           |=============================================     |  90%   |                                                           |=============================================     |  91%   |                                                           |==============================================    |  91%   |                                                           |==============================================    |  92%   |                                                           |==============================================    |  93%   |                                                           |===============================================   |  93%   |                                                           |===============================================   |  94%   |                                                           |===============================================   |  95%   |                                                           |================================================  |  95%   |                                                           |================================================  |  96%   |                                                           |================================================  |  97%   |                                                           |================================================= |  97%   |                                                           |================================================= |  98%   |                                                           |================================================= |  99%   |                                                           |==================================================|  99%   |                                                           |==================================================| 100% #> [1] Done   # IVFN FCM fcmconfr lower_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.25, 0) ) upper_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.75, 0) ) adj_matrix_w_ivfns_1 <- make_adj_matrix_w_ivfns(   lower_adj_matrix_1, upper_adj_matrix_1 ) lower_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.15, 0) ) upper_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.85, 0) ) adj_matrix_w_ivfns_2 <- make_adj_matrix_w_ivfns(   lower_adj_matrix_2, upper_adj_matrix_2 ) ex_ivfn_fcms <- list(adj_matrix_w_ivfns_1, adj_matrix_w_ivfns_2) ex_ivfn_fcmconfr <- fcmconfr(   adj_matrices = ex_ivfn_fcms,   # Aggregation and Monte Carlo Sampling   aggregation_function = 'mean',   monte_carlo_sampling_draws = 100,   # Simulation   initial_state_vector = c(1, 1),   clamping_vector = c(0, 1),   activation = 'kosko',   squashing = 'sigmoid',   lambda = 1,   point_of_inference = \"final\",   max_iter = 100,   min_error = 1e-05,   # Inference Estimation (bootstrap)   inference_estimation_function = \"mean\",   inference_estimation_CI = 0.95,   inference_estimation_bootstrap_reps = 1000,   # Runtime Options   show_progress = TRUE,   parallel = TRUE,   n_cores = 2,   # Additional Options   perform_aggregate_analysis = TRUE,   perform_monte_carlo_analysis = TRUE,   perform_monte_carlo_inference_bootstrap_analysis = TRUE,   include_zero_weighted_edges_in_aggregation_and_mc_sampling = FALSE,   include_monte_carlo_FCM_simulations_in_output = TRUE ) #> [1] Simulating Input FCMs #> [1] Initializing cluster #> [1] Running Simulations in Parallel #> [1] Sampling from column vectors #> Sampling from column vectors[1] Constructing monte carlo fcms from samples #> Constructing monte carlo fcms from samples[1] Initializing cluster #> [1] Running Simulations in Parallel #> [1] Performing bootstrap simulations #> [1] Initializing cluster #> [1] Sampling means #>    |                                                           |                                                  |   1%   |                                                           |=                                                 |   1%   |                                                           |=                                                 |   2%   |                                                           |=                                                 |   3%   |                                                           |==                                                |   3%   |                                                           |==                                                |   4%   |                                                           |==                                                |   5%   |                                                           |===                                               |   5%   |                                                           |===                                               |   6%   |                                                           |===                                               |   7%   |                                                           |====                                              |   7%   |                                                           |====                                              |   8%   |                                                           |====                                              |   9%   |                                                           |=====                                             |   9%   |                                                           |=====                                             |  10%   |                                                           |=====                                             |  11%   |                                                           |======                                            |  11%   |                                                           |======                                            |  12%   |                                                           |======                                            |  13%   |                                                           |=======                                           |  13%   |                                                           |=======                                           |  14%   |                                                           |=======                                           |  15%   |                                                           |========                                          |  15%   |                                                           |========                                          |  16%   |                                                           |========                                          |  17%   |                                                           |=========                                         |  17%   |                                                           |=========                                         |  18%   |                                                           |=========                                         |  19%   |                                                           |==========                                        |  19%   |                                                           |==========                                        |  20%   |                                                           |==========                                        |  21%   |                                                           |===========                                       |  21%   |                                                           |===========                                       |  22%   |                                                           |===========                                       |  23%   |                                                           |============                                      |  23%   |                                                           |============                                      |  24%   |                                                           |============                                      |  25%   |                                                           |=============                                     |  25%   |                                                           |=============                                     |  26%   |                                                           |=============                                     |  27%   |                                                           |==============                                    |  27%   |                                                           |==============                                    |  28%   |                                                           |==============                                    |  29%   |                                                           |===============                                   |  29%   |                                                           |===============                                   |  30%   |                                                           |===============                                   |  31%   |                                                           |================                                  |  31%   |                                                           |================                                  |  32%   |                                                           |================                                  |  33%   |                                                           |=================                                 |  33%   |                                                           |=================                                 |  34%   |                                                           |=================                                 |  35%   |                                                           |==================                                |  35%   |                                                           |==================                                |  36%   |                                                           |==================                                |  37%   |                                                           |===================                               |  37%   |                                                           |===================                               |  38%   |                                                           |===================                               |  39%   |                                                           |====================                              |  39%   |                                                           |====================                              |  40%   |                                                           |====================                              |  41%   |                                                           |=====================                             |  41%   |                                                           |=====================                             |  42%   |                                                           |=====================                             |  43%   |                                                           |======================                            |  43%   |                                                           |======================                            |  44%   |                                                           |======================                            |  45%   |                                                           |=======================                           |  45%   |                                                           |=======================                           |  46%   |                                                           |=======================                           |  47%   |                                                           |========================                          |  47%   |                                                           |========================                          |  48%   |                                                           |========================                          |  49%   |                                                           |=========================                         |  49%   |                                                           |=========================                         |  50%   |                                                           |=========================                         |  51%   |                                                           |==========================                        |  51%   |                                                           |==========================                        |  52%   |                                                           |==========================                        |  53%   |                                                           |===========================                       |  53%   |                                                           |===========================                       |  54%   |                                                           |===========================                       |  55%   |                                                           |============================                      |  55%   |                                                           |============================                      |  56%   |                                                           |============================                      |  57%   |                                                           |=============================                     |  57%   |                                                           |=============================                     |  58%   |                                                           |=============================                     |  59%   |                                                           |==============================                    |  59%   |                                                           |==============================                    |  60%   |                                                           |==============================                    |  61%   |                                                           |===============================                   |  61%   |                                                           |===============================                   |  62%   |                                                           |===============================                   |  63%   |                                                           |================================                  |  63%   |                                                           |================================                  |  64%   |                                                           |================================                  |  65%   |                                                           |=================================                 |  65%   |                                                           |=================================                 |  66%   |                                                           |=================================                 |  67%   |                                                           |==================================                |  67%   |                                                           |==================================                |  68%   |                                                           |==================================                |  69%   |                                                           |===================================               |  69%   |                                                           |===================================               |  70%   |                                                           |===================================               |  71%   |                                                           |====================================              |  71%   |                                                           |====================================              |  72%   |                                                           |====================================              |  73%   |                                                           |=====================================             |  73%   |                                                           |=====================================             |  74%   |                                                           |=====================================             |  75%   |                                                           |======================================            |  75%   |                                                           |======================================            |  76%   |                                                           |======================================            |  77%   |                                                           |=======================================           |  77%   |                                                           |=======================================           |  78%   |                                                           |=======================================           |  79%   |                                                           |========================================          |  79%   |                                                           |========================================          |  80%   |                                                           |========================================          |  81%   |                                                           |=========================================         |  81%   |                                                           |=========================================         |  82%   |                                                           |=========================================         |  83%   |                                                           |==========================================        |  83%   |                                                           |==========================================        |  84%   |                                                           |==========================================        |  85%   |                                                           |===========================================       |  85%   |                                                           |===========================================       |  86%   |                                                           |===========================================       |  87%   |                                                           |============================================      |  87%   |                                                           |============================================      |  88%   |                                                           |============================================      |  89%   |                                                           |=============================================     |  89%   |                                                           |=============================================     |  90%   |                                                           |=============================================     |  91%   |                                                           |==============================================    |  91%   |                                                           |==============================================    |  92%   |                                                           |==============================================    |  93%   |                                                           |===============================================   |  93%   |                                                           |===============================================   |  94%   |                                                           |===============================================   |  95%   |                                                           |================================================  |  95%   |                                                           |================================================  |  96%   |                                                           |================================================  |  97%   |                                                           |================================================= |  97%   |                                                           |================================================= |  98%   |                                                           |================================================= |  99%   |                                                           |==================================================|  99%   |                                                           |==================================================| 100% #> [1] Done   # TFN FCM fcmconfr lower_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.25, 0) ) mode_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.5, 0) ) upper_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.75, 0) ) adj_matrix_w_tfns_1 <- make_adj_matrix_w_tfns(   lower_adj_matrix_1, mode_adj_matrix_1, upper_adj_matrix_1 )  lower_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.15, 0) ) mode_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.65, 0) ) upper_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.85, 0) ) adj_matrix_w_tfns_2 <- make_adj_matrix_w_tfns(   lower_adj_matrix_2, mode_adj_matrix_2, upper_adj_matrix_2 )  ex_tfn_fcms <- list(adj_matrix_w_tfns_1, adj_matrix_w_tfns_2) ex_tfn_fcmconfr <- fcmconfr(   adj_matrices = ex_tfn_fcms,   # Aggregation and Monte Carlo Sampling   aggregation_function = 'mean',   monte_carlo_sampling_draws = 100,   # Simulation   initial_state_vector = c(1, 1),   clamping_vector = c(0, 1),   activation = 'kosko',   squashing = 'sigmoid',   lambda = 1,   point_of_inference = \"final\",   max_iter = 100,   min_error = 1e-05,   # Inference Estimation (bootstrap)   inference_estimation_function = \"mean\",   inference_estimation_CI = 0.95,   inference_estimation_bootstrap_reps = 1000,   # Runtime Options   show_progress = TRUE,   parallel = FALSE,   # Additional Options   perform_aggregate_analysis = TRUE,   perform_monte_carlo_analysis = TRUE,   perform_monte_carlo_inference_bootstrap_analysis = TRUE,   include_zero_weighted_edges_in_aggregation_and_mc_sampling = FALSE,   include_monte_carlo_FCM_simulations_in_output = TRUE ) #> [1] Simulating Input FCMs #>  #> [1] Running Simulations #> [1] Sampling from column vectors #> Sampling from column vectors[1] Constructing monte carlo fcms from samples #> Constructing monte carlo fcms from samples #> [1] Running Simulations #> [1] Done"},{"path":"/reference/fcmconfr_default_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Default plot.fcmconfr Theme — fcmconfr_default_theme","title":"Default plot.fcmconfr Theme — fcmconfr_default_theme","text":"formal call custom_theme defined fcmconfr_theme_custom","code":""},{"path":"/reference/fcmconfr_default_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default plot.fcmconfr Theme — fcmconfr_default_theme","text":"","code":"fcmconfr_default_theme()"},{"path":"/reference/fcmconfr_default_theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default plot.fcmconfr Theme — fcmconfr_default_theme","text":"default ggplot2 theme fcmconfr plot objects","code":""},{"path":"/reference/fcmconfr_default_theme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default plot.fcmconfr Theme — fcmconfr_default_theme","text":"","code":"NULL #> NULL"},{"path":"/reference/fcmconfr_gui.html","id":null,"dir":"Reference","previous_headings":"","what":"fcmconfr_gui — fcmconfr_gui","title":"fcmconfr_gui — fcmconfr_gui","text":"function opens shiny application window designed help users determine inputs fcmconfr function.","code":""},{"path":"/reference/fcmconfr_gui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fcmconfr_gui — fcmconfr_gui","text":"","code":"fcmconfr_gui()"},{"path":"/reference/fcmconfr_gui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fcmconfr_gui — fcmconfr_gui","text":"exit, function outputs copy--paste-able sample script call fcmconfr selected inputs.","code":""},{"path":"/reference/fcmconfr_gui.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fcmconfr_gui — fcmconfr_gui","text":"","code":"NULL #> NULL"},{"path":"/reference/fcmconfr_theme_custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom plot.fcmconfr Theme — fcmconfr_theme_custom","title":"Custom plot.fcmconfr Theme — fcmconfr_theme_custom","text":"Theme-ing plot.fcmconfr improve readability plot.fcmconfr function definition","code":""},{"path":"/reference/fcmconfr_theme_custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom plot.fcmconfr Theme — fcmconfr_theme_custom","text":"","code":"fcmconfr_theme_custom(...)"},{"path":"/reference/fcmconfr_theme_custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom plot.fcmconfr Theme — fcmconfr_theme_custom","text":"... Additional Inputs","code":""},{"path":"/reference/fcmconfr_theme_custom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custom plot.fcmconfr Theme — fcmconfr_theme_custom","text":"custom ggplot2 theme fcmconfr plot objects","code":""},{"path":"/reference/fcmconfr_theme_custom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Custom plot.fcmconfr Theme — fcmconfr_theme_custom","text":"","code":"NULL #> NULL"},{"path":"/reference/get_adj_matrices_input_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the data types of adjacency matrices in a list — get_adj_matrices_input_type","title":"Get the data types of adjacency matrices in a list — get_adj_matrices_input_type","text":"function performs two actions: 1. function identifies whether input list adjacency matrices     individual adj matrix (input_type) 2. function identifies 'class' input adj. matrices     following options: 'conventional' 'ivfn' 'tfn' 'unavailable' - 'conventional' means adj. matrices contain numeric objects - 'ivfn' means adj. matrices contain 'ivfn' objects (interval-        valued fuzzy number) NOTE: also returns matrix class type (.e.        data.frame, tibble, etc.) - 'tfn' means adj. matrices contain 'tfn' objects (triangular        fuzzy number) - 'unavailable' means adj. matrices contain non-numeric data        types 'ivfn' 'tfn'","code":""},{"path":"/reference/get_adj_matrices_input_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the data types of adjacency matrices in a list — get_adj_matrices_input_type","text":"","code":"get_adj_matrices_input_type(adj_matrix_list_input)"},{"path":"/reference/get_adj_matrices_input_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the data types of adjacency matrices in a list — get_adj_matrices_input_type","text":"adj_matrix_list_input list adj matrices individual adj matrix","code":""},{"path":"/reference/get_adj_matrices_input_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the data types of adjacency matrices in a list — get_adj_matrices_input_type","text":"named list two variables:  adj_matrices_input_is_list: TRUE/FALSE Whether input list adj. matrices  object_types_in_list: 'class' input adj. matrices","code":""},{"path":[]},{"path":"/reference/get_adj_matrices_input_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the data types of adjacency matrices in a list — get_adj_matrices_input_type","text":"","code":"# Individual Conventional Adj. Matrix ---- adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(1, 0) ) get_adj_matrices_input_type(adj_matrix_1) #> $fcm_class #> [1] \"conventional\" #>  #> $adj_matrices_input_is_list #> [1] FALSE #>  #> $object_types_in_list #> [1] \"conventional\" \"data.frame\"   #>    # List of Multiple Conventional FCM Adj. Matrices ---- adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(1, 0) ) adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.25, 0) ) adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.75, 0) ) adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.5, 0) ) fcms <- list(adj_matrix_1, adj_matrix_2, adj_matrix_3, adj_matrix_4) get_adj_matrices_input_type(fcms) #> $fcm_class #> [1] \"conventional\" #>  #> $adj_matrices_input_is_list #> [1] TRUE #>  #> $object_types_in_list #> [1] \"conventional\" \"data.frame\"   #>   # List of Multiple IVFN FCM Adj. Matrices ---- lower_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) upper_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) adj_matrix_1 <- make_adj_matrix_w_ivfns(lower_adj_matrix_1, upper_adj_matrix_1) lower_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) upper_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(1, 0) ) adj_matrix_2 <- make_adj_matrix_w_ivfns(lower_adj_matrix_2, upper_adj_matrix_2) lower_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.2, 0) ) upper_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) adj_matrix_3 <- make_adj_matrix_w_ivfns(lower_adj_matrix_3, upper_adj_matrix_3) lower_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.0, 0) ) upper_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) adj_matrix_4 <- make_adj_matrix_w_ivfns(lower_adj_matrix_4, upper_adj_matrix_4) fcms_w_ivfns <- list(adj_matrix_1, adj_matrix_2, adj_matrix_3, adj_matrix_4) get_adj_matrices_input_type(fcms_w_ivfns) #> $fcm_class #> [1] \"ivfn\" #>  #> $adj_matrices_input_is_list #> [1] TRUE #>  #> $object_types_in_list #> [1] \"ivfn\" #>    # List of Multiple TFN FCM Adj. Matrices ---- lower_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) mode_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) upper_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) adj_matrix_1 <- make_adj_matrix_w_tfns(   lower_adj_matrix_1, mode_adj_matrix_1, upper_adj_matrix_1 ) lower_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) mode_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.7, 0) ) upper_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(1, 0) ) adj_matrix_2 <- make_adj_matrix_w_tfns(   lower_adj_matrix_2, mode_adj_matrix_2, upper_adj_matrix_2 ) lower_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.2, 0) ) mode_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) upper_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) adj_matrix_3 <- make_adj_matrix_w_tfns(   lower_adj_matrix_3, mode_adj_matrix_3, upper_adj_matrix_3 ) lower_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.0, 0) ) mode_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0, 0) ) upper_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) adj_matrix_4 <- make_adj_matrix_w_tfns(   lower_adj_matrix_4, mode_adj_matrix_4, upper_adj_matrix_4 ) fcms_w_tfns <- list(adj_matrix_1, adj_matrix_2, adj_matrix_3, adj_matrix_4) get_adj_matrices_input_type(fcms_w_tfns) #> $fcm_class #> [1] \"tfn\" #>  #> $adj_matrices_input_is_list #> [1] TRUE #>  #> $object_types_in_list #> [1] \"tfn\" #>"},{"path":"/reference/get_adj_matrix_from_edgelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Adjacency Matrix from an Edgelist — get_adj_matrix_from_edgelist","title":"Create an Adjacency Matrix from an Edgelist — get_adj_matrix_from_edgelist","text":"Creates adjacency matrix edgelist","code":""},{"path":"/reference/get_adj_matrix_from_edgelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Adjacency Matrix from an Edgelist — get_adj_matrix_from_edgelist","text":"","code":"get_adj_matrix_from_edgelist(   edgelist = matrix(),   source_colname = \"source\",   target_colname = \"target\",   value_colname = \"weight\",   node_order = c() )"},{"path":"/reference/get_adj_matrix_from_edgelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Adjacency Matrix from an Edgelist — get_adj_matrix_from_edgelist","text":"edgelist edgelist representing fcm. Default column names \"source\", \"target\", \"weight\", may defined explicitly. source_colname Column name input eddgelist represents edge source nodes target_colname Column name input edgelist represents edge target nodes value_colname Column name input edgelist represents represents values displayed adjacency matrix (.e. weight, standard_deviation) node_order order concepts arranged output adjacency matrix. input given, concepts arranged alphabetically.","code":""},{"path":"/reference/get_adj_matrix_from_edgelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an Adjacency Matrix from an Edgelist — get_adj_matrix_from_edgelist","text":"adjacency matrix (data.frame)","code":""},{"path":"/reference/get_adj_matrix_from_edgelist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an Adjacency Matrix from an Edgelist — get_adj_matrix_from_edgelist","text":"input edgelist must following column names: 'source' '', 'target' ''. user must manually note different names used edgelist. additional column may selected describe value attributed given edge (default value column name 'weight'). input edgelist can either matrix, data.frame, tibble, data.table type object.","code":""},{"path":"/reference/get_adj_matrix_from_edgelist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Adjacency Matrix from an Edgelist — get_adj_matrix_from_edgelist","text":"","code":"edgelist <- data.frame(   \"source\" = c(\"C\", \"A\", \"D\", \"A\", \"C\"),   \"target\" = c(\"A\", \"B\", \"B\", \"D\", \"D\"),   \"weight\" = c(0.3, 0.5, 0.6, 1.0, 1.0) ) get_adj_matrix_from_edgelist(edgelist) #>   C   A D   B #> C 0 0.3 1 0.0 #> A 0 0.0 1 0.5 #> D 0 0.0 0 0.6 #> B 0 0.0 0 0.0"},{"path":"/reference/get_concepts_to_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Concepts in fcmconfr Object to Include in Plot — get_concepts_to_plot","title":"Get Concepts in fcmconfr Object to Include in Plot — get_concepts_to_plot","text":"determines concepts included fcmconfr output plot selecting concepts either clamped (applicable) reach certain activation level throughout simulation (.e. whose 0-value take space figure.)","code":""},{"path":"/reference/get_concepts_to_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Concepts in fcmconfr Object to Include in Plot — get_concepts_to_plot","text":"","code":"get_concepts_to_plot(fcmconfr_object, filter_limit = 1e-09)"},{"path":"/reference/get_concepts_to_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Concepts in fcmconfr Object to Include in Plot — get_concepts_to_plot","text":"fcmconfr_object direct output fcmconfr function filter_limit Remove concepts whose inferences exceed value","code":""},{"path":"/reference/get_concepts_to_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Concepts in fcmconfr Object to Include in Plot — get_concepts_to_plot","text":"array concepts included fcmconfr plot output simulation inferences greater filter_limit","code":""},{"path":"/reference/get_concepts_to_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Concepts in fcmconfr Object to Include in Plot — get_concepts_to_plot","text":"function removes:     - Clamped Nodes held 1 increase     x-axis, potentially diminishing ability view data     - Inactivated Nodes display plot     add unnecessary whitespace plot.","code":""},{"path":"/reference/get_concepts_to_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Concepts in fcmconfr Object to Include in Plot — get_concepts_to_plot","text":"","code":"NULL #> NULL"},{"path":"/reference/get_edgelist_from_adj_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an Adjacency Matrix to an Edgelist — get_edgelist_from_adj_matrix","title":"Convert an Adjacency Matrix to an Edgelist — get_edgelist_from_adj_matrix","text":"Converts adjacency matrix edgelist","code":""},{"path":"/reference/get_edgelist_from_adj_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an Adjacency Matrix to an Edgelist — get_edgelist_from_adj_matrix","text":"","code":"get_edgelist_from_adj_matrix(adj_matrix = matrix())"},{"path":"/reference/get_edgelist_from_adj_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an Adjacency Matrix to an Edgelist — get_edgelist_from_adj_matrix","text":"adj_matrix n x n adjacency matrix represents FCM","code":""},{"path":"/reference/get_edgelist_from_adj_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an Adjacency Matrix to an Edgelist — get_edgelist_from_adj_matrix","text":"edgelist following columns: source, target, weight","code":""},{"path":"/reference/get_edgelist_from_adj_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert an Adjacency Matrix to an Edgelist — get_edgelist_from_adj_matrix","text":"input adjacency matrix must square n x n matrix. can either matrix, data.frame, tibble, data.table type object. input matrix named columns, names used concepts edgelist. Otherwise, generic node IDs used (C1, C2, ... Cn)","code":""},{"path":[]},{"path":"/reference/get_edgelist_from_adj_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an Adjacency Matrix to an Edgelist — get_edgelist_from_adj_matrix","text":"","code":"adj_matrix <- data.frame(   \"A\" = c(0, 0, 0.3, 0),   \"B\" = c(0.5, 0, 0, 0.6),   \"C\" = c(0, 0, 0, 0),   \"D\" = c(1, 0, 1, 0) ) get_edgelist_from_adj_matrix(adj_matrix) #>   source target weight #> 1      C      A    0.3 #> 2      A      B    0.5 #> 3      D      B    0.6 #> 4      A      D    1.0 #> 5      C      D    1.0"},{"path":"/reference/get_inferences.html","id":null,"dir":"Reference","previous_headings":"","what":"Get inferences from an fcmconfr output — get_inferences","title":"Get inferences from an fcmconfr output — get_inferences","text":"Given fcmconfr output object, return inferences just specific analysis","code":""},{"path":"/reference/get_inferences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get inferences from an fcmconfr output — get_inferences","text":"","code":"get_inferences(fcmconfr_obj = list(), analysis = c(\"input\", \"aggregate\", \"mc\"))"},{"path":"/reference/get_inferences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get inferences from an fcmconfr output — get_inferences","text":"fcmconfr_obj fcmconfr output object analysis ","code":""},{"path":"/reference/get_inferences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get inferences from an fcmconfr output — get_inferences","text":"dataframe (list dataframes) inferences selected analysis (analyses)","code":""},{"path":[]},{"path":"/reference/get_inferences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get inferences from an fcmconfr output — get_inferences","text":"","code":"ex_conventional_fcmconfr <- fcmconfr(   adj_matrices = sample_fcms$simple_fcms$conventional_fcms,   # adj_matrices = group_conventional_fcms,   # Aggregation and Monte Carlo Sampling   aggregation_function = 'mean',   monte_carlo_sampling_draws = 100,   # Simulation   initial_state_vector = c(1, 1, 1, 1, 1, 1, 1),   clamping_vector = c(1, 0, 0, 0, 0, 0, 0),   activation = 'kosko',   squashing = 'tanh',   lambda = 0.5,   point_of_inference = \"final\",   max_iter = 10000,   min_error = 1e-05,   # Inference Estimation (bootstrap)   inference_estimation_function = \"mean\",   inference_estimation_CI = 0.95,   inference_estimation_bootstrap_reps = 1000,   # Runtime Options   show_progress = TRUE,   parallel = TRUE,   n_cores = 2,   # Additional Options   perform_aggregate_analysis = TRUE,   perform_monte_carlo_analysis = TRUE,   perform_monte_carlo_inference_bootstrap_analysis = TRUE,   include_zero_weighted_edges_in_aggregation_and_mc_sampling = TRUE,   include_monte_carlo_FCM_simulations_in_output = TRUE ) #> [1] Simulating Input FCMs #> [1] Initializing cluster #> [1] Running Simulations in Parallel #> [1] Sampling from column vectors #> Sampling from column vectors[1] Constructing monte carlo fcms from samples #> Constructing monte carlo fcms from samples[1] Initializing cluster #> [1] Running Simulations in Parallel #> [1] Performing bootstrap simulations #> [1] Initializing cluster #> [1] Sampling means #>    |                                                           |                                                  |   1%   |                                                           |=                                                 |   1%   |                                                           |=                                                 |   2%   |                                                           |=                                                 |   3%   |                                                           |==                                                |   3%   |                                                           |==                                                |   4%   |                                                           |==                                                |   5%   |                                                           |===                                               |   5%   |                                                           |===                                               |   6%   |                                                           |===                                               |   7%   |                                                           |====                                              |   7%   |                                                           |====                                              |   8%   |                                                           |====                                              |   9%   |                                                           |=====                                             |   9%   |                                                           |=====                                             |  10%   |                                                           |=====                                             |  11%   |                                                           |======                                            |  11%   |                                                           |======                                            |  12%   |                                                           |======                                            |  13%   |                                                           |=======                                           |  13%   |                                                           |=======                                           |  14%   |                                                           |=======                                           |  15%   |                                                           |========                                          |  15%   |                                                           |========                                          |  16%   |                                                           |========                                          |  17%   |                                                           |=========                                         |  17%   |                                                           |=========                                         |  18%   |                                                           |=========                                         |  19%   |                                                           |==========                                        |  19%   |                                                           |==========                                        |  20%   |                                                           |==========                                        |  21%   |                                                           |===========                                       |  21%   |                                                           |===========                                       |  22%   |                                                           |===========                                       |  23%   |                                                           |============                                      |  23%   |                                                           |============                                      |  24%   |                                                           |============                                      |  25%   |                                                           |=============                                     |  25%   |                                                           |=============                                     |  26%   |                                                           |=============                                     |  27%   |                                                           |==============                                    |  27%   |                                                           |==============                                    |  28%   |                                                           |==============                                    |  29%   |                                                           |===============                                   |  29%   |                                                           |===============                                   |  30%   |                                                           |===============                                   |  31%   |                                                           |================                                  |  31%   |                                                           |================                                  |  32%   |                                                           |================                                  |  33%   |                                                           |=================                                 |  33%   |                                                           |=================                                 |  34%   |                                                           |=================                                 |  35%   |                                                           |==================                                |  35%   |                                                           |==================                                |  36%   |                                                           |==================                                |  37%   |                                                           |===================                               |  37%   |                                                           |===================                               |  38%   |                                                           |===================                               |  39%   |                                                           |====================                              |  39%   |                                                           |====================                              |  40%   |                                                           |====================                              |  41%   |                                                           |=====================                             |  41%   |                                                           |=====================                             |  42%   |                                                           |=====================                             |  43%   |                                                           |======================                            |  43%   |                                                           |======================                            |  44%   |                                                           |======================                            |  45%   |                                                           |=======================                           |  45%   |                                                           |=======================                           |  46%   |                                                           |=======================                           |  47%   |                                                           |========================                          |  47%   |                                                           |========================                          |  48%   |                                                           |========================                          |  49%   |                                                           |=========================                         |  49%   |                                                           |=========================                         |  50%   |                                                           |=========================                         |  51%   |                                                           |==========================                        |  51%   |                                                           |==========================                        |  52%   |                                                           |==========================                        |  53%   |                                                           |===========================                       |  53%   |                                                           |===========================                       |  54%   |                                                           |===========================                       |  55%   |                                                           |============================                      |  55%   |                                                           |============================                      |  56%   |                                                           |============================                      |  57%   |                                                           |=============================                     |  57%   |                                                           |=============================                     |  58%   |                                                           |=============================                     |  59%   |                                                           |==============================                    |  59%   |                                                           |==============================                    |  60%   |                                                           |==============================                    |  61%   |                                                           |===============================                   |  61%   |                                                           |===============================                   |  62%   |                                                           |===============================                   |  63%   |                                                           |================================                  |  63%   |                                                           |================================                  |  64%   |                                                           |================================                  |  65%   |                                                           |=================================                 |  65%   |                                                           |=================================                 |  66%   |                                                           |=================================                 |  67%   |                                                           |==================================                |  67%   |                                                           |==================================                |  68%   |                                                           |==================================                |  69%   |                                                           |===================================               |  69%   |                                                           |===================================               |  70%   |                                                           |===================================               |  71%   |                                                           |====================================              |  71%   |                                                           |====================================              |  72%   |                                                           |====================================              |  73%   |                                                           |=====================================             |  73%   |                                                           |=====================================             |  74%   |                                                           |=====================================             |  75%   |                                                           |======================================            |  75%   |                                                           |======================================            |  76%   |                                                           |======================================            |  77%   |                                                           |=======================================           |  77%   |                                                           |=======================================           |  78%   |                                                           |=======================================           |  79%   |                                                           |========================================          |  79%   |                                                           |========================================          |  80%   |                                                           |========================================          |  81%   |                                                           |=========================================         |  81%   |                                                           |=========================================         |  82%   |                                                           |=========================================         |  83%   |                                                           |==========================================        |  83%   |                                                           |==========================================        |  84%   |                                                           |==========================================        |  85%   |                                                           |===========================================       |  85%   |                                                           |===========================================       |  86%   |                                                           |===========================================       |  87%   |                                                           |============================================      |  87%   |                                                           |============================================      |  88%   |                                                           |============================================      |  89%   |                                                           |=============================================     |  89%   |                                                           |=============================================     |  90%   |                                                           |=============================================     |  91%   |                                                           |==============================================    |  91%   |                                                           |==============================================    |  92%   |                                                           |==============================================    |  93%   |                                                           |===============================================   |  93%   |                                                           |===============================================   |  94%   |                                                           |===============================================   |  95%   |                                                           |================================================  |  95%   |                                                           |================================================  |  96%   |                                                           |================================================  |  97%   |                                                           |================================================= |  97%   |                                                           |================================================= |  98%   |                                                           |================================================= |  99%   |                                                           |==================================================|  99%   |                                                           |==================================================| 100% #> [1] Done get_inferences(ex_conventional_fcmconfr, analysis = c(\"input\")) #> $input_inferences #>            input Guidance.Docs.for.Salt.Management Public.Education.Programs #> 1   adj_matrix_1                                 1                 0.0000000 #> 2   adj_matrix_2                                 1                 0.0000000 #> 3   adj_matrix_3                                 1                 0.0000000 #> 4   adj_matrix_4                                 1                 0.0000000 #> 5   adj_matrix_5                                 1                 0.0000000 #> 6   adj_matrix_6                                 1                 0.0000000 #> 7   adj_matrix_7                                 1                 0.0000000 #> 8   adj_matrix_8                                 1                 0.0000000 #> 9   adj_matrix_9                                 1                 0.0000000 #> 10 adj_matrix_10                                 1                 0.0000000 #> 11 adj_matrix_11                                 1                 0.0000000 #> 12 adj_matrix_12                                 1                 0.0000000 #> 13 adj_matrix_13                                 1                 0.0000000 #> 14 adj_matrix_14                                 1                 0.0000000 #> 15 adj_matrix_15                                 1                 0.0000000 #> 16 adj_matrix_16                                 1                 0.2449187 #> 17 adj_matrix_17                                 1                 0.0000000 #> 18 adj_matrix_18                                 1                 0.0000000 #> 19 adj_matrix_19                                 1                 0.0000000 #> 20 adj_matrix_20                                 1                 0.0000000 #> 21 adj_matrix_21                                 1                 0.0000000 #> 22 adj_matrix_22                                 1                 0.0000000 #> 23 adj_matrix_23                                 1                 0.0000000 #> 24 adj_matrix_24                                 1                 0.0000000 #> 25 adj_matrix_25                                 1                 0.0000000 #> 26 adj_matrix_26                                 1                 0.0000000 #> 27 adj_matrix_27                                 1                 0.0000000 #> 28 adj_matrix_28                                 1                 0.0000000 #> 29 adj_matrix_29                                 1                 0.0000000 #> 30 adj_matrix_30                                 1                 0.0000000 #>    Salts.Added.during.Water.Treatment #> 1                                   0 #> 2                                   0 #> 3                                   0 #> 4                                   0 #> 5                                   0 #> 6                                   0 #> 7                                   0 #> 8                                   0 #> 9                                   0 #> 10                                  0 #> 11                                  0 #> 12                                  0 #> 13                                  0 #> 14                                  0 #> 15                                  0 #> 16                                  0 #> 17                                  0 #> 18                                  0 #> 19                                  0 #> 20                                  0 #> 21                                  0 #> 22                                  0 #> 23                                  0 #> 24                                  0 #> 25                                  0 #> 26                                  0 #> 27                                  0 #> 28                                  0 #> 29                                  0 #> 30                                  0 #>    Salts.Added.by.Winter.Maintenance.Activities Ecosystem.Health #> 1                                   -0.12435300      0.063651343 #> 2                                   -0.33637554      0.053446662 #> 3                                   -0.14888503      0.110783596 #> 4                                   -0.19737532      0.020331562 #> 5                                   -0.35835740      0.050050971 #> 6                                    0.00000000      0.000000000 #> 7                                    0.00000000      0.000000000 #> 8                                    0.00000000      0.000000000 #> 9                                    0.00000000      0.034869655 #> 10                                  -0.29131261      0.045691567 #> 11                                  -0.37994896      0.001899514 #> 12                                  -0.31852078      0.067018546 #> 13                                  -0.09966799      0.003549288 #> 14                                  -0.29131261      0.369706774 #> 15                                  -0.33637554      0.025137581 #> 16                                   0.00000000      0.039454572 #> 17                                  -0.04995837      0.001873218 #> 18                                   0.00000000      0.000000000 #> 19                                  -0.14888503      0.022305878 #> 20                                   0.00000000      0.000000000 #> 21                                  -0.09966799      0.003114454 #> 22                                  -0.37994896      0.031172451 #> 23                                   0.00000000      0.109769302 #> 24                                  -0.19737532      0.039842629 #> 25                                   0.00000000      0.000000000 #> 26                                   0.00000000      0.000000000 #> 27                                   0.00000000      0.000000000 #> 28                                  -0.35835740      0.159229804 #> 29                                   0.00000000      0.000000000 #> 30                                   0.00000000      0.000000000 #>    Public.Awareness.of.Reservoir.Salinization Salinization.of.the.Reservoir #> 1                                 0.000000000                   -0.16996670 #> 2                                 0.000000000                   -0.13374410 #> 3                                 0.000000000                   -0.29664048 #> 4                                 0.000000000                   -0.05422497 #> 5                                 0.000000000                   -0.13358088 #> 6                                 0.000000000                    0.00000000 #> 7                                 0.000000000                    0.00000000 #> 8                                 0.000000000                    0.00000000 #> 9                                 0.000000000                   -0.09966799 #> 10                                0.000000000                   -0.10160756 #> 11                                0.000000000                   -0.01899516 #> 12                                0.000000000                   -0.15792742 #> 13                                0.000000000                   -0.01014392 #> 14                                0.000000000                   -0.10880973 #> 15                                0.000000000                   -0.10057151 #> 16                                0.000000000                   -0.19737532 #> 17                                0.000000000                   -0.01873220 #> 18                                0.000000000                    0.00000000 #> 19                                0.000000000                   -0.05577395 #> 20                                0.000000000                    0.00000000 #> 21                               -0.001245785                   -0.01245785 #> 22                                0.000000000                   -0.12473022 #> 23                                0.000000000                   -0.24491866 #> 24                                0.000000000                   -0.08858607 #> 25                                0.000000000                    0.00000000 #> 26                                0.000000000                    0.00000000 #> 27                                0.000000000                    0.00000000 #> 28                                0.000000000                   -0.40149091 #> 29                                0.000000000                    0.00000000 #> 30                                0.000000000                    0.00000000 #>  get_inferences(ex_conventional_fcmconfr, analysis = c(\"input\", \"aggregate\")) #> $input_inferences #>            input Guidance.Docs.for.Salt.Management Public.Education.Programs #> 1   adj_matrix_1                                 1                 0.0000000 #> 2   adj_matrix_2                                 1                 0.0000000 #> 3   adj_matrix_3                                 1                 0.0000000 #> 4   adj_matrix_4                                 1                 0.0000000 #> 5   adj_matrix_5                                 1                 0.0000000 #> 6   adj_matrix_6                                 1                 0.0000000 #> 7   adj_matrix_7                                 1                 0.0000000 #> 8   adj_matrix_8                                 1                 0.0000000 #> 9   adj_matrix_9                                 1                 0.0000000 #> 10 adj_matrix_10                                 1                 0.0000000 #> 11 adj_matrix_11                                 1                 0.0000000 #> 12 adj_matrix_12                                 1                 0.0000000 #> 13 adj_matrix_13                                 1                 0.0000000 #> 14 adj_matrix_14                                 1                 0.0000000 #> 15 adj_matrix_15                                 1                 0.0000000 #> 16 adj_matrix_16                                 1                 0.2449187 #> 17 adj_matrix_17                                 1                 0.0000000 #> 18 adj_matrix_18                                 1                 0.0000000 #> 19 adj_matrix_19                                 1                 0.0000000 #> 20 adj_matrix_20                                 1                 0.0000000 #> 21 adj_matrix_21                                 1                 0.0000000 #> 22 adj_matrix_22                                 1                 0.0000000 #> 23 adj_matrix_23                                 1                 0.0000000 #> 24 adj_matrix_24                                 1                 0.0000000 #> 25 adj_matrix_25                                 1                 0.0000000 #> 26 adj_matrix_26                                 1                 0.0000000 #> 27 adj_matrix_27                                 1                 0.0000000 #> 28 adj_matrix_28                                 1                 0.0000000 #> 29 adj_matrix_29                                 1                 0.0000000 #> 30 adj_matrix_30                                 1                 0.0000000 #>    Salts.Added.during.Water.Treatment #> 1                                   0 #> 2                                   0 #> 3                                   0 #> 4                                   0 #> 5                                   0 #> 6                                   0 #> 7                                   0 #> 8                                   0 #> 9                                   0 #> 10                                  0 #> 11                                  0 #> 12                                  0 #> 13                                  0 #> 14                                  0 #> 15                                  0 #> 16                                  0 #> 17                                  0 #> 18                                  0 #> 19                                  0 #> 20                                  0 #> 21                                  0 #> 22                                  0 #> 23                                  0 #> 24                                  0 #> 25                                  0 #> 26                                  0 #> 27                                  0 #> 28                                  0 #> 29                                  0 #> 30                                  0 #>    Salts.Added.by.Winter.Maintenance.Activities Ecosystem.Health #> 1                                   -0.12435300      0.063651343 #> 2                                   -0.33637554      0.053446662 #> 3                                   -0.14888503      0.110783596 #> 4                                   -0.19737532      0.020331562 #> 5                                   -0.35835740      0.050050971 #> 6                                    0.00000000      0.000000000 #> 7                                    0.00000000      0.000000000 #> 8                                    0.00000000      0.000000000 #> 9                                    0.00000000      0.034869655 #> 10                                  -0.29131261      0.045691567 #> 11                                  -0.37994896      0.001899514 #> 12                                  -0.31852078      0.067018546 #> 13                                  -0.09966799      0.003549288 #> 14                                  -0.29131261      0.369706774 #> 15                                  -0.33637554      0.025137581 #> 16                                   0.00000000      0.039454572 #> 17                                  -0.04995837      0.001873218 #> 18                                   0.00000000      0.000000000 #> 19                                  -0.14888503      0.022305878 #> 20                                   0.00000000      0.000000000 #> 21                                  -0.09966799      0.003114454 #> 22                                  -0.37994896      0.031172451 #> 23                                   0.00000000      0.109769302 #> 24                                  -0.19737532      0.039842629 #> 25                                   0.00000000      0.000000000 #> 26                                   0.00000000      0.000000000 #> 27                                   0.00000000      0.000000000 #> 28                                  -0.35835740      0.159229804 #> 29                                   0.00000000      0.000000000 #> 30                                   0.00000000      0.000000000 #>    Public.Awareness.of.Reservoir.Salinization Salinization.of.the.Reservoir #> 1                                 0.000000000                   -0.16996670 #> 2                                 0.000000000                   -0.13374410 #> 3                                 0.000000000                   -0.29664048 #> 4                                 0.000000000                   -0.05422497 #> 5                                 0.000000000                   -0.13358088 #> 6                                 0.000000000                    0.00000000 #> 7                                 0.000000000                    0.00000000 #> 8                                 0.000000000                    0.00000000 #> 9                                 0.000000000                   -0.09966799 #> 10                                0.000000000                   -0.10160756 #> 11                                0.000000000                   -0.01899516 #> 12                                0.000000000                   -0.15792742 #> 13                                0.000000000                   -0.01014392 #> 14                                0.000000000                   -0.10880973 #> 15                                0.000000000                   -0.10057151 #> 16                                0.000000000                   -0.19737532 #> 17                                0.000000000                   -0.01873220 #> 18                                0.000000000                    0.00000000 #> 19                                0.000000000                   -0.05577395 #> 20                                0.000000000                    0.00000000 #> 21                               -0.001245785                   -0.01245785 #> 22                                0.000000000                   -0.12473022 #> 23                                0.000000000                   -0.24491866 #> 24                                0.000000000                   -0.08858607 #> 25                                0.000000000                    0.00000000 #> 26                                0.000000000                    0.00000000 #> 27                                0.000000000                    0.00000000 #> 28                                0.000000000                   -0.40149091 #> 29                                0.000000000                    0.00000000 #> 30                                0.000000000                    0.00000000 #>  #> $aggregate_inferences #>           input Guidance.Docs.for.Salt.Management Public.Education.Programs #> final aggregate                                 1                0.00833314 #>       Salts.Added.during.Water.Treatment #> final                      -6.944284e-05 #>       Salts.Added.by.Winter.Maintenance.Activities Ecosystem.Health #> final                                   -0.1414207       0.03767607 #>       Public.Awareness.of.Reservoir.Salinization Salinization.of.the.Reservoir #> final                              -0.0002939271                   -0.08817825 #>  get_inferences(ex_conventional_fcmconfr, analysis = c(\"input\", \"aggregate\", \"mc\")) #> $input_inferences #>            input Guidance.Docs.for.Salt.Management Public.Education.Programs #> 1   adj_matrix_1                                 1                 0.0000000 #> 2   adj_matrix_2                                 1                 0.0000000 #> 3   adj_matrix_3                                 1                 0.0000000 #> 4   adj_matrix_4                                 1                 0.0000000 #> 5   adj_matrix_5                                 1                 0.0000000 #> 6   adj_matrix_6                                 1                 0.0000000 #> 7   adj_matrix_7                                 1                 0.0000000 #> 8   adj_matrix_8                                 1                 0.0000000 #> 9   adj_matrix_9                                 1                 0.0000000 #> 10 adj_matrix_10                                 1                 0.0000000 #> 11 adj_matrix_11                                 1                 0.0000000 #> 12 adj_matrix_12                                 1                 0.0000000 #> 13 adj_matrix_13                                 1                 0.0000000 #> 14 adj_matrix_14                                 1                 0.0000000 #> 15 adj_matrix_15                                 1                 0.0000000 #> 16 adj_matrix_16                                 1                 0.2449187 #> 17 adj_matrix_17                                 1                 0.0000000 #> 18 adj_matrix_18                                 1                 0.0000000 #> 19 adj_matrix_19                                 1                 0.0000000 #> 20 adj_matrix_20                                 1                 0.0000000 #> 21 adj_matrix_21                                 1                 0.0000000 #> 22 adj_matrix_22                                 1                 0.0000000 #> 23 adj_matrix_23                                 1                 0.0000000 #> 24 adj_matrix_24                                 1                 0.0000000 #> 25 adj_matrix_25                                 1                 0.0000000 #> 26 adj_matrix_26                                 1                 0.0000000 #> 27 adj_matrix_27                                 1                 0.0000000 #> 28 adj_matrix_28                                 1                 0.0000000 #> 29 adj_matrix_29                                 1                 0.0000000 #> 30 adj_matrix_30                                 1                 0.0000000 #>    Salts.Added.during.Water.Treatment #> 1                                   0 #> 2                                   0 #> 3                                   0 #> 4                                   0 #> 5                                   0 #> 6                                   0 #> 7                                   0 #> 8                                   0 #> 9                                   0 #> 10                                  0 #> 11                                  0 #> 12                                  0 #> 13                                  0 #> 14                                  0 #> 15                                  0 #> 16                                  0 #> 17                                  0 #> 18                                  0 #> 19                                  0 #> 20                                  0 #> 21                                  0 #> 22                                  0 #> 23                                  0 #> 24                                  0 #> 25                                  0 #> 26                                  0 #> 27                                  0 #> 28                                  0 #> 29                                  0 #> 30                                  0 #>    Salts.Added.by.Winter.Maintenance.Activities Ecosystem.Health #> 1                                   -0.12435300      0.063651343 #> 2                                   -0.33637554      0.053446662 #> 3                                   -0.14888503      0.110783596 #> 4                                   -0.19737532      0.020331562 #> 5                                   -0.35835740      0.050050971 #> 6                                    0.00000000      0.000000000 #> 7                                    0.00000000      0.000000000 #> 8                                    0.00000000      0.000000000 #> 9                                    0.00000000      0.034869655 #> 10                                  -0.29131261      0.045691567 #> 11                                  -0.37994896      0.001899514 #> 12                                  -0.31852078      0.067018546 #> 13                                  -0.09966799      0.003549288 #> 14                                  -0.29131261      0.369706774 #> 15                                  -0.33637554      0.025137581 #> 16                                   0.00000000      0.039454572 #> 17                                  -0.04995837      0.001873218 #> 18                                   0.00000000      0.000000000 #> 19                                  -0.14888503      0.022305878 #> 20                                   0.00000000      0.000000000 #> 21                                  -0.09966799      0.003114454 #> 22                                  -0.37994896      0.031172451 #> 23                                   0.00000000      0.109769302 #> 24                                  -0.19737532      0.039842629 #> 25                                   0.00000000      0.000000000 #> 26                                   0.00000000      0.000000000 #> 27                                   0.00000000      0.000000000 #> 28                                  -0.35835740      0.159229804 #> 29                                   0.00000000      0.000000000 #> 30                                   0.00000000      0.000000000 #>    Public.Awareness.of.Reservoir.Salinization Salinization.of.the.Reservoir #> 1                                 0.000000000                   -0.16996670 #> 2                                 0.000000000                   -0.13374410 #> 3                                 0.000000000                   -0.29664048 #> 4                                 0.000000000                   -0.05422497 #> 5                                 0.000000000                   -0.13358088 #> 6                                 0.000000000                    0.00000000 #> 7                                 0.000000000                    0.00000000 #> 8                                 0.000000000                    0.00000000 #> 9                                 0.000000000                   -0.09966799 #> 10                                0.000000000                   -0.10160756 #> 11                                0.000000000                   -0.01899516 #> 12                                0.000000000                   -0.15792742 #> 13                                0.000000000                   -0.01014392 #> 14                                0.000000000                   -0.10880973 #> 15                                0.000000000                   -0.10057151 #> 16                                0.000000000                   -0.19737532 #> 17                                0.000000000                   -0.01873220 #> 18                                0.000000000                    0.00000000 #> 19                                0.000000000                   -0.05577395 #> 20                                0.000000000                    0.00000000 #> 21                               -0.001245785                   -0.01245785 #> 22                                0.000000000                   -0.12473022 #> 23                                0.000000000                   -0.24491866 #> 24                                0.000000000                   -0.08858607 #> 25                                0.000000000                    0.00000000 #> 26                                0.000000000                    0.00000000 #> 27                                0.000000000                    0.00000000 #> 28                                0.000000000                   -0.40149091 #> 29                                0.000000000                    0.00000000 #> 30                                0.000000000                    0.00000000 #>  #> $aggregate_inferences #>           input Guidance.Docs.for.Salt.Management Public.Education.Programs #> final aggregate                                 1                0.00833314 #>       Salts.Added.during.Water.Treatment #> final                      -6.944284e-05 #>       Salts.Added.by.Winter.Maintenance.Activities Ecosystem.Health #> final                                   -0.1414207       0.03767607 #>       Public.Awareness.of.Reservoir.Salinization Salinization.of.the.Reservoir #> final                              -0.0002939271                   -0.08817825 #>  #> $mc_inferences #>       input Guidance.Docs.for.Salt.Management Public.Education.Programs #> 1     mc_ 1                                 1                 0.0000000 #> 2     mc_ 2                                 1                 0.0000000 #> 3     mc_ 3                                 1                 0.0000000 #> 4     mc_ 4                                 1                 0.0000000 #> 5     mc_ 5                                 1                 0.0000000 #> 6     mc_ 6                                 1                 0.0000000 #> 7     mc_ 7                                 1                 0.0000000 #> 8     mc_ 8                                 1                 0.0000000 #> 9     mc_ 9                                 1                 0.0000000 #> 10   mc_ 10                                 1                 0.0000000 #> 11   mc_ 11                                 1                 0.0000000 #> 12   mc_ 12                                 1                 0.0000000 #> 13   mc_ 13                                 1                 0.0000000 #> 14   mc_ 14                                 1                 0.0000000 #> 15   mc_ 15                                 1                 0.0000000 #> 16   mc_ 16                                 1                 0.0000000 #> 17   mc_ 17                                 1                 0.0000000 #> 18   mc_ 18                                 1                 0.0000000 #> 19   mc_ 19                                 1                 0.0000000 #> 20   mc_ 20                                 1                 0.0000000 #> 21   mc_ 21                                 1                 0.0000000 #> 22   mc_ 22                                 1                 0.2449184 #> 23   mc_ 23                                 1                 0.0000000 #> 24   mc_ 24                                 1                 0.0000000 #> 25   mc_ 25                                 1                 0.0000000 #> 26   mc_ 26                                 1                 0.0000000 #> 27   mc_ 27                                 1                 0.0000000 #> 28   mc_ 28                                 1                 0.0000000 #> 29   mc_ 29                                 1                 0.0000000 #> 30   mc_ 30                                 1                 0.0000000 #> 31   mc_ 31                                 1                 0.0000000 #> 32   mc_ 32                                 1                 0.0000000 #> 33   mc_ 33                                 1                 0.0000000 #> 34   mc_ 34                                 1                 0.0000000 #> 35   mc_ 35                                 1                 0.0000000 #> 36   mc_ 36                                 1                 0.0000000 #> 37   mc_ 37                                 1                 0.0000000 #> 38   mc_ 38                                 1                 0.0000000 #> 39   mc_ 39                                 1                 0.0000000 #> 40   mc_ 40                                 1                 0.0000000 #> 41   mc_ 41                                 1                 0.0000000 #> 42   mc_ 42                                 1                 0.0000000 #> 43   mc_ 43                                 1                 0.0000000 #> 44   mc_ 44                                 1                 0.0000000 #> 45   mc_ 45                                 1                 0.0000000 #> 46   mc_ 46                                 1                 0.0000000 #> 47   mc_ 47                                 1                 0.0000000 #> 48   mc_ 48                                 1                 0.0000000 #> 49   mc_ 49                                 1                 0.0000000 #> 50   mc_ 50                                 1                 0.0000000 #> 51   mc_ 51                                 1                 0.0000000 #> 52   mc_ 52                                 1                 0.0000000 #> 53   mc_ 53                                 1                 0.0000000 #> 54   mc_ 54                                 1                 0.0000000 #> 55   mc_ 55                                 1                 0.0000000 #> 56   mc_ 56                                 1                 0.0000000 #> 57   mc_ 57                                 1                 0.0000000 #> 58   mc_ 58                                 1                 0.0000000 #> 59   mc_ 59                                 1                 0.0000000 #> 60   mc_ 60                                 1                 0.0000000 #> 61   mc_ 61                                 1                 0.0000000 #> 62   mc_ 62                                 1                 0.0000000 #> 63   mc_ 63                                 1                 0.2449187 #> 64   mc_ 64                                 1                 0.0000000 #> 65   mc_ 65                                 1                 0.0000000 #> 66   mc_ 66                                 1                 0.0000000 #> 67   mc_ 67                                 1                 0.0000000 #> 68   mc_ 68                                 1                 0.0000000 #> 69   mc_ 69                                 1                 0.2449187 #> 70   mc_ 70                                 1                 0.0000000 #> 71   mc_ 71                                 1                 0.0000000 #> 72   mc_ 72                                 1                 0.0000000 #> 73   mc_ 73                                 1                 0.0000000 #> 74   mc_ 74                                 1                 0.0000000 #> 75   mc_ 75                                 1                 0.0000000 #> 76   mc_ 76                                 1                 0.0000000 #> 77   mc_ 77                                 1                 0.0000000 #> 78   mc_ 78                                 1                 0.0000000 #> 79   mc_ 79                                 1                 0.0000000 #> 80   mc_ 80                                 1                 0.0000000 #> 81   mc_ 81                                 1                 0.0000000 #> 82   mc_ 82                                 1                 0.0000000 #> 83   mc_ 83                                 1                 0.0000000 #> 84   mc_ 84                                 1                 0.0000000 #> 85   mc_ 85                                 1                 0.0000000 #> 86   mc_ 86                                 1                 0.0000000 #> 87   mc_ 87                                 1                 0.0000000 #> 88   mc_ 88                                 1                 0.0000000 #> 89   mc_ 89                                 1                 0.0000000 #> 90   mc_ 90                                 1                 0.0000000 #> 91   mc_ 91                                 1                 0.0000000 #> 92   mc_ 92                                 1                 0.0000000 #> 93   mc_ 93                                 1                 0.0000000 #> 94   mc_ 94                                 1                 0.0000000 #> 95   mc_ 95                                 1                 0.0000000 #> 96   mc_ 96                                 1                 0.0000000 #> 97   mc_ 97                                 1                 0.0000000 #> 98   mc_ 98                                 1                 0.0000000 #> 99   mc_ 99                                 1                 0.0000000 #> 100 mc_ 100                                 1                 0.0000000 #>     Salts.Added.during.Water.Treatment #> 1                                    0 #> 2                                    0 #> 3                                    0 #> 4                                    0 #> 5                                    0 #> 6                                    0 #> 7                                    0 #> 8                                    0 #> 9                                    0 #> 10                                   0 #> 11                                   0 #> 12                                   0 #> 13                                   0 #> 14                                   0 #> 15                                   0 #> 16                                   0 #> 17                                   0 #> 18                                   0 #> 19                                   0 #> 20                                   0 #> 21                                   0 #> 22                                   0 #> 23                                   0 #> 24                                   0 #> 25                                   0 #> 26                                   0 #> 27                                   0 #> 28                                   0 #> 29                                   0 #> 30                                   0 #> 31                                   0 #> 32                                   0 #> 33                                   0 #> 34                                   0 #> 35                                   0 #> 36                                   0 #> 37                                   0 #> 38                                   0 #> 39                                   0 #> 40                                   0 #> 41                                   0 #> 42                                   0 #> 43                                   0 #> 44                                   0 #> 45                                   0 #> 46                                   0 #> 47                                   0 #> 48                                   0 #> 49                                   0 #> 50                                   0 #> 51                                   0 #> 52                                   0 #> 53                                   0 #> 54                                   0 #> 55                                   0 #> 56                                   0 #> 57                                   0 #> 58                                   0 #> 59                                   0 #> 60                                   0 #> 61                                   0 #> 62                                   0 #> 63                                   0 #> 64                                   0 #> 65                                   0 #> 66                                   0 #> 67                                   0 #> 68                                   0 #> 69                                   0 #> 70                                   0 #> 71                                   0 #> 72                                   0 #> 73                                   0 #> 74                                   0 #> 75                                   0 #> 76                                   0 #> 77                                   0 #> 78                                   0 #> 79                                   0 #> 80                                   0 #> 81                                   0 #> 82                                   0 #> 83                                   0 #> 84                                   0 #> 85                                   0 #> 86                                   0 #> 87                                   0 #> 88                                   0 #> 89                                   0 #> 90                                   0 #> 91                                   0 #> 92                                   0 #> 93                                   0 #> 94                                   0 #> 95                                   0 #> 96                                   0 #> 97                                   0 #> 98                                   0 #> 99                                   0 #> 100                                  0 #>     Salts.Added.by.Winter.Maintenance.Activities Ecosystem.Health #> 1                                    -0.14888503     0.0208220485 #> 2                                    -0.35835740     0.0533815581 #> 3                                     0.00000000     0.0000000000 #> 4                                     0.00000000     0.0000000000 #> 5                                    -0.09966799     0.4201721826 #> 6                                     0.00000000     0.0000000000 #> 7                                    -0.04995837     0.0061817101 #> 8                                     0.00000000     0.0738808797 #> 9                                     0.00000000     0.0000000000 #> 10                                   -0.35835740     0.0240916995 #> 11                                   -0.35835740     0.0044764439 #> 12                                    0.00000000     0.0000000000 #> 13                                    0.00000000     0.0000000000 #> 14                                   -0.19737532     0.0009867481 #> 15                                   -0.14888503     0.0153439910 #> 16                                   -0.09966799     0.0074714818 #> 17                                   -0.37994896     0.0494930921 #> 18                                    0.00000000     0.3363755443 #> 19                                   -0.12435300     0.0058247595 #> 20                                   -0.35835740     0.0400528241 #> 21                                    0.00000000     0.0000000000 #> 22                                   -0.09966790     0.0468901834 #> 23                                   -0.37994896     0.0452151987 #> 24                                    0.00000000     0.0000000000 #> 25                                   -0.14888503     0.0474285027 #> 26                                   -0.29131261     0.0965266718 #> 27                                   -0.09966799     0.0108495067 #> 28                                   -0.35835740     0.0178853452 #> 29                                    0.00000000     0.0000000000 #> 30                                    0.00000000     0.0000000000 #> 31                                    0.00000000     0.0497927852 #> 32                                   -0.09966799     0.0140083726 #> 33                                    0.00000000     0.0000000000 #> 34                                   -0.29131261     0.1705889443 #> 35                                    0.00000000     0.0000000000 #> 36                                   -0.04995837     0.0499219014 #> 37                                    0.00000000     0.0000000000 #> 38                                   -0.12435300     0.0046598266 #> 39                                   -0.09966799     0.0130745913 #> 40                                   -0.29131261     0.0455890853 #> 41                                   -0.31852078     0.0392522410 #> 42                                   -0.12435300     0.0186372829 #> 43                                    0.00000000     0.0000000000 #> 44                                    0.00000000     0.0000000000 #> 45                                    0.00000000     0.3363755443 #> 46                                   -0.09966799     0.0029891402 #> 47                                   -0.35835740     0.0441125027 #> 48                                    0.00000000     0.0000000000 #> 49                                   -0.31852078     0.0043684661 #> 50                                   -0.29131261     0.0289919975 #> 51                                   -0.14888503     0.0120146867 #> 52                                   -0.19737532     0.0157805189 #> 53                                   -0.09966799     0.0681530785 #> 54                                    0.00000000     0.0000000000 #> 55                                   -0.14888503     0.0074432549 #> 56                                   -0.19737532     0.0039393047 #> 57                                   -0.35835740     0.0071662584 #> 58                                   -0.19737532     0.0276982433 #> 59                                   -0.37994896     0.0353663608 #> 60                                    0.00000000     0.0000000000 #> 61                                    0.00000000     0.0000000000 #> 62                                   -0.33637554     0.0313587223 #> 63                                    0.00000000     0.0000000000 #> 64                                   -0.33637554     0.1070525602 #> 65                                   -0.37994896     0.0397555129 #> 66                                    0.00000000     0.1097693019 #> 67                                   -0.33637554     0.0626558307 #> 68                                    0.00000000     0.0398460897 #> 69                                    0.00000000     0.0000000000 #> 70                                    0.00000000     0.0000000000 #> 71                                   -0.37994896     0.0540736792 #> 72                                    0.00000000     0.0434960892 #> 73                                   -0.19737532     0.3481429066 #> 74                                    0.00000000     0.0000000000 #> 75                                   -0.09966799     0.0041097998 #> 76                                   -0.29131261     0.0406206614 #> 77                                   -0.35835740     0.0190227185 #> 78                                   -0.33637554     0.0534466616 #> 79                                   -0.35835740     0.0633448949 #> 80                                   -0.14888503     0.0111543267 #> 81                                   -0.12435300     0.0186372829 #> 82                                   -0.29131261     0.0319651181 #> 83                                    0.00000000     0.0000000000 #> 84                                   -0.33637554     0.0166604246 #> 85                                    0.00000000     0.0000000000 #> 86                                    0.00000000     0.0581966874 #> 87                                   -0.33637554     0.0250899392 #> 88                                   -0.04995837     0.1170787398 #> 89                                    0.00000000     0.0000000000 #> 90                                   -0.37994896     0.0702795422 #> 91                                    0.00000000     0.0000000000 #> 92                                   -0.14888503     0.0150509579 #> 93                                    0.00000000     0.0000000000 #> 94                                    0.00000000     0.0000000000 #> 95                                    0.00000000     0.0000000000 #> 96                                   -0.29131261     0.0000000000 #> 97                                   -0.37994896     0.0334491151 #> 98                                   -0.35835740     0.0436719672 #> 99                                    0.00000000     0.0000000000 #> 100                                   0.00000000     0.0000000000 #>     Public.Awareness.of.Reservoir.Salinization Salinization.of.the.Reservoir #> 1                                  0.000000000                   -0.05206265 #> 2                                  0.000000000                   -0.13358088 #> 3                                  0.000000000                    0.00000000 #> 4                                  0.000000000                    0.00000000 #> 5                                  0.000000000                   -0.27971744 #> 6                                  0.000000000                    0.00000000 #> 7                                  0.000000000                   -0.01648477 #> 8                                  0.000000000                   -0.19737532 #> 9                                  0.000000000                    0.00000000 #> 10                                 0.000000000                   -0.10709494 #> 11                                 0.000000000                   -0.04476474 #> 12                                 0.000000000                    0.00000000 #> 13                                 0.000000000                    0.00000000 #> 14                                 0.000000000                   -0.01973497 #> 15                                 0.000000000                   -0.04092052 #> 16                                 0.000000000                   -0.03735810 #> 17                                 0.000000000                   -0.14152447 #> 18                                 0.000000000                    0.00000000 #> 19                                 0.000000000                   -0.04659860 #> 20                                 0.000000000                   -0.13358088 #> 21                                 0.000000000                    0.00000000 #> 22                                 0.000000000                   -0.13407147 #> 23                                 0.000000000                   -0.15082016 #> 24                                 0.000000000                    0.00000000 #> 25                                 0.000000000                   -0.15821371 #> 26                                 0.000000000                   -0.19365630 #> 27                                 0.000000000                   -0.03287858 #> 28                                 0.000000000                   -0.07154901 #> 29                                 0.000000000                    0.00000000 #> 30                                 0.000000000                    0.00000000 #> 31                                 0.000000000                   -0.09966799 #> 32                                 0.000000000                   -0.03735810 #> 33                                 0.000000000                    0.00000000 #> 34                                 0.000000000                   -0.34454639 #> 35                                 0.000000000                    0.00000000 #> 36                                 0.000000000                   -0.14275267 #> 37                                 0.000000000                    0.00000000 #> 38                                 0.000000000                   -0.04659860 #> 39                                 0.000000000                   -0.03735810 #> 40                                 0.000000000                   -0.13034488 #> 41                                 0.000000000                   -0.10472645 #> 42                                 0.000000000                   -0.04659860 #> 43                                 0.000000000                    0.00000000 #> 44                                 0.000000000                    0.00000000 #> 45                                 0.000000000                    0.00000000 #> 46                                 0.000000000                   -0.02989149 #> 47                                 0.000000000                   -0.11770973 #> 48                                 0.000000000                    0.00000000 #> 49                                 0.000000000                   -0.08736988 #> 50                                 0.000000000                   -0.11600050 #> 51                                 0.000000000                   -0.06008230 #> 52                                 0.000000000                   -0.03945457 #> 53                                 0.000000000                   -0.13651779 #> 54                                 0.000000000                    0.00000000 #> 55                                 0.000000000                   -0.01860848 #> 56                                 0.000000000                   -0.07878650 #> 57                                 0.000000000                   -0.01791595 #> 58                                 0.000000000                   -0.07388088 #> 59                                 0.000000000                   -0.14152447 #> 60                                 0.000000000                    0.00000000 #> 61                                 0.000000000                    0.00000000 #> 62                                 0.000000000                   -0.12547603 #> 63                                 0.000000000                    0.00000000 #> 64                                 0.000000000                   -0.30704099 #> 65                                 0.000000000                   -0.10607316 #> 66                                 0.000000000                   -0.24491866 #> 67                                 0.000000000                   -0.12547603 #> 68                                 0.000000000                   -0.09966799 #> 69                                 0.000000000                    0.00000000 #> 70                                 0.000000000                    0.00000000 #> 71                                 0.000000000                   -0.21650590 #> 72                                 0.000000000                   -0.12435300 #> 73                                 0.000000000                   -0.06665209 #> 74                                 0.000000000                    0.00000000 #> 75                                 0.000000000                   -0.03287858 #> 76                                 0.000000000                   -0.10160756 #> 77                                -0.004476444                   -0.04476474 #> 78                                -0.013373613                   -0.13374410 #> 79                                 0.000000000                   -0.25371930 #> 80                                 0.000000000                   -0.05577395 #> 81                                 0.000000000                   -0.04659860 #> 82                                 0.000000000                   -0.07994003 #> 83                                 0.000000000                    0.00000000 #> 84                                 0.000000000                   -0.16661966 #> 85                                 0.000000000                    0.00000000 #> 86                                 0.000000000                   -0.29131261 #> 87                                 0.000000000                   -0.12547603 #> 88                                 0.000000000                   -0.31364944 #> 89                                 0.000000000                    0.00000000 #> 90                                 0.000000000                   -0.18772159 #> 91                                 0.000000000                    0.00000000 #> 92                                 0.000000000                   -0.06689820 #> 93                                 0.000000000                    0.00000000 #> 94                                 0.000000000                    0.00000000 #> 95                                 0.000000000                    0.00000000 #> 96                                 0.000000000                   -0.10160756 #> 97                                 0.000000000                   -0.13384635 #> 98                                 0.000000000                   -0.10925299 #> 99                                 0.000000000                    0.00000000 #> 100                                0.000000000                    0.00000000 #>  #> $mc_CIs_and_quantiles #>                                           node expected_value         min #> 1            Guidance.Docs.for.Salt.Management   1.0000000000  1.00000000 #> 2                    Public.Education.Programs   0.0072324458  0.00000000 #> 3           Salts.Added.during.Water.Treatment   0.0000000000  0.00000000 #> 4 Salts.Added.by.Winter.Maintenance.Activities  -0.1447987025 -0.37994896 #> 5                             Ecosystem.Health   0.0380644947  0.00000000 #> 6   Public.Awareness.of.Reservoir.Salinization  -0.0001814422 -0.01337361 #> 7                Salinization.of.the.Reservoir  -0.0759430237 -0.34454639 #>        0.025_CI 0.25_quantile      median 0.75_quantile    0.975_CI       max #> 1  1.0000000000     1.0000000  1.00000000    1.00000000  1.00000000 1.0000000 #> 2  0.0000000000     0.0000000  0.00000000    0.00000000  0.01714430 0.2449187 #> 3  0.0000000000     0.0000000  0.00000000    0.00000000  0.00000000 0.0000000 #> 4 -0.1753764918    -0.2981147 -0.09966799    0.00000000 -0.11618703 0.0000000 #> 5  0.0251807470     0.0000000  0.01452967    0.04438818  0.05452763 0.4201722 #> 6 -0.0004907373     0.0000000  0.00000000    0.00000000  0.00000000 0.0000000 #> 7 -0.0920673437    -0.1254760 -0.04659860    0.00000000 -0.06071430 0.0000000 #>  get_inferences(ex_conventional_fcmconfr) #> $input_inferences #>            input Guidance.Docs.for.Salt.Management Public.Education.Programs #> 1   adj_matrix_1                                 1                 0.0000000 #> 2   adj_matrix_2                                 1                 0.0000000 #> 3   adj_matrix_3                                 1                 0.0000000 #> 4   adj_matrix_4                                 1                 0.0000000 #> 5   adj_matrix_5                                 1                 0.0000000 #> 6   adj_matrix_6                                 1                 0.0000000 #> 7   adj_matrix_7                                 1                 0.0000000 #> 8   adj_matrix_8                                 1                 0.0000000 #> 9   adj_matrix_9                                 1                 0.0000000 #> 10 adj_matrix_10                                 1                 0.0000000 #> 11 adj_matrix_11                                 1                 0.0000000 #> 12 adj_matrix_12                                 1                 0.0000000 #> 13 adj_matrix_13                                 1                 0.0000000 #> 14 adj_matrix_14                                 1                 0.0000000 #> 15 adj_matrix_15                                 1                 0.0000000 #> 16 adj_matrix_16                                 1                 0.2449187 #> 17 adj_matrix_17                                 1                 0.0000000 #> 18 adj_matrix_18                                 1                 0.0000000 #> 19 adj_matrix_19                                 1                 0.0000000 #> 20 adj_matrix_20                                 1                 0.0000000 #> 21 adj_matrix_21                                 1                 0.0000000 #> 22 adj_matrix_22                                 1                 0.0000000 #> 23 adj_matrix_23                                 1                 0.0000000 #> 24 adj_matrix_24                                 1                 0.0000000 #> 25 adj_matrix_25                                 1                 0.0000000 #> 26 adj_matrix_26                                 1                 0.0000000 #> 27 adj_matrix_27                                 1                 0.0000000 #> 28 adj_matrix_28                                 1                 0.0000000 #> 29 adj_matrix_29                                 1                 0.0000000 #> 30 adj_matrix_30                                 1                 0.0000000 #>    Salts.Added.during.Water.Treatment #> 1                                   0 #> 2                                   0 #> 3                                   0 #> 4                                   0 #> 5                                   0 #> 6                                   0 #> 7                                   0 #> 8                                   0 #> 9                                   0 #> 10                                  0 #> 11                                  0 #> 12                                  0 #> 13                                  0 #> 14                                  0 #> 15                                  0 #> 16                                  0 #> 17                                  0 #> 18                                  0 #> 19                                  0 #> 20                                  0 #> 21                                  0 #> 22                                  0 #> 23                                  0 #> 24                                  0 #> 25                                  0 #> 26                                  0 #> 27                                  0 #> 28                                  0 #> 29                                  0 #> 30                                  0 #>    Salts.Added.by.Winter.Maintenance.Activities Ecosystem.Health #> 1                                   -0.12435300      0.063651343 #> 2                                   -0.33637554      0.053446662 #> 3                                   -0.14888503      0.110783596 #> 4                                   -0.19737532      0.020331562 #> 5                                   -0.35835740      0.050050971 #> 6                                    0.00000000      0.000000000 #> 7                                    0.00000000      0.000000000 #> 8                                    0.00000000      0.000000000 #> 9                                    0.00000000      0.034869655 #> 10                                  -0.29131261      0.045691567 #> 11                                  -0.37994896      0.001899514 #> 12                                  -0.31852078      0.067018546 #> 13                                  -0.09966799      0.003549288 #> 14                                  -0.29131261      0.369706774 #> 15                                  -0.33637554      0.025137581 #> 16                                   0.00000000      0.039454572 #> 17                                  -0.04995837      0.001873218 #> 18                                   0.00000000      0.000000000 #> 19                                  -0.14888503      0.022305878 #> 20                                   0.00000000      0.000000000 #> 21                                  -0.09966799      0.003114454 #> 22                                  -0.37994896      0.031172451 #> 23                                   0.00000000      0.109769302 #> 24                                  -0.19737532      0.039842629 #> 25                                   0.00000000      0.000000000 #> 26                                   0.00000000      0.000000000 #> 27                                   0.00000000      0.000000000 #> 28                                  -0.35835740      0.159229804 #> 29                                   0.00000000      0.000000000 #> 30                                   0.00000000      0.000000000 #>    Public.Awareness.of.Reservoir.Salinization Salinization.of.the.Reservoir #> 1                                 0.000000000                   -0.16996670 #> 2                                 0.000000000                   -0.13374410 #> 3                                 0.000000000                   -0.29664048 #> 4                                 0.000000000                   -0.05422497 #> 5                                 0.000000000                   -0.13358088 #> 6                                 0.000000000                    0.00000000 #> 7                                 0.000000000                    0.00000000 #> 8                                 0.000000000                    0.00000000 #> 9                                 0.000000000                   -0.09966799 #> 10                                0.000000000                   -0.10160756 #> 11                                0.000000000                   -0.01899516 #> 12                                0.000000000                   -0.15792742 #> 13                                0.000000000                   -0.01014392 #> 14                                0.000000000                   -0.10880973 #> 15                                0.000000000                   -0.10057151 #> 16                                0.000000000                   -0.19737532 #> 17                                0.000000000                   -0.01873220 #> 18                                0.000000000                    0.00000000 #> 19                                0.000000000                   -0.05577395 #> 20                                0.000000000                    0.00000000 #> 21                               -0.001245785                   -0.01245785 #> 22                                0.000000000                   -0.12473022 #> 23                                0.000000000                   -0.24491866 #> 24                                0.000000000                   -0.08858607 #> 25                                0.000000000                    0.00000000 #> 26                                0.000000000                    0.00000000 #> 27                                0.000000000                    0.00000000 #> 28                                0.000000000                   -0.40149091 #> 29                                0.000000000                    0.00000000 #> 30                                0.000000000                    0.00000000 #>  #> $aggregate_inferences #>           input Guidance.Docs.for.Salt.Management Public.Education.Programs #> final aggregate                                 1                0.00833314 #>       Salts.Added.during.Water.Treatment #> final                      -6.944284e-05 #>       Salts.Added.by.Winter.Maintenance.Activities Ecosystem.Health #> final                                   -0.1414207       0.03767607 #>       Public.Awareness.of.Reservoir.Salinization Salinization.of.the.Reservoir #> final                              -0.0002939271                   -0.08817825 #>  #> $mc_inferences #>       input Guidance.Docs.for.Salt.Management Public.Education.Programs #> 1     mc_ 1                                 1                 0.0000000 #> 2     mc_ 2                                 1                 0.0000000 #> 3     mc_ 3                                 1                 0.0000000 #> 4     mc_ 4                                 1                 0.0000000 #> 5     mc_ 5                                 1                 0.0000000 #> 6     mc_ 6                                 1                 0.0000000 #> 7     mc_ 7                                 1                 0.0000000 #> 8     mc_ 8                                 1                 0.0000000 #> 9     mc_ 9                                 1                 0.0000000 #> 10   mc_ 10                                 1                 0.0000000 #> 11   mc_ 11                                 1                 0.0000000 #> 12   mc_ 12                                 1                 0.0000000 #> 13   mc_ 13                                 1                 0.0000000 #> 14   mc_ 14                                 1                 0.0000000 #> 15   mc_ 15                                 1                 0.0000000 #> 16   mc_ 16                                 1                 0.0000000 #> 17   mc_ 17                                 1                 0.0000000 #> 18   mc_ 18                                 1                 0.0000000 #> 19   mc_ 19                                 1                 0.0000000 #> 20   mc_ 20                                 1                 0.0000000 #> 21   mc_ 21                                 1                 0.0000000 #> 22   mc_ 22                                 1                 0.2449184 #> 23   mc_ 23                                 1                 0.0000000 #> 24   mc_ 24                                 1                 0.0000000 #> 25   mc_ 25                                 1                 0.0000000 #> 26   mc_ 26                                 1                 0.0000000 #> 27   mc_ 27                                 1                 0.0000000 #> 28   mc_ 28                                 1                 0.0000000 #> 29   mc_ 29                                 1                 0.0000000 #> 30   mc_ 30                                 1                 0.0000000 #> 31   mc_ 31                                 1                 0.0000000 #> 32   mc_ 32                                 1                 0.0000000 #> 33   mc_ 33                                 1                 0.0000000 #> 34   mc_ 34                                 1                 0.0000000 #> 35   mc_ 35                                 1                 0.0000000 #> 36   mc_ 36                                 1                 0.0000000 #> 37   mc_ 37                                 1                 0.0000000 #> 38   mc_ 38                                 1                 0.0000000 #> 39   mc_ 39                                 1                 0.0000000 #> 40   mc_ 40                                 1                 0.0000000 #> 41   mc_ 41                                 1                 0.0000000 #> 42   mc_ 42                                 1                 0.0000000 #> 43   mc_ 43                                 1                 0.0000000 #> 44   mc_ 44                                 1                 0.0000000 #> 45   mc_ 45                                 1                 0.0000000 #> 46   mc_ 46                                 1                 0.0000000 #> 47   mc_ 47                                 1                 0.0000000 #> 48   mc_ 48                                 1                 0.0000000 #> 49   mc_ 49                                 1                 0.0000000 #> 50   mc_ 50                                 1                 0.0000000 #> 51   mc_ 51                                 1                 0.0000000 #> 52   mc_ 52                                 1                 0.0000000 #> 53   mc_ 53                                 1                 0.0000000 #> 54   mc_ 54                                 1                 0.0000000 #> 55   mc_ 55                                 1                 0.0000000 #> 56   mc_ 56                                 1                 0.0000000 #> 57   mc_ 57                                 1                 0.0000000 #> 58   mc_ 58                                 1                 0.0000000 #> 59   mc_ 59                                 1                 0.0000000 #> 60   mc_ 60                                 1                 0.0000000 #> 61   mc_ 61                                 1                 0.0000000 #> 62   mc_ 62                                 1                 0.0000000 #> 63   mc_ 63                                 1                 0.2449187 #> 64   mc_ 64                                 1                 0.0000000 #> 65   mc_ 65                                 1                 0.0000000 #> 66   mc_ 66                                 1                 0.0000000 #> 67   mc_ 67                                 1                 0.0000000 #> 68   mc_ 68                                 1                 0.0000000 #> 69   mc_ 69                                 1                 0.2449187 #> 70   mc_ 70                                 1                 0.0000000 #> 71   mc_ 71                                 1                 0.0000000 #> 72   mc_ 72                                 1                 0.0000000 #> 73   mc_ 73                                 1                 0.0000000 #> 74   mc_ 74                                 1                 0.0000000 #> 75   mc_ 75                                 1                 0.0000000 #> 76   mc_ 76                                 1                 0.0000000 #> 77   mc_ 77                                 1                 0.0000000 #> 78   mc_ 78                                 1                 0.0000000 #> 79   mc_ 79                                 1                 0.0000000 #> 80   mc_ 80                                 1                 0.0000000 #> 81   mc_ 81                                 1                 0.0000000 #> 82   mc_ 82                                 1                 0.0000000 #> 83   mc_ 83                                 1                 0.0000000 #> 84   mc_ 84                                 1                 0.0000000 #> 85   mc_ 85                                 1                 0.0000000 #> 86   mc_ 86                                 1                 0.0000000 #> 87   mc_ 87                                 1                 0.0000000 #> 88   mc_ 88                                 1                 0.0000000 #> 89   mc_ 89                                 1                 0.0000000 #> 90   mc_ 90                                 1                 0.0000000 #> 91   mc_ 91                                 1                 0.0000000 #> 92   mc_ 92                                 1                 0.0000000 #> 93   mc_ 93                                 1                 0.0000000 #> 94   mc_ 94                                 1                 0.0000000 #> 95   mc_ 95                                 1                 0.0000000 #> 96   mc_ 96                                 1                 0.0000000 #> 97   mc_ 97                                 1                 0.0000000 #> 98   mc_ 98                                 1                 0.0000000 #> 99   mc_ 99                                 1                 0.0000000 #> 100 mc_ 100                                 1                 0.0000000 #>     Salts.Added.during.Water.Treatment #> 1                                    0 #> 2                                    0 #> 3                                    0 #> 4                                    0 #> 5                                    0 #> 6                                    0 #> 7                                    0 #> 8                                    0 #> 9                                    0 #> 10                                   0 #> 11                                   0 #> 12                                   0 #> 13                                   0 #> 14                                   0 #> 15                                   0 #> 16                                   0 #> 17                                   0 #> 18                                   0 #> 19                                   0 #> 20                                   0 #> 21                                   0 #> 22                                   0 #> 23                                   0 #> 24                                   0 #> 25                                   0 #> 26                                   0 #> 27                                   0 #> 28                                   0 #> 29                                   0 #> 30                                   0 #> 31                                   0 #> 32                                   0 #> 33                                   0 #> 34                                   0 #> 35                                   0 #> 36                                   0 #> 37                                   0 #> 38                                   0 #> 39                                   0 #> 40                                   0 #> 41                                   0 #> 42                                   0 #> 43                                   0 #> 44                                   0 #> 45                                   0 #> 46                                   0 #> 47                                   0 #> 48                                   0 #> 49                                   0 #> 50                                   0 #> 51                                   0 #> 52                                   0 #> 53                                   0 #> 54                                   0 #> 55                                   0 #> 56                                   0 #> 57                                   0 #> 58                                   0 #> 59                                   0 #> 60                                   0 #> 61                                   0 #> 62                                   0 #> 63                                   0 #> 64                                   0 #> 65                                   0 #> 66                                   0 #> 67                                   0 #> 68                                   0 #> 69                                   0 #> 70                                   0 #> 71                                   0 #> 72                                   0 #> 73                                   0 #> 74                                   0 #> 75                                   0 #> 76                                   0 #> 77                                   0 #> 78                                   0 #> 79                                   0 #> 80                                   0 #> 81                                   0 #> 82                                   0 #> 83                                   0 #> 84                                   0 #> 85                                   0 #> 86                                   0 #> 87                                   0 #> 88                                   0 #> 89                                   0 #> 90                                   0 #> 91                                   0 #> 92                                   0 #> 93                                   0 #> 94                                   0 #> 95                                   0 #> 96                                   0 #> 97                                   0 #> 98                                   0 #> 99                                   0 #> 100                                  0 #>     Salts.Added.by.Winter.Maintenance.Activities Ecosystem.Health #> 1                                    -0.14888503     0.0208220485 #> 2                                    -0.35835740     0.0533815581 #> 3                                     0.00000000     0.0000000000 #> 4                                     0.00000000     0.0000000000 #> 5                                    -0.09966799     0.4201721826 #> 6                                     0.00000000     0.0000000000 #> 7                                    -0.04995837     0.0061817101 #> 8                                     0.00000000     0.0738808797 #> 9                                     0.00000000     0.0000000000 #> 10                                   -0.35835740     0.0240916995 #> 11                                   -0.35835740     0.0044764439 #> 12                                    0.00000000     0.0000000000 #> 13                                    0.00000000     0.0000000000 #> 14                                   -0.19737532     0.0009867481 #> 15                                   -0.14888503     0.0153439910 #> 16                                   -0.09966799     0.0074714818 #> 17                                   -0.37994896     0.0494930921 #> 18                                    0.00000000     0.3363755443 #> 19                                   -0.12435300     0.0058247595 #> 20                                   -0.35835740     0.0400528241 #> 21                                    0.00000000     0.0000000000 #> 22                                   -0.09966790     0.0468901834 #> 23                                   -0.37994896     0.0452151987 #> 24                                    0.00000000     0.0000000000 #> 25                                   -0.14888503     0.0474285027 #> 26                                   -0.29131261     0.0965266718 #> 27                                   -0.09966799     0.0108495067 #> 28                                   -0.35835740     0.0178853452 #> 29                                    0.00000000     0.0000000000 #> 30                                    0.00000000     0.0000000000 #> 31                                    0.00000000     0.0497927852 #> 32                                   -0.09966799     0.0140083726 #> 33                                    0.00000000     0.0000000000 #> 34                                   -0.29131261     0.1705889443 #> 35                                    0.00000000     0.0000000000 #> 36                                   -0.04995837     0.0499219014 #> 37                                    0.00000000     0.0000000000 #> 38                                   -0.12435300     0.0046598266 #> 39                                   -0.09966799     0.0130745913 #> 40                                   -0.29131261     0.0455890853 #> 41                                   -0.31852078     0.0392522410 #> 42                                   -0.12435300     0.0186372829 #> 43                                    0.00000000     0.0000000000 #> 44                                    0.00000000     0.0000000000 #> 45                                    0.00000000     0.3363755443 #> 46                                   -0.09966799     0.0029891402 #> 47                                   -0.35835740     0.0441125027 #> 48                                    0.00000000     0.0000000000 #> 49                                   -0.31852078     0.0043684661 #> 50                                   -0.29131261     0.0289919975 #> 51                                   -0.14888503     0.0120146867 #> 52                                   -0.19737532     0.0157805189 #> 53                                   -0.09966799     0.0681530785 #> 54                                    0.00000000     0.0000000000 #> 55                                   -0.14888503     0.0074432549 #> 56                                   -0.19737532     0.0039393047 #> 57                                   -0.35835740     0.0071662584 #> 58                                   -0.19737532     0.0276982433 #> 59                                   -0.37994896     0.0353663608 #> 60                                    0.00000000     0.0000000000 #> 61                                    0.00000000     0.0000000000 #> 62                                   -0.33637554     0.0313587223 #> 63                                    0.00000000     0.0000000000 #> 64                                   -0.33637554     0.1070525602 #> 65                                   -0.37994896     0.0397555129 #> 66                                    0.00000000     0.1097693019 #> 67                                   -0.33637554     0.0626558307 #> 68                                    0.00000000     0.0398460897 #> 69                                    0.00000000     0.0000000000 #> 70                                    0.00000000     0.0000000000 #> 71                                   -0.37994896     0.0540736792 #> 72                                    0.00000000     0.0434960892 #> 73                                   -0.19737532     0.3481429066 #> 74                                    0.00000000     0.0000000000 #> 75                                   -0.09966799     0.0041097998 #> 76                                   -0.29131261     0.0406206614 #> 77                                   -0.35835740     0.0190227185 #> 78                                   -0.33637554     0.0534466616 #> 79                                   -0.35835740     0.0633448949 #> 80                                   -0.14888503     0.0111543267 #> 81                                   -0.12435300     0.0186372829 #> 82                                   -0.29131261     0.0319651181 #> 83                                    0.00000000     0.0000000000 #> 84                                   -0.33637554     0.0166604246 #> 85                                    0.00000000     0.0000000000 #> 86                                    0.00000000     0.0581966874 #> 87                                   -0.33637554     0.0250899392 #> 88                                   -0.04995837     0.1170787398 #> 89                                    0.00000000     0.0000000000 #> 90                                   -0.37994896     0.0702795422 #> 91                                    0.00000000     0.0000000000 #> 92                                   -0.14888503     0.0150509579 #> 93                                    0.00000000     0.0000000000 #> 94                                    0.00000000     0.0000000000 #> 95                                    0.00000000     0.0000000000 #> 96                                   -0.29131261     0.0000000000 #> 97                                   -0.37994896     0.0334491151 #> 98                                   -0.35835740     0.0436719672 #> 99                                    0.00000000     0.0000000000 #> 100                                   0.00000000     0.0000000000 #>     Public.Awareness.of.Reservoir.Salinization Salinization.of.the.Reservoir #> 1                                  0.000000000                   -0.05206265 #> 2                                  0.000000000                   -0.13358088 #> 3                                  0.000000000                    0.00000000 #> 4                                  0.000000000                    0.00000000 #> 5                                  0.000000000                   -0.27971744 #> 6                                  0.000000000                    0.00000000 #> 7                                  0.000000000                   -0.01648477 #> 8                                  0.000000000                   -0.19737532 #> 9                                  0.000000000                    0.00000000 #> 10                                 0.000000000                   -0.10709494 #> 11                                 0.000000000                   -0.04476474 #> 12                                 0.000000000                    0.00000000 #> 13                                 0.000000000                    0.00000000 #> 14                                 0.000000000                   -0.01973497 #> 15                                 0.000000000                   -0.04092052 #> 16                                 0.000000000                   -0.03735810 #> 17                                 0.000000000                   -0.14152447 #> 18                                 0.000000000                    0.00000000 #> 19                                 0.000000000                   -0.04659860 #> 20                                 0.000000000                   -0.13358088 #> 21                                 0.000000000                    0.00000000 #> 22                                 0.000000000                   -0.13407147 #> 23                                 0.000000000                   -0.15082016 #> 24                                 0.000000000                    0.00000000 #> 25                                 0.000000000                   -0.15821371 #> 26                                 0.000000000                   -0.19365630 #> 27                                 0.000000000                   -0.03287858 #> 28                                 0.000000000                   -0.07154901 #> 29                                 0.000000000                    0.00000000 #> 30                                 0.000000000                    0.00000000 #> 31                                 0.000000000                   -0.09966799 #> 32                                 0.000000000                   -0.03735810 #> 33                                 0.000000000                    0.00000000 #> 34                                 0.000000000                   -0.34454639 #> 35                                 0.000000000                    0.00000000 #> 36                                 0.000000000                   -0.14275267 #> 37                                 0.000000000                    0.00000000 #> 38                                 0.000000000                   -0.04659860 #> 39                                 0.000000000                   -0.03735810 #> 40                                 0.000000000                   -0.13034488 #> 41                                 0.000000000                   -0.10472645 #> 42                                 0.000000000                   -0.04659860 #> 43                                 0.000000000                    0.00000000 #> 44                                 0.000000000                    0.00000000 #> 45                                 0.000000000                    0.00000000 #> 46                                 0.000000000                   -0.02989149 #> 47                                 0.000000000                   -0.11770973 #> 48                                 0.000000000                    0.00000000 #> 49                                 0.000000000                   -0.08736988 #> 50                                 0.000000000                   -0.11600050 #> 51                                 0.000000000                   -0.06008230 #> 52                                 0.000000000                   -0.03945457 #> 53                                 0.000000000                   -0.13651779 #> 54                                 0.000000000                    0.00000000 #> 55                                 0.000000000                   -0.01860848 #> 56                                 0.000000000                   -0.07878650 #> 57                                 0.000000000                   -0.01791595 #> 58                                 0.000000000                   -0.07388088 #> 59                                 0.000000000                   -0.14152447 #> 60                                 0.000000000                    0.00000000 #> 61                                 0.000000000                    0.00000000 #> 62                                 0.000000000                   -0.12547603 #> 63                                 0.000000000                    0.00000000 #> 64                                 0.000000000                   -0.30704099 #> 65                                 0.000000000                   -0.10607316 #> 66                                 0.000000000                   -0.24491866 #> 67                                 0.000000000                   -0.12547603 #> 68                                 0.000000000                   -0.09966799 #> 69                                 0.000000000                    0.00000000 #> 70                                 0.000000000                    0.00000000 #> 71                                 0.000000000                   -0.21650590 #> 72                                 0.000000000                   -0.12435300 #> 73                                 0.000000000                   -0.06665209 #> 74                                 0.000000000                    0.00000000 #> 75                                 0.000000000                   -0.03287858 #> 76                                 0.000000000                   -0.10160756 #> 77                                -0.004476444                   -0.04476474 #> 78                                -0.013373613                   -0.13374410 #> 79                                 0.000000000                   -0.25371930 #> 80                                 0.000000000                   -0.05577395 #> 81                                 0.000000000                   -0.04659860 #> 82                                 0.000000000                   -0.07994003 #> 83                                 0.000000000                    0.00000000 #> 84                                 0.000000000                   -0.16661966 #> 85                                 0.000000000                    0.00000000 #> 86                                 0.000000000                   -0.29131261 #> 87                                 0.000000000                   -0.12547603 #> 88                                 0.000000000                   -0.31364944 #> 89                                 0.000000000                    0.00000000 #> 90                                 0.000000000                   -0.18772159 #> 91                                 0.000000000                    0.00000000 #> 92                                 0.000000000                   -0.06689820 #> 93                                 0.000000000                    0.00000000 #> 94                                 0.000000000                    0.00000000 #> 95                                 0.000000000                    0.00000000 #> 96                                 0.000000000                   -0.10160756 #> 97                                 0.000000000                   -0.13384635 #> 98                                 0.000000000                   -0.10925299 #> 99                                 0.000000000                    0.00000000 #> 100                                0.000000000                    0.00000000 #>  #> $mc_CIs_and_quantiles #>                                           node expected_value         min #> 1            Guidance.Docs.for.Salt.Management   1.0000000000  1.00000000 #> 2                    Public.Education.Programs   0.0072324458  0.00000000 #> 3           Salts.Added.during.Water.Treatment   0.0000000000  0.00000000 #> 4 Salts.Added.by.Winter.Maintenance.Activities  -0.1447987025 -0.37994896 #> 5                             Ecosystem.Health   0.0380644947  0.00000000 #> 6   Public.Awareness.of.Reservoir.Salinization  -0.0001814422 -0.01337361 #> 7                Salinization.of.the.Reservoir  -0.0759430237 -0.34454639 #>        0.025_CI 0.25_quantile      median 0.75_quantile    0.975_CI       max #> 1  1.0000000000     1.0000000  1.00000000    1.00000000  1.00000000 1.0000000 #> 2  0.0000000000     0.0000000  0.00000000    0.00000000  0.01714430 0.2449187 #> 3  0.0000000000     0.0000000  0.00000000    0.00000000  0.00000000 0.0000000 #> 4 -0.1753764918    -0.2981147 -0.09966799    0.00000000 -0.11618703 0.0000000 #> 5  0.0251807470     0.0000000  0.01452967    0.04438818  0.05452763 0.4201722 #> 6 -0.0004907373     0.0000000  0.00000000    0.00000000  0.00000000 0.0000000 #> 7 -0.0920673437    -0.1254760 -0.04659860    0.00000000 -0.06071430 0.0000000 #>    ex_ivfn_fcmconfr <- fcmconfr(   adj_matrices = sample_fcms$simple_fcms$ivfn_fcms,   # adj_matrices = group_ivfn_fcms,   # Aggregation and Monte Carlo Sampling   aggregation_function = 'mean',   monte_carlo_sampling_draws = 100,   # Simulation   initial_state_vector = c(1, 1, 1, 1, 1, 1, 1),   clamping_vector = c(1, 0, 0, 0, 0, 0, 0),   activation = 'rescale',   squashing = 'sigmoid',   lambda = 1,   point_of_inference = \"final\",   max_iter = 1000,   min_error = 1e-05,   # Inference Estimation (bootstrap)   inference_estimation_function = mean,   inference_estimation_CI = 0.95,   inference_estimation_bootstrap_reps = 1000,   # Runtime Options   show_progress = TRUE,   parallel = TRUE,   n_cores = 2,   # Additional Options   perform_aggregate_analysis = TRUE,   perform_monte_carlo_analysis = TRUE,   perform_monte_carlo_inference_bootstrap_analysis = TRUE,   include_zero_weighted_edges_in_aggregation_and_mc_sampling = TRUE,   include_monte_carlo_FCM_simulations_in_output = TRUE ) #> [1] Simulating Input FCMs #> [1] Initializing cluster #> [1] Running Simulations in Parallel #> [1] Sampling from column vectors #> Sampling from column vectors[1] Constructing monte carlo fcms from samples #> Constructing monte carlo fcms from samples[1] Initializing cluster #> [1] Running Simulations in Parallel #> [1] Performing bootstrap simulations #> [1] Initializing cluster #> [1] Sampling means #>    |                                                           |                                                  |   1%   |                                                           |=                                                 |   1%   |                                                           |=                                                 |   2%   |                                                           |=                                                 |   3%   |                                                           |==                                                |   3%   |                                                           |==                                                |   4%   |                                                           |==                                                |   5%   |                                                           |===                                               |   5%   |                                                           |===                                               |   6%   |                                                           |===                                               |   7%   |                                                           |====                                              |   7%   |                                                           |====                                              |   8%   |                                                           |====                                              |   9%   |                                                           |=====                                             |   9%   |                                                           |=====                                             |  10%   |                                                           |=====                                             |  11%   |                                                           |======                                            |  11%   |                                                           |======                                            |  12%   |                                                           |======                                            |  13%   |                                                           |=======                                           |  13%   |                                                           |=======                                           |  14%   |                                                           |=======                                           |  15%   |                                                           |========                                          |  15%   |                                                           |========                                          |  16%   |                                                           |========                                          |  17%   |                                                           |=========                                         |  17%   |                                                           |=========                                         |  18%   |                                                           |=========                                         |  19%   |                                                           |==========                                        |  19%   |                                                           |==========                                        |  20%   |                                                           |==========                                        |  21%   |                                                           |===========                                       |  21%   |                                                           |===========                                       |  22%   |                                                           |===========                                       |  23%   |                                                           |============                                      |  23%   |                                                           |============                                      |  24%   |                                                           |============                                      |  25%   |                                                           |=============                                     |  25%   |                                                           |=============                                     |  26%   |                                                           |=============                                     |  27%   |                                                           |==============                                    |  27%   |                                                           |==============                                    |  28%   |                                                           |==============                                    |  29%   |                                                           |===============                                   |  29%   |                                                           |===============                                   |  30%   |                                                           |===============                                   |  31%   |                                                           |================                                  |  31%   |                                                           |================                                  |  32%   |                                                           |================                                  |  33%   |                                                           |=================                                 |  33%   |                                                           |=================                                 |  34%   |                                                           |=================                                 |  35%   |                                                           |==================                                |  35%   |                                                           |==================                                |  36%   |                                                           |==================                                |  37%   |                                                           |===================                               |  37%   |                                                           |===================                               |  38%   |                                                           |===================                               |  39%   |                                                           |====================                              |  39%   |                                                           |====================                              |  40%   |                                                           |====================                              |  41%   |                                                           |=====================                             |  41%   |                                                           |=====================                             |  42%   |                                                           |=====================                             |  43%   |                                                           |======================                            |  43%   |                                                           |======================                            |  44%   |                                                           |======================                            |  45%   |                                                           |=======================                           |  45%   |                                                           |=======================                           |  46%   |                                                           |=======================                           |  47%   |                                                           |========================                          |  47%   |                                                           |========================                          |  48%   |                                                           |========================                          |  49%   |                                                           |=========================                         |  49%   |                                                           |=========================                         |  50%   |                                                           |=========================                         |  51%   |                                                           |==========================                        |  51%   |                                                           |==========================                        |  52%   |                                                           |==========================                        |  53%   |                                                           |===========================                       |  53%   |                                                           |===========================                       |  54%   |                                                           |===========================                       |  55%   |                                                           |============================                      |  55%   |                                                           |============================                      |  56%   |                                                           |============================                      |  57%   |                                                           |=============================                     |  57%   |                                                           |=============================                     |  58%   |                                                           |=============================                     |  59%   |                                                           |==============================                    |  59%   |                                                           |==============================                    |  60%   |                                                           |==============================                    |  61%   |                                                           |===============================                   |  61%   |                                                           |===============================                   |  62%   |                                                           |===============================                   |  63%   |                                                           |================================                  |  63%   |                                                           |================================                  |  64%   |                                                           |================================                  |  65%   |                                                           |=================================                 |  65%   |                                                           |=================================                 |  66%   |                                                           |=================================                 |  67%   |                                                           |==================================                |  67%   |                                                           |==================================                |  68%   |                                                           |==================================                |  69%   |                                                           |===================================               |  69%   |                                                           |===================================               |  70%   |                                                           |===================================               |  71%   |                                                           |====================================              |  71%   |                                                           |====================================              |  72%   |                                                           |====================================              |  73%   |                                                           |=====================================             |  73%   |                                                           |=====================================             |  74%   |                                                           |=====================================             |  75%   |                                                           |======================================            |  75%   |                                                           |======================================            |  76%   |                                                           |======================================            |  77%   |                                                           |=======================================           |  77%   |                                                           |=======================================           |  78%   |                                                           |=======================================           |  79%   |                                                           |========================================          |  79%   |                                                           |========================================          |  80%   |                                                           |========================================          |  81%   |                                                           |=========================================         |  81%   |                                                           |=========================================         |  82%   |                                                           |=========================================         |  83%   |                                                           |==========================================        |  83%   |                                                           |==========================================        |  84%   |                                                           |==========================================        |  85%   |                                                           |===========================================       |  85%   |                                                           |===========================================       |  86%   |                                                           |===========================================       |  87%   |                                                           |============================================      |  87%   |                                                           |============================================      |  88%   |                                                           |============================================      |  89%   |                                                           |=============================================     |  89%   |                                                           |=============================================     |  90%   |                                                           |=============================================     |  91%   |                                                           |==============================================    |  91%   |                                                           |==============================================    |  92%   |                                                           |==============================================    |  93%   |                                                           |===============================================   |  93%   |                                                           |===============================================   |  94%   |                                                           |===============================================   |  95%   |                                                           |================================================  |  95%   |                                                           |================================================  |  96%   |                                                           |================================================  |  97%   |                                                           |================================================= |  97%   |                                                           |================================================= |  98%   |                                                           |================================================= |  99%   |                                                           |==================================================|  99%   |                                                           |==================================================| 100% #> [1] Done get_inferences(ex_ivfn_fcmconfr, analysis = c(\"input\")) #> $input_inferences #> $input_inferences$Guidance.Docs.for.Salt.Management #>            input crisp lower upper #> 1   adj_matrix_1     1     1     1 #> 2   adj_matrix_2     1     1     1 #> 3   adj_matrix_3     1     1     1 #> 4   adj_matrix_4     1     1     1 #> 5   adj_matrix_5     1     1     1 #> 6   adj_matrix_6     1     1     1 #> 7   adj_matrix_7     1     1     1 #> 8   adj_matrix_8     1     1     1 #> 9   adj_matrix_9     1     1     1 #> 10 adj_matrix_10     1     1     1 #> 11 adj_matrix_11     1     1     1 #> 12 adj_matrix_12     1     1     1 #> 13 adj_matrix_13     1     1     1 #> 14 adj_matrix_14     1     1     1 #> 15 adj_matrix_15     1     1     1 #> 16 adj_matrix_16     1     1     1 #> 17 adj_matrix_17     1     1     1 #> 18 adj_matrix_18     1     1     1 #> 19 adj_matrix_19     1     1     1 #> 20 adj_matrix_20     1     1     1 #> 21 adj_matrix_21     1     1     1 #> 22 adj_matrix_22     1     1     1 #> 23 adj_matrix_23     1     1     1 #> 24 adj_matrix_24     1     1     1 #> 25 adj_matrix_25     1     1     1 #> 26 adj_matrix_26     1     1     1 #> 27 adj_matrix_27     1     1     1 #> 28 adj_matrix_28     1     1     1 #> 29 adj_matrix_29     1     1     1 #> 30 adj_matrix_30     1     1     1 #>  #> $input_inferences$Public.Education.Programs #>            input         crisp         lower         upper #> 1   adj_matrix_1  4.171136e-07  4.171136e-07  4.171136e-07 #> 2   adj_matrix_2  4.238413e-07  4.238413e-07  4.238413e-07 #> 3   adj_matrix_3  1.708820e-06  1.708820e-06  1.708820e-06 #> 4   adj_matrix_4 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 5   adj_matrix_5  4.036584e-07  4.036584e-07  4.036584e-07 #> 6   adj_matrix_6  0.000000e+00  0.000000e+00  0.000000e+00 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9  0.000000e+00  0.000000e+00  0.000000e+00 #> 10 adj_matrix_10  2.085568e-07  2.085568e-07  2.085568e-07 #> 11 adj_matrix_11  6.458534e-07  6.458534e-07  6.458534e-07 #> 12 adj_matrix_12  2.085568e-07  2.085568e-07  2.085568e-07 #> 13 adj_matrix_13 -8.577740e-07 -8.577740e-07 -8.577740e-07 #> 14 adj_matrix_14  1.695365e-06  1.695365e-06  1.695365e-06 #> 15 adj_matrix_15  1.614633e-07  1.614633e-07  1.614633e-07 #> 16 adj_matrix_16  1.872705e-01  4.966353e-02  3.248774e-01 #> 17 adj_matrix_17 -6.458534e-07 -6.458534e-07 -6.458534e-07 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19  0.000000e+00  0.000000e+00  0.000000e+00 #> 20 adj_matrix_20  0.000000e+00  0.000000e+00  0.000000e+00 #> 21 adj_matrix_21  3.767478e-07  3.767478e-07  3.767478e-07 #> 22 adj_matrix_22  8.476826e-07  8.476826e-07  8.476826e-07 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24  5.382112e-08  5.382112e-08  5.382112e-08 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28  8.476826e-07  8.476826e-07  8.476826e-07 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00  0.000000e+00  0.000000e+00 #>  #> $input_inferences$Salts.Added.during.Water.Treatment #>            input         crisp         lower         upper #> 1   adj_matrix_1  4.171136e-07  4.171136e-07  4.171136e-07 #> 2   adj_matrix_2 -3.779376e-06 -7.287071e-06 -2.716813e-07 #> 3   adj_matrix_3  1.708820e-06  1.708820e-06  1.708820e-06 #> 4   adj_matrix_4 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 5   adj_matrix_5  4.036584e-07  4.036584e-07  4.036584e-07 #> 6   adj_matrix_6  0.000000e+00  0.000000e+00  0.000000e+00 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9  0.000000e+00  0.000000e+00  0.000000e+00 #> 10 adj_matrix_10  2.085568e-07  2.085568e-07  2.085568e-07 #> 11 adj_matrix_11  6.458534e-07  6.458534e-07  6.458534e-07 #> 12 adj_matrix_12  2.085568e-07  2.085568e-07  2.085568e-07 #> 13 adj_matrix_13 -8.577740e-07 -8.577740e-07 -8.577740e-07 #> 14 adj_matrix_14  1.695365e-06  1.695365e-06  1.695365e-06 #> 15 adj_matrix_15  1.614633e-07  1.614633e-07  1.614633e-07 #> 16 adj_matrix_16 -2.152845e-07 -2.152845e-07 -2.152845e-07 #> 17 adj_matrix_17 -6.458534e-07 -6.458534e-07 -6.458534e-07 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19  0.000000e+00  0.000000e+00  0.000000e+00 #> 20 adj_matrix_20  0.000000e+00  0.000000e+00  0.000000e+00 #> 21 adj_matrix_21  3.767478e-07  3.767478e-07  3.767478e-07 #> 22 adj_matrix_22  8.476826e-07  8.476826e-07  8.476826e-07 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24  5.382112e-08  5.382112e-08  5.382112e-08 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28  8.476826e-07  8.476826e-07  8.476826e-07 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00  0.000000e+00  0.000000e+00 #>  #> $input_inferences$Salts.Added.by.Winter.Maintenance.Activities #>            input         crisp         lower         upper #> 1   adj_matrix_1 -1.324586e-01 -2.649185e-01  1.263065e-06 #> 2   adj_matrix_2 -2.429619e-01 -3.439474e-01 -1.419764e-01 #> 3   adj_matrix_3 -1.392570e-01 -2.785162e-01  2.126505e-06 #> 4   adj_matrix_4 -1.515965e-01 -3.031966e-01  3.501569e-06 #> 5   adj_matrix_5 -2.533332e-01 -3.439468e-01 -1.627196e-01 #> 6   adj_matrix_6  0.000000e+00 -4.509185e-07  4.509185e-07 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9  0.000000e+00  0.000000e+00  0.000000e+00 #> 10 adj_matrix_10 -2.207092e-01 -3.439468e-01 -9.747165e-02 #> 11 adj_matrix_11 -2.631661e-01 -3.439454e-01 -1.823867e-01 #> 12 adj_matrix_12 -2.342918e-01 -3.439471e-01 -1.246364e-01 #> 13 adj_matrix_13 -1.251995e-01 -2.504168e-01  1.783381e-05 #> 14 adj_matrix_14 -2.207088e-01 -3.439469e-01 -9.747073e-02 #> 15 adj_matrix_15 -2.429610e-01 -3.439467e-01 -1.419752e-01 #> 16 adj_matrix_16 -2.152845e-07 -2.152845e-07 -2.152845e-07 #> 17 adj_matrix_17 -1.092410e-01 -2.184896e-01  7.509039e-06 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19 -1.392563e-01 -2.785142e-01  1.654658e-06 #> 20 adj_matrix_20  0.000000e+00 -9.886287e-07  9.886287e-07 #> 21 adj_matrix_21 -1.252062e-01 -2.504168e-01  4.355196e-06 #> 22 adj_matrix_22 -2.631693e-01 -3.439477e-01 -1.823909e-01 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24 -1.515977e-01 -3.031964e-01  1.042238e-06 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28 -2.533334e-01 -3.439469e-01 -1.627198e-01 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00 -8.650037e-07  8.650037e-07 #>  #> $input_inferences$Ecosystem.Health #>            input      crisp         lower        upper #> 1   adj_matrix_1 0.11848368  6.469253e-02 1.722748e-01 #> 2   adj_matrix_2 0.10334131  6.108397e-02 1.455987e-01 #> 3   adj_matrix_3 0.14414725  8.060473e-02 2.076898e-01 #> 4   adj_matrix_4 0.05314504  2.783340e-02 7.845669e-02 #> 5   adj_matrix_5 0.09929473  5.339747e-02 1.451920e-01 #> 6   adj_matrix_6 0.00000000 -1.650893e-05 1.650893e-05 #> 7   adj_matrix_7 0.00000000 -2.326245e-05 2.326245e-05 #> 8   adj_matrix_8 0.00000000 -3.672809e-06 3.672809e-06 #> 9   adj_matrix_9 0.07890037  3.741838e-02 1.203824e-01 #> 10 adj_matrix_10 0.09557402  6.506459e-02 1.260835e-01 #> 11 adj_matrix_11 0.01881383 -2.289465e-05 3.765054e-02 #> 12 adj_matrix_12 0.11746232  7.565469e-02 1.592699e-01 #> 13 adj_matrix_13 0.02830435  1.310921e-02 4.349949e-02 #> 14 adj_matrix_14 0.28044002  1.754727e-01 3.854074e-01 #> 15 adj_matrix_15 0.06343578  1.306651e-02 1.138050e-01 #> 16 adj_matrix_16 0.05843955 -6.760308e-07 1.168798e-01 #> 17 adj_matrix_17 0.02148693 -2.824574e-05 4.300210e-02 #> 18 adj_matrix_18 0.00000000 -1.668145e-05 1.668145e-05 #> 19 adj_matrix_19 0.06237972  3.608334e-02 8.867611e-02 #> 20 adj_matrix_20 0.00000000 -1.281902e-05 1.281902e-05 #> 21 adj_matrix_21 0.01991903  3.973270e-03 3.586478e-02 #> 22 adj_matrix_22 0.07085993  1.471456e-02 1.270053e-01 #> 23 adj_matrix_23 0.13203311  9.154776e-02 1.725185e-01 #> 24 adj_matrix_24 0.07989979  5.405402e-02 1.057456e-01 #> 25 adj_matrix_25 0.00000000 -8.449817e-06 8.449817e-06 #> 26 adj_matrix_26 0.00000000  0.000000e+00 0.000000e+00 #> 27 adj_matrix_27 0.00000000 -2.136079e-05 2.136079e-05 #> 28 adj_matrix_28 0.17694378  1.111561e-01 2.427314e-01 #> 29 adj_matrix_29 0.00000000 -1.648369e-05 1.648369e-05 #> 30 adj_matrix_30 0.00000000 -1.613378e-05 1.613378e-05 #>  #> $input_inferences$Public.Awareness.of.Reservoir.Salinization #>            input         crisp         lower         upper #> 1   adj_matrix_1  4.171136e-07  4.171136e-07  4.171136e-07 #> 2   adj_matrix_2  4.238413e-07  4.238413e-07  4.238413e-07 #> 3   adj_matrix_3  1.708820e-06  1.708820e-06  1.708820e-06 #> 4   adj_matrix_4 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 5   adj_matrix_5  4.036584e-07  4.036584e-07  4.036584e-07 #> 6   adj_matrix_6  0.000000e+00  0.000000e+00  0.000000e+00 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9  0.000000e+00  0.000000e+00  0.000000e+00 #> 10 adj_matrix_10  2.085568e-07  2.085568e-07  2.085568e-07 #> 11 adj_matrix_11  6.458534e-07  6.458534e-07  6.458534e-07 #> 12 adj_matrix_12  2.085568e-07  2.085568e-07  2.085568e-07 #> 13 adj_matrix_13 -8.577740e-07 -8.577740e-07 -8.577740e-07 #> 14 adj_matrix_14  1.695365e-06  1.695365e-06  1.695365e-06 #> 15 adj_matrix_15  1.614633e-07  1.614633e-07  1.614633e-07 #> 16 adj_matrix_16 -2.152845e-07 -2.152845e-07 -2.152845e-07 #> 17 adj_matrix_17 -6.458534e-07 -6.458534e-07 -6.458534e-07 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19  0.000000e+00  0.000000e+00  0.000000e+00 #> 20 adj_matrix_20  0.000000e+00  0.000000e+00  0.000000e+00 #> 21 adj_matrix_21 -1.196956e-02 -2.395658e-02  1.746007e-05 #> 22 adj_matrix_22  8.476826e-07  8.476826e-07  8.476826e-07 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24  5.382112e-08  5.382112e-08  5.382112e-08 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28  8.476826e-07  8.476826e-07  8.476826e-07 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00  0.000000e+00  0.000000e+00 #>  #> $input_inferences$Salinization.of.the.Reservoir #>            input       crisp         lower         upper #> 1   adj_matrix_1 -0.18698522 -3.278790e-01 -4.609143e-02 #> 2   adj_matrix_2 -0.15426504 -2.136746e-01 -9.485554e-02 #> 3   adj_matrix_3 -0.23441846 -3.725386e-01 -9.629834e-02 #> 4   adj_matrix_4 -0.07977586 -1.368576e-01 -2.269413e-02 #> 5   adj_matrix_5 -0.15381088 -2.207422e-01 -8.687954e-02 #> 6   adj_matrix_6  0.00000000 -2.103436e-06  2.103436e-06 #> 7   adj_matrix_7  0.00000000 -6.586473e-06  6.586473e-06 #> 8   adj_matrix_8  0.00000000 -8.743405e-07  8.743405e-07 #> 9   adj_matrix_9 -0.12520673 -2.504205e-01  7.038508e-06 #> 10 adj_matrix_10 -0.13165738 -1.978625e-01 -6.545225e-02 #> 11 adj_matrix_11 -0.06300826 -1.260312e-01  1.466273e-05 #> 12 adj_matrix_12 -0.17074752 -2.076103e-01 -1.338848e-01 #> 13 adj_matrix_13 -0.04372179 -8.748446e-02  4.087751e-05 #> 14 adj_matrix_14 -0.13695270 -1.978584e-01 -7.604704e-02 #> 15 adj_matrix_15 -0.13097225 -2.136648e-01 -4.827970e-02 #> 16 adj_matrix_16 -0.15159784 -3.032049e-01  9.271562e-06 #> 17 adj_matrix_17 -0.07201974 -1.059742e-01 -3.806530e-02 #> 18 adj_matrix_18  0.00000000 -8.926425e-07  8.926425e-07 #> 19 adj_matrix_19 -0.09058375 -1.327392e-01 -4.842825e-02 #> 20 adj_matrix_20  0.00000000 -5.043371e-06  5.043371e-06 #> 21 adj_matrix_21 -0.03999414 -7.999894e-02  1.066973e-05 #> 22 adj_matrix_22 -0.14743918 -2.272914e-01 -6.758692e-02 #> 23 adj_matrix_23 -0.18727439 -3.248824e-01 -4.966640e-02 #> 24 adj_matrix_24 -0.10900006 -1.433314e-01 -7.466872e-02 #> 25 adj_matrix_25  0.00000000 -1.501920e-06  1.501920e-06 #> 26 adj_matrix_26  0.00000000 -2.008037e-05  2.008037e-05 #> 27 adj_matrix_27  0.00000000 -2.783859e-06  2.783859e-06 #> 28 adj_matrix_28 -0.28739316 -4.112664e-01 -1.635199e-01 #> 29 adj_matrix_29  0.00000000 -5.991399e-06  5.991399e-06 #> 30 adj_matrix_30  0.00000000 -3.572937e-06  3.572937e-06 #>  #>  get_inferences(ex_ivfn_fcmconfr, analysis = c(\"input\", \"aggregate\")) #> $input_inferences #> $input_inferences$Guidance.Docs.for.Salt.Management #>            input crisp lower upper #> 1   adj_matrix_1     1     1     1 #> 2   adj_matrix_2     1     1     1 #> 3   adj_matrix_3     1     1     1 #> 4   adj_matrix_4     1     1     1 #> 5   adj_matrix_5     1     1     1 #> 6   adj_matrix_6     1     1     1 #> 7   adj_matrix_7     1     1     1 #> 8   adj_matrix_8     1     1     1 #> 9   adj_matrix_9     1     1     1 #> 10 adj_matrix_10     1     1     1 #> 11 adj_matrix_11     1     1     1 #> 12 adj_matrix_12     1     1     1 #> 13 adj_matrix_13     1     1     1 #> 14 adj_matrix_14     1     1     1 #> 15 adj_matrix_15     1     1     1 #> 16 adj_matrix_16     1     1     1 #> 17 adj_matrix_17     1     1     1 #> 18 adj_matrix_18     1     1     1 #> 19 adj_matrix_19     1     1     1 #> 20 adj_matrix_20     1     1     1 #> 21 adj_matrix_21     1     1     1 #> 22 adj_matrix_22     1     1     1 #> 23 adj_matrix_23     1     1     1 #> 24 adj_matrix_24     1     1     1 #> 25 adj_matrix_25     1     1     1 #> 26 adj_matrix_26     1     1     1 #> 27 adj_matrix_27     1     1     1 #> 28 adj_matrix_28     1     1     1 #> 29 adj_matrix_29     1     1     1 #> 30 adj_matrix_30     1     1     1 #>  #> $input_inferences$Public.Education.Programs #>            input         crisp         lower         upper #> 1   adj_matrix_1  4.171136e-07  4.171136e-07  4.171136e-07 #> 2   adj_matrix_2  4.238413e-07  4.238413e-07  4.238413e-07 #> 3   adj_matrix_3  1.708820e-06  1.708820e-06  1.708820e-06 #> 4   adj_matrix_4 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 5   adj_matrix_5  4.036584e-07  4.036584e-07  4.036584e-07 #> 6   adj_matrix_6  0.000000e+00  0.000000e+00  0.000000e+00 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9  0.000000e+00  0.000000e+00  0.000000e+00 #> 10 adj_matrix_10  2.085568e-07  2.085568e-07  2.085568e-07 #> 11 adj_matrix_11  6.458534e-07  6.458534e-07  6.458534e-07 #> 12 adj_matrix_12  2.085568e-07  2.085568e-07  2.085568e-07 #> 13 adj_matrix_13 -8.577740e-07 -8.577740e-07 -8.577740e-07 #> 14 adj_matrix_14  1.695365e-06  1.695365e-06  1.695365e-06 #> 15 adj_matrix_15  1.614633e-07  1.614633e-07  1.614633e-07 #> 16 adj_matrix_16  1.872705e-01  4.966353e-02  3.248774e-01 #> 17 adj_matrix_17 -6.458534e-07 -6.458534e-07 -6.458534e-07 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19  0.000000e+00  0.000000e+00  0.000000e+00 #> 20 adj_matrix_20  0.000000e+00  0.000000e+00  0.000000e+00 #> 21 adj_matrix_21  3.767478e-07  3.767478e-07  3.767478e-07 #> 22 adj_matrix_22  8.476826e-07  8.476826e-07  8.476826e-07 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24  5.382112e-08  5.382112e-08  5.382112e-08 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28  8.476826e-07  8.476826e-07  8.476826e-07 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00  0.000000e+00  0.000000e+00 #>  #> $input_inferences$Salts.Added.during.Water.Treatment #>            input         crisp         lower         upper #> 1   adj_matrix_1  4.171136e-07  4.171136e-07  4.171136e-07 #> 2   adj_matrix_2 -3.779376e-06 -7.287071e-06 -2.716813e-07 #> 3   adj_matrix_3  1.708820e-06  1.708820e-06  1.708820e-06 #> 4   adj_matrix_4 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 5   adj_matrix_5  4.036584e-07  4.036584e-07  4.036584e-07 #> 6   adj_matrix_6  0.000000e+00  0.000000e+00  0.000000e+00 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9  0.000000e+00  0.000000e+00  0.000000e+00 #> 10 adj_matrix_10  2.085568e-07  2.085568e-07  2.085568e-07 #> 11 adj_matrix_11  6.458534e-07  6.458534e-07  6.458534e-07 #> 12 adj_matrix_12  2.085568e-07  2.085568e-07  2.085568e-07 #> 13 adj_matrix_13 -8.577740e-07 -8.577740e-07 -8.577740e-07 #> 14 adj_matrix_14  1.695365e-06  1.695365e-06  1.695365e-06 #> 15 adj_matrix_15  1.614633e-07  1.614633e-07  1.614633e-07 #> 16 adj_matrix_16 -2.152845e-07 -2.152845e-07 -2.152845e-07 #> 17 adj_matrix_17 -6.458534e-07 -6.458534e-07 -6.458534e-07 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19  0.000000e+00  0.000000e+00  0.000000e+00 #> 20 adj_matrix_20  0.000000e+00  0.000000e+00  0.000000e+00 #> 21 adj_matrix_21  3.767478e-07  3.767478e-07  3.767478e-07 #> 22 adj_matrix_22  8.476826e-07  8.476826e-07  8.476826e-07 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24  5.382112e-08  5.382112e-08  5.382112e-08 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28  8.476826e-07  8.476826e-07  8.476826e-07 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00  0.000000e+00  0.000000e+00 #>  #> $input_inferences$Salts.Added.by.Winter.Maintenance.Activities #>            input         crisp         lower         upper #> 1   adj_matrix_1 -1.324586e-01 -2.649185e-01  1.263065e-06 #> 2   adj_matrix_2 -2.429619e-01 -3.439474e-01 -1.419764e-01 #> 3   adj_matrix_3 -1.392570e-01 -2.785162e-01  2.126505e-06 #> 4   adj_matrix_4 -1.515965e-01 -3.031966e-01  3.501569e-06 #> 5   adj_matrix_5 -2.533332e-01 -3.439468e-01 -1.627196e-01 #> 6   adj_matrix_6  0.000000e+00 -4.509185e-07  4.509185e-07 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9  0.000000e+00  0.000000e+00  0.000000e+00 #> 10 adj_matrix_10 -2.207092e-01 -3.439468e-01 -9.747165e-02 #> 11 adj_matrix_11 -2.631661e-01 -3.439454e-01 -1.823867e-01 #> 12 adj_matrix_12 -2.342918e-01 -3.439471e-01 -1.246364e-01 #> 13 adj_matrix_13 -1.251995e-01 -2.504168e-01  1.783381e-05 #> 14 adj_matrix_14 -2.207088e-01 -3.439469e-01 -9.747073e-02 #> 15 adj_matrix_15 -2.429610e-01 -3.439467e-01 -1.419752e-01 #> 16 adj_matrix_16 -2.152845e-07 -2.152845e-07 -2.152845e-07 #> 17 adj_matrix_17 -1.092410e-01 -2.184896e-01  7.509039e-06 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19 -1.392563e-01 -2.785142e-01  1.654658e-06 #> 20 adj_matrix_20  0.000000e+00 -9.886287e-07  9.886287e-07 #> 21 adj_matrix_21 -1.252062e-01 -2.504168e-01  4.355196e-06 #> 22 adj_matrix_22 -2.631693e-01 -3.439477e-01 -1.823909e-01 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24 -1.515977e-01 -3.031964e-01  1.042238e-06 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28 -2.533334e-01 -3.439469e-01 -1.627198e-01 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00 -8.650037e-07  8.650037e-07 #>  #> $input_inferences$Ecosystem.Health #>            input      crisp         lower        upper #> 1   adj_matrix_1 0.11848368  6.469253e-02 1.722748e-01 #> 2   adj_matrix_2 0.10334131  6.108397e-02 1.455987e-01 #> 3   adj_matrix_3 0.14414725  8.060473e-02 2.076898e-01 #> 4   adj_matrix_4 0.05314504  2.783340e-02 7.845669e-02 #> 5   adj_matrix_5 0.09929473  5.339747e-02 1.451920e-01 #> 6   adj_matrix_6 0.00000000 -1.650893e-05 1.650893e-05 #> 7   adj_matrix_7 0.00000000 -2.326245e-05 2.326245e-05 #> 8   adj_matrix_8 0.00000000 -3.672809e-06 3.672809e-06 #> 9   adj_matrix_9 0.07890037  3.741838e-02 1.203824e-01 #> 10 adj_matrix_10 0.09557402  6.506459e-02 1.260835e-01 #> 11 adj_matrix_11 0.01881383 -2.289465e-05 3.765054e-02 #> 12 adj_matrix_12 0.11746232  7.565469e-02 1.592699e-01 #> 13 adj_matrix_13 0.02830435  1.310921e-02 4.349949e-02 #> 14 adj_matrix_14 0.28044002  1.754727e-01 3.854074e-01 #> 15 adj_matrix_15 0.06343578  1.306651e-02 1.138050e-01 #> 16 adj_matrix_16 0.05843955 -6.760308e-07 1.168798e-01 #> 17 adj_matrix_17 0.02148693 -2.824574e-05 4.300210e-02 #> 18 adj_matrix_18 0.00000000 -1.668145e-05 1.668145e-05 #> 19 adj_matrix_19 0.06237972  3.608334e-02 8.867611e-02 #> 20 adj_matrix_20 0.00000000 -1.281902e-05 1.281902e-05 #> 21 adj_matrix_21 0.01991903  3.973270e-03 3.586478e-02 #> 22 adj_matrix_22 0.07085993  1.471456e-02 1.270053e-01 #> 23 adj_matrix_23 0.13203311  9.154776e-02 1.725185e-01 #> 24 adj_matrix_24 0.07989979  5.405402e-02 1.057456e-01 #> 25 adj_matrix_25 0.00000000 -8.449817e-06 8.449817e-06 #> 26 adj_matrix_26 0.00000000  0.000000e+00 0.000000e+00 #> 27 adj_matrix_27 0.00000000 -2.136079e-05 2.136079e-05 #> 28 adj_matrix_28 0.17694378  1.111561e-01 2.427314e-01 #> 29 adj_matrix_29 0.00000000 -1.648369e-05 1.648369e-05 #> 30 adj_matrix_30 0.00000000 -1.613378e-05 1.613378e-05 #>  #> $input_inferences$Public.Awareness.of.Reservoir.Salinization #>            input         crisp         lower         upper #> 1   adj_matrix_1  4.171136e-07  4.171136e-07  4.171136e-07 #> 2   adj_matrix_2  4.238413e-07  4.238413e-07  4.238413e-07 #> 3   adj_matrix_3  1.708820e-06  1.708820e-06  1.708820e-06 #> 4   adj_matrix_4 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 5   adj_matrix_5  4.036584e-07  4.036584e-07  4.036584e-07 #> 6   adj_matrix_6  0.000000e+00  0.000000e+00  0.000000e+00 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9  0.000000e+00  0.000000e+00  0.000000e+00 #> 10 adj_matrix_10  2.085568e-07  2.085568e-07  2.085568e-07 #> 11 adj_matrix_11  6.458534e-07  6.458534e-07  6.458534e-07 #> 12 adj_matrix_12  2.085568e-07  2.085568e-07  2.085568e-07 #> 13 adj_matrix_13 -8.577740e-07 -8.577740e-07 -8.577740e-07 #> 14 adj_matrix_14  1.695365e-06  1.695365e-06  1.695365e-06 #> 15 adj_matrix_15  1.614633e-07  1.614633e-07  1.614633e-07 #> 16 adj_matrix_16 -2.152845e-07 -2.152845e-07 -2.152845e-07 #> 17 adj_matrix_17 -6.458534e-07 -6.458534e-07 -6.458534e-07 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19  0.000000e+00  0.000000e+00  0.000000e+00 #> 20 adj_matrix_20  0.000000e+00  0.000000e+00  0.000000e+00 #> 21 adj_matrix_21 -1.196956e-02 -2.395658e-02  1.746007e-05 #> 22 adj_matrix_22  8.476826e-07  8.476826e-07  8.476826e-07 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24  5.382112e-08  5.382112e-08  5.382112e-08 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28  8.476826e-07  8.476826e-07  8.476826e-07 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00  0.000000e+00  0.000000e+00 #>  #> $input_inferences$Salinization.of.the.Reservoir #>            input       crisp         lower         upper #> 1   adj_matrix_1 -0.18698522 -3.278790e-01 -4.609143e-02 #> 2   adj_matrix_2 -0.15426504 -2.136746e-01 -9.485554e-02 #> 3   adj_matrix_3 -0.23441846 -3.725386e-01 -9.629834e-02 #> 4   adj_matrix_4 -0.07977586 -1.368576e-01 -2.269413e-02 #> 5   adj_matrix_5 -0.15381088 -2.207422e-01 -8.687954e-02 #> 6   adj_matrix_6  0.00000000 -2.103436e-06  2.103436e-06 #> 7   adj_matrix_7  0.00000000 -6.586473e-06  6.586473e-06 #> 8   adj_matrix_8  0.00000000 -8.743405e-07  8.743405e-07 #> 9   adj_matrix_9 -0.12520673 -2.504205e-01  7.038508e-06 #> 10 adj_matrix_10 -0.13165738 -1.978625e-01 -6.545225e-02 #> 11 adj_matrix_11 -0.06300826 -1.260312e-01  1.466273e-05 #> 12 adj_matrix_12 -0.17074752 -2.076103e-01 -1.338848e-01 #> 13 adj_matrix_13 -0.04372179 -8.748446e-02  4.087751e-05 #> 14 adj_matrix_14 -0.13695270 -1.978584e-01 -7.604704e-02 #> 15 adj_matrix_15 -0.13097225 -2.136648e-01 -4.827970e-02 #> 16 adj_matrix_16 -0.15159784 -3.032049e-01  9.271562e-06 #> 17 adj_matrix_17 -0.07201974 -1.059742e-01 -3.806530e-02 #> 18 adj_matrix_18  0.00000000 -8.926425e-07  8.926425e-07 #> 19 adj_matrix_19 -0.09058375 -1.327392e-01 -4.842825e-02 #> 20 adj_matrix_20  0.00000000 -5.043371e-06  5.043371e-06 #> 21 adj_matrix_21 -0.03999414 -7.999894e-02  1.066973e-05 #> 22 adj_matrix_22 -0.14743918 -2.272914e-01 -6.758692e-02 #> 23 adj_matrix_23 -0.18727439 -3.248824e-01 -4.966640e-02 #> 24 adj_matrix_24 -0.10900006 -1.433314e-01 -7.466872e-02 #> 25 adj_matrix_25  0.00000000 -1.501920e-06  1.501920e-06 #> 26 adj_matrix_26  0.00000000 -2.008037e-05  2.008037e-05 #> 27 adj_matrix_27  0.00000000 -2.783859e-06  2.783859e-06 #> 28 adj_matrix_28 -0.28739316 -4.112664e-01 -1.635199e-01 #> 29 adj_matrix_29  0.00000000 -5.991399e-06  5.991399e-06 #> 30 adj_matrix_30  0.00000000 -3.572937e-06  3.572937e-06 #>  #>  #> $aggregate_inferences #>           input Guidance.Docs.for.Salt.Management Public.Education.Programs #> final aggregate                              1, 1  0.001666765, 0.014991153 #>       Salts.Added.during.Water.Treatment #> final       -2.498283e-04, -2.757085e-05 #>       Salts.Added.by.Winter.Maintenance.Activities       Ecosystem.Health #> final                     -0.21240239, -0.04604259 0.03268942, 0.11233170 #>       Public.Awareness.of.Reservoir.Salinization Salinization.of.the.Reservoir #> final                -2.297476e-03, 6.008910e-07      -0.18569597, -0.04408913 #>  get_inferences(ex_ivfn_fcmconfr, analysis = c(\"input\", \"aggregate\", \"mc\")) #> $input_inferences #> $input_inferences$Guidance.Docs.for.Salt.Management #>            input crisp lower upper #> 1   adj_matrix_1     1     1     1 #> 2   adj_matrix_2     1     1     1 #> 3   adj_matrix_3     1     1     1 #> 4   adj_matrix_4     1     1     1 #> 5   adj_matrix_5     1     1     1 #> 6   adj_matrix_6     1     1     1 #> 7   adj_matrix_7     1     1     1 #> 8   adj_matrix_8     1     1     1 #> 9   adj_matrix_9     1     1     1 #> 10 adj_matrix_10     1     1     1 #> 11 adj_matrix_11     1     1     1 #> 12 adj_matrix_12     1     1     1 #> 13 adj_matrix_13     1     1     1 #> 14 adj_matrix_14     1     1     1 #> 15 adj_matrix_15     1     1     1 #> 16 adj_matrix_16     1     1     1 #> 17 adj_matrix_17     1     1     1 #> 18 adj_matrix_18     1     1     1 #> 19 adj_matrix_19     1     1     1 #> 20 adj_matrix_20     1     1     1 #> 21 adj_matrix_21     1     1     1 #> 22 adj_matrix_22     1     1     1 #> 23 adj_matrix_23     1     1     1 #> 24 adj_matrix_24     1     1     1 #> 25 adj_matrix_25     1     1     1 #> 26 adj_matrix_26     1     1     1 #> 27 adj_matrix_27     1     1     1 #> 28 adj_matrix_28     1     1     1 #> 29 adj_matrix_29     1     1     1 #> 30 adj_matrix_30     1     1     1 #>  #> $input_inferences$Public.Education.Programs #>            input         crisp         lower         upper #> 1   adj_matrix_1  4.171136e-07  4.171136e-07  4.171136e-07 #> 2   adj_matrix_2  4.238413e-07  4.238413e-07  4.238413e-07 #> 3   adj_matrix_3  1.708820e-06  1.708820e-06  1.708820e-06 #> 4   adj_matrix_4 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 5   adj_matrix_5  4.036584e-07  4.036584e-07  4.036584e-07 #> 6   adj_matrix_6  0.000000e+00  0.000000e+00  0.000000e+00 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9  0.000000e+00  0.000000e+00  0.000000e+00 #> 10 adj_matrix_10  2.085568e-07  2.085568e-07  2.085568e-07 #> 11 adj_matrix_11  6.458534e-07  6.458534e-07  6.458534e-07 #> 12 adj_matrix_12  2.085568e-07  2.085568e-07  2.085568e-07 #> 13 adj_matrix_13 -8.577740e-07 -8.577740e-07 -8.577740e-07 #> 14 adj_matrix_14  1.695365e-06  1.695365e-06  1.695365e-06 #> 15 adj_matrix_15  1.614633e-07  1.614633e-07  1.614633e-07 #> 16 adj_matrix_16  1.872705e-01  4.966353e-02  3.248774e-01 #> 17 adj_matrix_17 -6.458534e-07 -6.458534e-07 -6.458534e-07 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19  0.000000e+00  0.000000e+00  0.000000e+00 #> 20 adj_matrix_20  0.000000e+00  0.000000e+00  0.000000e+00 #> 21 adj_matrix_21  3.767478e-07  3.767478e-07  3.767478e-07 #> 22 adj_matrix_22  8.476826e-07  8.476826e-07  8.476826e-07 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24  5.382112e-08  5.382112e-08  5.382112e-08 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28  8.476826e-07  8.476826e-07  8.476826e-07 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00  0.000000e+00  0.000000e+00 #>  #> $input_inferences$Salts.Added.during.Water.Treatment #>            input         crisp         lower         upper #> 1   adj_matrix_1  4.171136e-07  4.171136e-07  4.171136e-07 #> 2   adj_matrix_2 -3.779376e-06 -7.287071e-06 -2.716813e-07 #> 3   adj_matrix_3  1.708820e-06  1.708820e-06  1.708820e-06 #> 4   adj_matrix_4 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 5   adj_matrix_5  4.036584e-07  4.036584e-07  4.036584e-07 #> 6   adj_matrix_6  0.000000e+00  0.000000e+00  0.000000e+00 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9  0.000000e+00  0.000000e+00  0.000000e+00 #> 10 adj_matrix_10  2.085568e-07  2.085568e-07  2.085568e-07 #> 11 adj_matrix_11  6.458534e-07  6.458534e-07  6.458534e-07 #> 12 adj_matrix_12  2.085568e-07  2.085568e-07  2.085568e-07 #> 13 adj_matrix_13 -8.577740e-07 -8.577740e-07 -8.577740e-07 #> 14 adj_matrix_14  1.695365e-06  1.695365e-06  1.695365e-06 #> 15 adj_matrix_15  1.614633e-07  1.614633e-07  1.614633e-07 #> 16 adj_matrix_16 -2.152845e-07 -2.152845e-07 -2.152845e-07 #> 17 adj_matrix_17 -6.458534e-07 -6.458534e-07 -6.458534e-07 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19  0.000000e+00  0.000000e+00  0.000000e+00 #> 20 adj_matrix_20  0.000000e+00  0.000000e+00  0.000000e+00 #> 21 adj_matrix_21  3.767478e-07  3.767478e-07  3.767478e-07 #> 22 adj_matrix_22  8.476826e-07  8.476826e-07  8.476826e-07 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24  5.382112e-08  5.382112e-08  5.382112e-08 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28  8.476826e-07  8.476826e-07  8.476826e-07 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00  0.000000e+00  0.000000e+00 #>  #> $input_inferences$Salts.Added.by.Winter.Maintenance.Activities #>            input         crisp         lower         upper #> 1   adj_matrix_1 -1.324586e-01 -2.649185e-01  1.263065e-06 #> 2   adj_matrix_2 -2.429619e-01 -3.439474e-01 -1.419764e-01 #> 3   adj_matrix_3 -1.392570e-01 -2.785162e-01  2.126505e-06 #> 4   adj_matrix_4 -1.515965e-01 -3.031966e-01  3.501569e-06 #> 5   adj_matrix_5 -2.533332e-01 -3.439468e-01 -1.627196e-01 #> 6   adj_matrix_6  0.000000e+00 -4.509185e-07  4.509185e-07 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9  0.000000e+00  0.000000e+00  0.000000e+00 #> 10 adj_matrix_10 -2.207092e-01 -3.439468e-01 -9.747165e-02 #> 11 adj_matrix_11 -2.631661e-01 -3.439454e-01 -1.823867e-01 #> 12 adj_matrix_12 -2.342918e-01 -3.439471e-01 -1.246364e-01 #> 13 adj_matrix_13 -1.251995e-01 -2.504168e-01  1.783381e-05 #> 14 adj_matrix_14 -2.207088e-01 -3.439469e-01 -9.747073e-02 #> 15 adj_matrix_15 -2.429610e-01 -3.439467e-01 -1.419752e-01 #> 16 adj_matrix_16 -2.152845e-07 -2.152845e-07 -2.152845e-07 #> 17 adj_matrix_17 -1.092410e-01 -2.184896e-01  7.509039e-06 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19 -1.392563e-01 -2.785142e-01  1.654658e-06 #> 20 adj_matrix_20  0.000000e+00 -9.886287e-07  9.886287e-07 #> 21 adj_matrix_21 -1.252062e-01 -2.504168e-01  4.355196e-06 #> 22 adj_matrix_22 -2.631693e-01 -3.439477e-01 -1.823909e-01 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24 -1.515977e-01 -3.031964e-01  1.042238e-06 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28 -2.533334e-01 -3.439469e-01 -1.627198e-01 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00 -8.650037e-07  8.650037e-07 #>  #> $input_inferences$Ecosystem.Health #>            input      crisp         lower        upper #> 1   adj_matrix_1 0.11848368  6.469253e-02 1.722748e-01 #> 2   adj_matrix_2 0.10334131  6.108397e-02 1.455987e-01 #> 3   adj_matrix_3 0.14414725  8.060473e-02 2.076898e-01 #> 4   adj_matrix_4 0.05314504  2.783340e-02 7.845669e-02 #> 5   adj_matrix_5 0.09929473  5.339747e-02 1.451920e-01 #> 6   adj_matrix_6 0.00000000 -1.650893e-05 1.650893e-05 #> 7   adj_matrix_7 0.00000000 -2.326245e-05 2.326245e-05 #> 8   adj_matrix_8 0.00000000 -3.672809e-06 3.672809e-06 #> 9   adj_matrix_9 0.07890037  3.741838e-02 1.203824e-01 #> 10 adj_matrix_10 0.09557402  6.506459e-02 1.260835e-01 #> 11 adj_matrix_11 0.01881383 -2.289465e-05 3.765054e-02 #> 12 adj_matrix_12 0.11746232  7.565469e-02 1.592699e-01 #> 13 adj_matrix_13 0.02830435  1.310921e-02 4.349949e-02 #> 14 adj_matrix_14 0.28044002  1.754727e-01 3.854074e-01 #> 15 adj_matrix_15 0.06343578  1.306651e-02 1.138050e-01 #> 16 adj_matrix_16 0.05843955 -6.760308e-07 1.168798e-01 #> 17 adj_matrix_17 0.02148693 -2.824574e-05 4.300210e-02 #> 18 adj_matrix_18 0.00000000 -1.668145e-05 1.668145e-05 #> 19 adj_matrix_19 0.06237972  3.608334e-02 8.867611e-02 #> 20 adj_matrix_20 0.00000000 -1.281902e-05 1.281902e-05 #> 21 adj_matrix_21 0.01991903  3.973270e-03 3.586478e-02 #> 22 adj_matrix_22 0.07085993  1.471456e-02 1.270053e-01 #> 23 adj_matrix_23 0.13203311  9.154776e-02 1.725185e-01 #> 24 adj_matrix_24 0.07989979  5.405402e-02 1.057456e-01 #> 25 adj_matrix_25 0.00000000 -8.449817e-06 8.449817e-06 #> 26 adj_matrix_26 0.00000000  0.000000e+00 0.000000e+00 #> 27 adj_matrix_27 0.00000000 -2.136079e-05 2.136079e-05 #> 28 adj_matrix_28 0.17694378  1.111561e-01 2.427314e-01 #> 29 adj_matrix_29 0.00000000 -1.648369e-05 1.648369e-05 #> 30 adj_matrix_30 0.00000000 -1.613378e-05 1.613378e-05 #>  #> $input_inferences$Public.Awareness.of.Reservoir.Salinization #>            input         crisp         lower         upper #> 1   adj_matrix_1  4.171136e-07  4.171136e-07  4.171136e-07 #> 2   adj_matrix_2  4.238413e-07  4.238413e-07  4.238413e-07 #> 3   adj_matrix_3  1.708820e-06  1.708820e-06  1.708820e-06 #> 4   adj_matrix_4 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 5   adj_matrix_5  4.036584e-07  4.036584e-07  4.036584e-07 #> 6   adj_matrix_6  0.000000e+00  0.000000e+00  0.000000e+00 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9  0.000000e+00  0.000000e+00  0.000000e+00 #> 10 adj_matrix_10  2.085568e-07  2.085568e-07  2.085568e-07 #> 11 adj_matrix_11  6.458534e-07  6.458534e-07  6.458534e-07 #> 12 adj_matrix_12  2.085568e-07  2.085568e-07  2.085568e-07 #> 13 adj_matrix_13 -8.577740e-07 -8.577740e-07 -8.577740e-07 #> 14 adj_matrix_14  1.695365e-06  1.695365e-06  1.695365e-06 #> 15 adj_matrix_15  1.614633e-07  1.614633e-07  1.614633e-07 #> 16 adj_matrix_16 -2.152845e-07 -2.152845e-07 -2.152845e-07 #> 17 adj_matrix_17 -6.458534e-07 -6.458534e-07 -6.458534e-07 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19  0.000000e+00  0.000000e+00  0.000000e+00 #> 20 adj_matrix_20  0.000000e+00  0.000000e+00  0.000000e+00 #> 21 adj_matrix_21 -1.196956e-02 -2.395658e-02  1.746007e-05 #> 22 adj_matrix_22  8.476826e-07  8.476826e-07  8.476826e-07 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24  5.382112e-08  5.382112e-08  5.382112e-08 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28  8.476826e-07  8.476826e-07  8.476826e-07 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00  0.000000e+00  0.000000e+00 #>  #> $input_inferences$Salinization.of.the.Reservoir #>            input       crisp         lower         upper #> 1   adj_matrix_1 -0.18698522 -3.278790e-01 -4.609143e-02 #> 2   adj_matrix_2 -0.15426504 -2.136746e-01 -9.485554e-02 #> 3   adj_matrix_3 -0.23441846 -3.725386e-01 -9.629834e-02 #> 4   adj_matrix_4 -0.07977586 -1.368576e-01 -2.269413e-02 #> 5   adj_matrix_5 -0.15381088 -2.207422e-01 -8.687954e-02 #> 6   adj_matrix_6  0.00000000 -2.103436e-06  2.103436e-06 #> 7   adj_matrix_7  0.00000000 -6.586473e-06  6.586473e-06 #> 8   adj_matrix_8  0.00000000 -8.743405e-07  8.743405e-07 #> 9   adj_matrix_9 -0.12520673 -2.504205e-01  7.038508e-06 #> 10 adj_matrix_10 -0.13165738 -1.978625e-01 -6.545225e-02 #> 11 adj_matrix_11 -0.06300826 -1.260312e-01  1.466273e-05 #> 12 adj_matrix_12 -0.17074752 -2.076103e-01 -1.338848e-01 #> 13 adj_matrix_13 -0.04372179 -8.748446e-02  4.087751e-05 #> 14 adj_matrix_14 -0.13695270 -1.978584e-01 -7.604704e-02 #> 15 adj_matrix_15 -0.13097225 -2.136648e-01 -4.827970e-02 #> 16 adj_matrix_16 -0.15159784 -3.032049e-01  9.271562e-06 #> 17 adj_matrix_17 -0.07201974 -1.059742e-01 -3.806530e-02 #> 18 adj_matrix_18  0.00000000 -8.926425e-07  8.926425e-07 #> 19 adj_matrix_19 -0.09058375 -1.327392e-01 -4.842825e-02 #> 20 adj_matrix_20  0.00000000 -5.043371e-06  5.043371e-06 #> 21 adj_matrix_21 -0.03999414 -7.999894e-02  1.066973e-05 #> 22 adj_matrix_22 -0.14743918 -2.272914e-01 -6.758692e-02 #> 23 adj_matrix_23 -0.18727439 -3.248824e-01 -4.966640e-02 #> 24 adj_matrix_24 -0.10900006 -1.433314e-01 -7.466872e-02 #> 25 adj_matrix_25  0.00000000 -1.501920e-06  1.501920e-06 #> 26 adj_matrix_26  0.00000000 -2.008037e-05  2.008037e-05 #> 27 adj_matrix_27  0.00000000 -2.783859e-06  2.783859e-06 #> 28 adj_matrix_28 -0.28739316 -4.112664e-01 -1.635199e-01 #> 29 adj_matrix_29  0.00000000 -5.991399e-06  5.991399e-06 #> 30 adj_matrix_30  0.00000000 -3.572937e-06  3.572937e-06 #>  #>  #> $aggregate_inferences #>           input Guidance.Docs.for.Salt.Management Public.Education.Programs #> final aggregate                              1, 1  0.001666765, 0.014991153 #>       Salts.Added.during.Water.Treatment #> final       -2.498283e-04, -2.757085e-05 #>       Salts.Added.by.Winter.Maintenance.Activities       Ecosystem.Health #> final                     -0.21240239, -0.04604259 0.03268942, 0.11233170 #>       Public.Awareness.of.Reservoir.Salinization Salinization.of.the.Reservoir #> final                -2.297476e-03, 6.008910e-07      -0.18569597, -0.04408913 #>  #> $mc_inferences #>       input Guidance.Docs.for.Salt.Management Public.Education.Programs #> 1     mc_ 1                                 1              2.018292e-07 #> 2     mc_ 2                                 1              0.000000e+00 #> 3     mc_ 3                                 1              5.213921e-08 #> 4     mc_ 4                                 1              0.000000e+00 #> 5     mc_ 5                                 1              4.036584e-07 #> 6     mc_ 6                                 1              0.000000e+00 #> 7     mc_ 7                                 1              0.000000e+00 #> 8     mc_ 8                                 1              5.382112e-08 #> 9     mc_ 9                                 1              0.000000e+00 #> 10   mc_ 10                                 1              0.000000e+00 #> 11   mc_ 11                                 1              1.883739e-07 #> 12   mc_ 12                                 1              0.000000e+00 #> 13   mc_ 13                                 1              0.000000e+00 #> 14   mc_ 14                                 1             -3.767478e-07 #> 15   mc_ 15                                 1              5.045730e-08 #> 16   mc_ 16                                 1              1.614633e-07 #> 17   mc_ 17                                 1              3.767478e-07 #> 18   mc_ 18                                 1              8.544102e-07 #> 19   mc_ 19                                 1              4.036584e-07 #> 20   mc_ 20                                 1              3.767478e-07 #> 21   mc_ 21                                 1              2.085568e-07 #> 22   mc_ 22                                 1              1.695365e-06 #> 23   mc_ 23                                 1              1.614633e-07 #> 24   mc_ 24                                 1              0.000000e+00 #> 25   mc_ 25                                 1              1.668455e-06 #> 26   mc_ 26                                 1              6.882375e-06 #> 27   mc_ 27                                 1              0.000000e+00 #> 28   mc_ 28                                 1              4.709348e-08 #> 29   mc_ 29                                 1              0.000000e+00 #> 30   mc_ 30                                 1              4.036584e-07 #> 31   mc_ 31                                 1              4.305689e-07 #> 32   mc_ 32                                 1              8.607174e-07 #> 33   mc_ 33                                 1              8.544102e-07 #> 34   mc_ 34                                 1              1.506991e-06 #> 35   mc_ 35                                 1              3.767478e-07 #> 36   mc_ 36                                 1              0.000000e+00 #> 37   mc_ 37                                 1              8.342273e-07 #> 38   mc_ 38                                 1              0.000000e+00 #> 39   mc_ 39                                 1              0.000000e+00 #> 40   mc_ 40                                 1              0.000000e+00 #> 41   mc_ 41                                 1              1.614633e-06 #> 42   mc_ 42                                 1              0.000000e+00 #> 43   mc_ 43                                 1              0.000000e+00 #> 44   mc_ 44                                 1             -3.229267e-07 #> 45   mc_ 45                                 1              0.000000e+00 #> 46   mc_ 46                                 1              3.767478e-07 #> 47   mc_ 47                                 1              0.000000e+00 #> 48   mc_ 48                                 1              1.883739e-07 #> 49   mc_ 49                                 1             -4.272051e-07 #> 50   mc_ 50                                 1              1.883739e-07 #> 51   mc_ 51                                 1              0.000000e+00 #> 52   mc_ 52                                 1              0.000000e+00 #> 53   mc_ 53                                 1              0.000000e+00 #> 54   mc_ 54                                 1              0.000000e+00 #> 55   mc_ 55                                 1              0.000000e+00 #> 56   mc_ 56                                 1              4.171136e-07 #> 57   mc_ 57                                 1              0.000000e+00 #> 58   mc_ 58                                 1              0.000000e+00 #> 59   mc_ 59                                 1              0.000000e+00 #> 60   mc_ 60                                 1              0.000000e+00 #> 61   mc_ 61                                 1              0.000000e+00 #> 62   mc_ 62                                 1              0.000000e+00 #> 63   mc_ 63                                 1              1.695365e-06 #> 64   mc_ 64                                 1              8.544102e-07 #> 65   mc_ 65                                 1              0.000000e+00 #> 66   mc_ 66                                 1              2.018292e-08 #> 67   mc_ 67                                 1              0.000000e+00 #> 68   mc_ 68                                 1              0.000000e+00 #> 69   mc_ 69                                 1              8.544102e-07 #> 70   mc_ 70                                 1              0.000000e+00 #> 71   mc_ 71                                 1              2.152845e-07 #> 72   mc_ 72                                 1              2.583414e-06 #> 73   mc_ 73                                 1              1.708820e-06 #> 74   mc_ 74                                 1              0.000000e+00 #> 75   mc_ 75                                 1              0.000000e+00 #> 76   mc_ 76                                 1             -3.229267e-07 #> 77   mc_ 77                                 1              4.171136e-07 #> 78   mc_ 78                                 1              2.583414e-06 #> 79   mc_ 79                                 1             -6.458534e-06 #> 80   mc_ 80                                 1              0.000000e+00 #> 81   mc_ 81                                 1              3.767478e-07 #> 82   mc_ 82                                 1              8.544102e-07 #> 83   mc_ 83                                 1              0.000000e+00 #> 84   mc_ 84                                 1              0.000000e+00 #> 85   mc_ 85                                 1              8.342273e-07 #> 86   mc_ 86                                 1              1.614633e-07 #> 87   mc_ 87                                 1              0.000000e+00 #> 88   mc_ 88                                 1              3.767478e-07 #> 89   mc_ 89                                 1              0.000000e+00 #> 90   mc_ 90                                 1              1.614633e-07 #> 91   mc_ 91                                 1              0.000000e+00 #> 92   mc_ 92                                 1              2.018292e-08 #> 93   mc_ 93                                 1              0.000000e+00 #> 94   mc_ 94                                 1              0.000000e+00 #> 95   mc_ 95                                 1              8.577740e-07 #> 96   mc_ 96                                 1             -1.076422e-07 #> 97   mc_ 97                                 1              0.000000e+00 #> 98   mc_ 98                                 1              1.614633e-07 #> 99   mc_ 99                                 1              0.000000e+00 #> 100 mc_ 100                                 1              0.000000e+00 #>     Salts.Added.during.Water.Treatment #> 1                         2.018292e-07 #> 2                         0.000000e+00 #> 3                         5.213921e-08 #> 4                         0.000000e+00 #> 5                         4.036584e-07 #> 6                         0.000000e+00 #> 7                         0.000000e+00 #> 8                         5.382112e-08 #> 9                         0.000000e+00 #> 10                        0.000000e+00 #> 11                        1.883739e-07 #> 12                        0.000000e+00 #> 13                        0.000000e+00 #> 14                       -3.767478e-07 #> 15                        5.045730e-08 #> 16                        1.614633e-07 #> 17                        3.767478e-07 #> 18                        8.544102e-07 #> 19                        4.036584e-07 #> 20                        3.767478e-07 #> 21                        2.085568e-07 #> 22                        1.695365e-06 #> 23                        1.614633e-07 #> 24                        0.000000e+00 #> 25                        1.668455e-06 #> 26                        6.882375e-06 #> 27                        0.000000e+00 #> 28                        4.709348e-08 #> 29                        0.000000e+00 #> 30                        4.036584e-07 #> 31                        4.305689e-07 #> 32                        8.607174e-07 #> 33                        8.544102e-07 #> 34                        1.506991e-06 #> 35                        3.767478e-07 #> 36                        0.000000e+00 #> 37                        8.342273e-07 #> 38                        0.000000e+00 #> 39                        0.000000e+00 #> 40                        0.000000e+00 #> 41                        1.614633e-06 #> 42                        0.000000e+00 #> 43                        0.000000e+00 #> 44                       -3.229267e-07 #> 45                        0.000000e+00 #> 46                        3.767478e-07 #> 47                        0.000000e+00 #> 48                        1.883739e-07 #> 49                       -4.272051e-07 #> 50                        1.883739e-07 #> 51                        0.000000e+00 #> 52                        0.000000e+00 #> 53                        0.000000e+00 #> 54                        0.000000e+00 #> 55                        0.000000e+00 #> 56                        4.171136e-07 #> 57                        0.000000e+00 #> 58                        0.000000e+00 #> 59                        0.000000e+00 #> 60                        0.000000e+00 #> 61                        0.000000e+00 #> 62                        0.000000e+00 #> 63                        1.695365e-06 #> 64                        8.544102e-07 #> 65                        0.000000e+00 #> 66                        2.018292e-08 #> 67                        0.000000e+00 #> 68                        0.000000e+00 #> 69                        8.544102e-07 #> 70                        0.000000e+00 #> 71                        2.152845e-07 #> 72                        2.583414e-06 #> 73                        1.708820e-06 #> 74                        0.000000e+00 #> 75                        0.000000e+00 #> 76                       -3.229267e-07 #> 77                        4.171136e-07 #> 78                        2.583414e-06 #> 79                       -6.458534e-06 #> 80                        0.000000e+00 #> 81                        3.767478e-07 #> 82                        8.544102e-07 #> 83                        0.000000e+00 #> 84                        0.000000e+00 #> 85                        8.342273e-07 #> 86                        1.614633e-07 #> 87                        0.000000e+00 #> 88                        3.767478e-07 #> 89                        0.000000e+00 #> 90                        1.614633e-07 #> 91                        0.000000e+00 #> 92                        2.018292e-08 #> 93                        0.000000e+00 #> 94                        0.000000e+00 #> 95                        8.577740e-07 #> 96                       -1.076422e-07 #> 97                        0.000000e+00 #> 98                        1.614633e-07 #> 99                        0.000000e+00 #> 100                       0.000000e+00 #>     Salts.Added.by.Winter.Maintenance.Activities Ecosystem.Health #> 1                                  -2.309272e-01     6.613037e-02 #> 2                                   0.000000e+00     0.000000e+00 #> 3                                  -2.789450e-01     1.651833e-01 #> 4                                   0.000000e+00     0.000000e+00 #> 5                                  -3.002250e-01     7.684438e-02 #> 6                                   0.000000e+00     0.000000e+00 #> 7                                  -1.554620e-01     5.138601e-02 #> 8                                  -1.771025e-01     1.038383e-01 #> 9                                   0.000000e+00     6.201529e-02 #> 10                                  0.000000e+00     0.000000e+00 #> 11                                 -2.016248e-01     1.275211e-01 #> 12                                 -1.469989e-01     6.711562e-02 #> 13                                  0.000000e+00     0.000000e+00 #> 14                                 -8.799807e-02     4.999715e-02 #> 15                                 -1.644263e-01     7.613673e-02 #> 16                                 -2.318449e-01     7.761388e-02 #> 17                                 -1.667773e-01     4.233245e-02 #> 18                                 -3.312670e-01     1.735228e-01 #> 19                                 -2.706222e-01     9.808407e-02 #> 20                                 -2.323330e-01     7.657051e-02 #> 21                                 -2.430391e-01     8.349110e-02 #> 22                                 -3.283972e-01     1.326181e-01 #> 23                                 -2.047316e-01     7.069382e-02 #> 24                                 -5.656903e-02     4.302776e-02 #> 25                                 -2.370270e-01     1.553426e-01 #> 26                                 -2.656162e-01     1.988533e-01 #> 27                                  0.000000e+00     0.000000e+00 #> 28                                 -1.695781e-01     1.072307e-01 #> 29                                  0.000000e+00     0.000000e+00 #> 30                                 -2.348965e-01     9.130968e-02 #> 31                                 -1.222569e-01     4.305689e-07 #> 32                                 -2.081327e-01     1.704788e-01 #> 33                                 -2.698204e-01     1.669941e-01 #> 34                                 -4.848544e-06     1.260864e-01 #> 35                                  3.767478e-07     1.908749e-01 #> 36                                  0.000000e+00     0.000000e+00 #> 37                                 -1.542143e-01     1.683093e-01 #> 38                                  0.000000e+00     0.000000e+00 #> 39                                  0.000000e+00     0.000000e+00 #> 40                                  0.000000e+00     0.000000e+00 #> 41                                 -2.176626e-01     2.811413e-01 #> 42                                  0.000000e+00     0.000000e+00 #> 43                                  0.000000e+00     0.000000e+00 #> 44                                 -1.540988e-01     4.630780e-02 #> 45                                  0.000000e+00     9.882995e-02 #> 46                                 -2.392041e-01     5.800298e-02 #> 47                                  0.000000e+00     0.000000e+00 #> 48                                 -2.246102e-06     1.402515e-01 #> 49                                 -5.369759e-02     1.604859e-02 #> 50                                 -2.673762e-01     9.191364e-02 #> 51                                  0.000000e+00     0.000000e+00 #> 52                                 -1.693268e-01     5.772912e-02 #> 53                                  0.000000e+00     0.000000e+00 #> 54                                  0.000000e+00     0.000000e+00 #> 55                                  0.000000e+00     0.000000e+00 #> 56                                 -3.257039e-02     1.748989e-01 #> 57                                  0.000000e+00     0.000000e+00 #> 58                                  0.000000e+00     0.000000e+00 #> 59                                  0.000000e+00     0.000000e+00 #> 60                                  0.000000e+00     0.000000e+00 #> 61                                  0.000000e+00     6.586137e-02 #> 62                                 -3.702486e-02     5.288360e-03 #> 63                                 -2.843512e-01     1.404850e-01 #> 64                                 -2.874791e-01     1.226689e-01 #> 65                                  0.000000e+00     8.032033e-02 #> 66                                 -1.083602e-01     7.966568e-02 #> 67                                  0.000000e+00     0.000000e+00 #> 68                                  0.000000e+00     0.000000e+00 #> 69                                 -2.497771e-01     1.441453e-01 #> 70                                  0.000000e+00     0.000000e+00 #> 71                                 -1.695765e-01     2.188030e-02 #> 72                                  2.583414e-06     2.583414e-06 #> 73                                 -2.876921e-01     2.355521e-01 #> 74                                  0.000000e+00     0.000000e+00 #> 75                                 -1.314472e-01     6.533127e-03 #> 76                                 -1.160350e-01     3.063438e-02 #> 77                                 -2.647506e-01     1.002230e-01 #> 78                                 -2.222800e-02     2.799175e-01 #> 79                                 -8.556696e-02    -6.458534e-06 #> 80                                  0.000000e+00     0.000000e+00 #> 81                                 -3.093043e-01     3.427648e-02 #> 82                                 -2.832337e-01     8.111275e-02 #> 83                                  0.000000e+00     0.000000e+00 #> 84                                  0.000000e+00     0.000000e+00 #> 85                                 -1.917351e-01     6.797455e-02 #> 86                                 -1.796655e-01     7.178239e-02 #> 87                                  0.000000e+00     0.000000e+00 #> 88                                 -2.935205e-01     4.256697e-02 #> 89                                 -4.322630e-02     1.836498e-02 #> 90                                 -1.916342e-01     7.496029e-02 #> 91                                  0.000000e+00     0.000000e+00 #> 92                                 -9.791255e-02     7.109232e-02 #> 93                                  0.000000e+00     0.000000e+00 #> 94                                  0.000000e+00     0.000000e+00 #> 95                                 -2.990799e-01     2.279886e-01 #> 96                                 -1.076422e-07     1.918725e-02 #> 97                                 -1.090827e-01     6.576226e-02 #> 98                                 -2.083716e-01     6.606056e-02 #> 99                                  0.000000e+00     0.000000e+00 #> 100                                 0.000000e+00     0.000000e+00 #>     Public.Awareness.of.Reservoir.Salinization Salinization.of.the.Reservoir #> 1                                 2.018292e-07                   -0.08513398 #> 2                                 0.000000e+00                    0.00000000 #> 3                                 5.213921e-08                   -0.22145535 #> 4                                 0.000000e+00                    0.00000000 #> 5                                -8.238871e-02                   -0.15042745 #> 6                                 0.000000e+00                    0.00000000 #> 7                                 0.000000e+00                   -0.11629955 #> 8                                 5.382112e-08                   -0.12212447 #> 9                                 0.000000e+00                   -0.23738175 #> 10                                0.000000e+00                    0.00000000 #> 11                                1.883739e-07                   -0.14896420 #> 12                                0.000000e+00                   -0.09937525 #> 13                                0.000000e+00                    0.00000000 #> 14                               -3.767478e-07                   -0.06207230 #> 15                                5.045730e-08                   -0.10030867 #> 16                                1.614633e-07                   -0.15267108 #> 17                                3.767478e-07                   -0.11256628 #> 18                                8.544102e-07                   -0.25968395 #> 19                                4.036584e-07                   -0.20470663 #> 20                                3.767478e-07                   -0.19128669 #> 21                                2.085568e-07                   -0.15000174 #> 22                                1.695365e-06                   -0.26801796 #> 23                                1.614633e-07                   -0.17401921 #> 24                                0.000000e+00                   -0.05558600 #> 25                                1.668455e-06                   -0.29525580 #> 26                                6.882375e-06                   -0.25736902 #> 27                                0.000000e+00                    0.00000000 #> 28                                4.709348e-08                   -0.14187304 #> 29                                0.000000e+00                    0.00000000 #> 30                                4.036584e-07                   -0.17332617 #> 31                                4.305689e-07                   -0.10366471 #> 32                                8.607174e-07                   -0.36947233 #> 33                                8.544102e-07                   -0.20689550 #> 34                                1.506991e-06                   -0.17511993 #> 35                                3.767478e-07                   -0.25199756 #> 36                                0.000000e+00                    0.00000000 #> 37                                8.342273e-07                   -0.27795878 #> 38                                0.000000e+00                    0.00000000 #> 39                                0.000000e+00                    0.00000000 #> 40                                0.000000e+00                    0.00000000 #> 41                                1.614633e-06                   -0.15840792 #> 42                                0.000000e+00                    0.00000000 #> 43                                0.000000e+00                    0.00000000 #> 44                               -3.229267e-07                   -0.05354097 #> 45                                0.000000e+00                   -0.13130770 #> 46                                3.767478e-07                   -0.14418552 #> 47                                0.000000e+00                    0.00000000 #> 48                                1.883739e-07                   -0.22556312 #> 49                               -4.272051e-07                   -0.02478737 #> 50                                1.883739e-07                   -0.16018467 #> 51                                0.000000e+00                    0.00000000 #> 52                                0.000000e+00                   -0.09290705 #> 53                                0.000000e+00                    0.00000000 #> 54                                0.000000e+00                    0.00000000 #> 55                                0.000000e+00                    0.00000000 #> 56                                4.171136e-07                   -0.25732479 #> 57                                0.000000e+00                    0.00000000 #> 58                                0.000000e+00                    0.00000000 #> 59                                0.000000e+00                    0.00000000 #> 60                                0.000000e+00                    0.00000000 #> 61                                0.000000e+00                   -0.12480864 #> 62                                0.000000e+00                   -0.01376199 #> 63                                1.695365e-06                   -0.30388291 #> 64                                8.544102e-07                   -0.20097242 #> 65                                0.000000e+00                   -0.16433319 #> 66                                2.018292e-08                   -0.08605010 #> 67                                0.000000e+00                    0.00000000 #> 68                                0.000000e+00                    0.00000000 #> 69                                8.544102e-07                   -0.19916715 #> 70                                0.000000e+00                    0.00000000 #> 71                                2.152845e-07                   -0.14552544 #> 72                                2.583414e-06                   -0.26118069 #> 73                                1.708820e-06                   -0.24137837 #> 74                                0.000000e+00                    0.00000000 #> 75                                0.000000e+00                   -0.08052812 #> 76                               -3.229267e-07                   -0.08729385 #> 77                                4.171136e-07                   -0.16548263 #> 78                                2.583414e-06                   -0.27918033 #> 79                               -6.458534e-06                   -0.08128554 #> 80                                0.000000e+00                    0.00000000 #> 81                                3.767478e-07                   -0.04534199 #> 82                                8.544102e-07                   -0.28245558 #> 83                                0.000000e+00                    0.00000000 #> 84                                0.000000e+00                    0.00000000 #> 85                                8.342273e-07                   -0.08206578 #> 86                                1.614633e-07                   -0.12229690 #> 87                                0.000000e+00                    0.00000000 #> 88                                3.767478e-07                   -0.10832306 #> 89                                0.000000e+00                   -0.03381660 #> 90                               -1.330335e-02                   -0.15445873 #> 91                                0.000000e+00                    0.00000000 #> 92                                2.018292e-08                   -0.07899190 #> 93                                0.000000e+00                    0.00000000 #> 94                                0.000000e+00                    0.00000000 #> 95                                8.577740e-07                   -0.28626171 #> 96                               -1.076422e-07                   -0.03792537 #> 97                                0.000000e+00                   -0.08393600 #> 98                                1.614633e-07                   -0.18067251 #> 99                                0.000000e+00                    0.00000000 #> 100                               0.000000e+00                    0.00000000 #>  #> $mc_CIs_and_quantiles #>                                           node expected_value           min #> 1            Guidance.Docs.for.Salt.Management   1.000000e+00  1.000000e+00 #> 2                    Public.Education.Programs   2.907107e-07 -6.458534e-06 #> 3           Salts.Added.during.Water.Treatment   2.869572e-07 -6.458534e-06 #> 4 Salts.Added.by.Winter.Maintenance.Activities  -1.092822e-01 -3.312670e-01 #> 5                             Ecosystem.Health   6.109606e-02 -6.458534e-06 #> 6   Public.Awareness.of.Reservoir.Salinization  -9.694273e-04 -8.238871e-02 #> 7                Salinization.of.the.Reservoir  -1.033584e-01 -3.694723e-01 #>        0.025_CI 0.25_quantile      median 0.75_quantile      0.975_CI #> 1  1.000000e+00     1.0000000  1.00000000  1.000000e+00  1.000000e+00 #> 2  8.774135e-08     0.0000000  0.00000000  3.767478e-07  5.001716e-07 #> 3  7.754603e-08     0.0000000  0.00000000  3.767478e-07  4.978850e-07 #> 4 -1.307648e-01    -0.2106943 -0.07106800  0.000000e+00 -8.642284e-02 #> 5  4.768097e-02     0.0000000  0.04815247  9.345625e-02  7.489594e-02 #> 6 -2.737537e-03     0.0000000  0.00000000  3.767478e-07  3.530349e-07 #> 7 -1.248523e-01    -0.1734994 -0.08667197  0.000000e+00 -8.324756e-02 #>            max #> 1 1.000000e+00 #> 2 6.882375e-06 #> 3 6.882375e-06 #> 4 2.583414e-06 #> 5 2.811413e-01 #> 6 6.882375e-06 #> 7 0.000000e+00 #>  get_inferences(ex_ivfn_fcmconfr) #> $input_inferences #> $input_inferences$Guidance.Docs.for.Salt.Management #>            input crisp lower upper #> 1   adj_matrix_1     1     1     1 #> 2   adj_matrix_2     1     1     1 #> 3   adj_matrix_3     1     1     1 #> 4   adj_matrix_4     1     1     1 #> 5   adj_matrix_5     1     1     1 #> 6   adj_matrix_6     1     1     1 #> 7   adj_matrix_7     1     1     1 #> 8   adj_matrix_8     1     1     1 #> 9   adj_matrix_9     1     1     1 #> 10 adj_matrix_10     1     1     1 #> 11 adj_matrix_11     1     1     1 #> 12 adj_matrix_12     1     1     1 #> 13 adj_matrix_13     1     1     1 #> 14 adj_matrix_14     1     1     1 #> 15 adj_matrix_15     1     1     1 #> 16 adj_matrix_16     1     1     1 #> 17 adj_matrix_17     1     1     1 #> 18 adj_matrix_18     1     1     1 #> 19 adj_matrix_19     1     1     1 #> 20 adj_matrix_20     1     1     1 #> 21 adj_matrix_21     1     1     1 #> 22 adj_matrix_22     1     1     1 #> 23 adj_matrix_23     1     1     1 #> 24 adj_matrix_24     1     1     1 #> 25 adj_matrix_25     1     1     1 #> 26 adj_matrix_26     1     1     1 #> 27 adj_matrix_27     1     1     1 #> 28 adj_matrix_28     1     1     1 #> 29 adj_matrix_29     1     1     1 #> 30 adj_matrix_30     1     1     1 #>  #> $input_inferences$Public.Education.Programs #>            input         crisp         lower         upper #> 1   adj_matrix_1  4.171136e-07  4.171136e-07  4.171136e-07 #> 2   adj_matrix_2  4.238413e-07  4.238413e-07  4.238413e-07 #> 3   adj_matrix_3  1.708820e-06  1.708820e-06  1.708820e-06 #> 4   adj_matrix_4 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 5   adj_matrix_5  4.036584e-07  4.036584e-07  4.036584e-07 #> 6   adj_matrix_6  0.000000e+00  0.000000e+00  0.000000e+00 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9  0.000000e+00  0.000000e+00  0.000000e+00 #> 10 adj_matrix_10  2.085568e-07  2.085568e-07  2.085568e-07 #> 11 adj_matrix_11  6.458534e-07  6.458534e-07  6.458534e-07 #> 12 adj_matrix_12  2.085568e-07  2.085568e-07  2.085568e-07 #> 13 adj_matrix_13 -8.577740e-07 -8.577740e-07 -8.577740e-07 #> 14 adj_matrix_14  1.695365e-06  1.695365e-06  1.695365e-06 #> 15 adj_matrix_15  1.614633e-07  1.614633e-07  1.614633e-07 #> 16 adj_matrix_16  1.872705e-01  4.966353e-02  3.248774e-01 #> 17 adj_matrix_17 -6.458534e-07 -6.458534e-07 -6.458534e-07 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19  0.000000e+00  0.000000e+00  0.000000e+00 #> 20 adj_matrix_20  0.000000e+00  0.000000e+00  0.000000e+00 #> 21 adj_matrix_21  3.767478e-07  3.767478e-07  3.767478e-07 #> 22 adj_matrix_22  8.476826e-07  8.476826e-07  8.476826e-07 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24  5.382112e-08  5.382112e-08  5.382112e-08 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28  8.476826e-07  8.476826e-07  8.476826e-07 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00  0.000000e+00  0.000000e+00 #>  #> $input_inferences$Salts.Added.during.Water.Treatment #>            input         crisp         lower         upper #> 1   adj_matrix_1  4.171136e-07  4.171136e-07  4.171136e-07 #> 2   adj_matrix_2 -3.779376e-06 -7.287071e-06 -2.716813e-07 #> 3   adj_matrix_3  1.708820e-06  1.708820e-06  1.708820e-06 #> 4   adj_matrix_4 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 5   adj_matrix_5  4.036584e-07  4.036584e-07  4.036584e-07 #> 6   adj_matrix_6  0.000000e+00  0.000000e+00  0.000000e+00 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9  0.000000e+00  0.000000e+00  0.000000e+00 #> 10 adj_matrix_10  2.085568e-07  2.085568e-07  2.085568e-07 #> 11 adj_matrix_11  6.458534e-07  6.458534e-07  6.458534e-07 #> 12 adj_matrix_12  2.085568e-07  2.085568e-07  2.085568e-07 #> 13 adj_matrix_13 -8.577740e-07 -8.577740e-07 -8.577740e-07 #> 14 adj_matrix_14  1.695365e-06  1.695365e-06  1.695365e-06 #> 15 adj_matrix_15  1.614633e-07  1.614633e-07  1.614633e-07 #> 16 adj_matrix_16 -2.152845e-07 -2.152845e-07 -2.152845e-07 #> 17 adj_matrix_17 -6.458534e-07 -6.458534e-07 -6.458534e-07 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19  0.000000e+00  0.000000e+00  0.000000e+00 #> 20 adj_matrix_20  0.000000e+00  0.000000e+00  0.000000e+00 #> 21 adj_matrix_21  3.767478e-07  3.767478e-07  3.767478e-07 #> 22 adj_matrix_22  8.476826e-07  8.476826e-07  8.476826e-07 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24  5.382112e-08  5.382112e-08  5.382112e-08 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28  8.476826e-07  8.476826e-07  8.476826e-07 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00  0.000000e+00  0.000000e+00 #>  #> $input_inferences$Salts.Added.by.Winter.Maintenance.Activities #>            input         crisp         lower         upper #> 1   adj_matrix_1 -1.324586e-01 -2.649185e-01  1.263065e-06 #> 2   adj_matrix_2 -2.429619e-01 -3.439474e-01 -1.419764e-01 #> 3   adj_matrix_3 -1.392570e-01 -2.785162e-01  2.126505e-06 #> 4   adj_matrix_4 -1.515965e-01 -3.031966e-01  3.501569e-06 #> 5   adj_matrix_5 -2.533332e-01 -3.439468e-01 -1.627196e-01 #> 6   adj_matrix_6  0.000000e+00 -4.509185e-07  4.509185e-07 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9  0.000000e+00  0.000000e+00  0.000000e+00 #> 10 adj_matrix_10 -2.207092e-01 -3.439468e-01 -9.747165e-02 #> 11 adj_matrix_11 -2.631661e-01 -3.439454e-01 -1.823867e-01 #> 12 adj_matrix_12 -2.342918e-01 -3.439471e-01 -1.246364e-01 #> 13 adj_matrix_13 -1.251995e-01 -2.504168e-01  1.783381e-05 #> 14 adj_matrix_14 -2.207088e-01 -3.439469e-01 -9.747073e-02 #> 15 adj_matrix_15 -2.429610e-01 -3.439467e-01 -1.419752e-01 #> 16 adj_matrix_16 -2.152845e-07 -2.152845e-07 -2.152845e-07 #> 17 adj_matrix_17 -1.092410e-01 -2.184896e-01  7.509039e-06 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19 -1.392563e-01 -2.785142e-01  1.654658e-06 #> 20 adj_matrix_20  0.000000e+00 -9.886287e-07  9.886287e-07 #> 21 adj_matrix_21 -1.252062e-01 -2.504168e-01  4.355196e-06 #> 22 adj_matrix_22 -2.631693e-01 -3.439477e-01 -1.823909e-01 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24 -1.515977e-01 -3.031964e-01  1.042238e-06 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28 -2.533334e-01 -3.439469e-01 -1.627198e-01 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00 -8.650037e-07  8.650037e-07 #>  #> $input_inferences$Ecosystem.Health #>            input      crisp         lower        upper #> 1   adj_matrix_1 0.11848368  6.469253e-02 1.722748e-01 #> 2   adj_matrix_2 0.10334131  6.108397e-02 1.455987e-01 #> 3   adj_matrix_3 0.14414725  8.060473e-02 2.076898e-01 #> 4   adj_matrix_4 0.05314504  2.783340e-02 7.845669e-02 #> 5   adj_matrix_5 0.09929473  5.339747e-02 1.451920e-01 #> 6   adj_matrix_6 0.00000000 -1.650893e-05 1.650893e-05 #> 7   adj_matrix_7 0.00000000 -2.326245e-05 2.326245e-05 #> 8   adj_matrix_8 0.00000000 -3.672809e-06 3.672809e-06 #> 9   adj_matrix_9 0.07890037  3.741838e-02 1.203824e-01 #> 10 adj_matrix_10 0.09557402  6.506459e-02 1.260835e-01 #> 11 adj_matrix_11 0.01881383 -2.289465e-05 3.765054e-02 #> 12 adj_matrix_12 0.11746232  7.565469e-02 1.592699e-01 #> 13 adj_matrix_13 0.02830435  1.310921e-02 4.349949e-02 #> 14 adj_matrix_14 0.28044002  1.754727e-01 3.854074e-01 #> 15 adj_matrix_15 0.06343578  1.306651e-02 1.138050e-01 #> 16 adj_matrix_16 0.05843955 -6.760308e-07 1.168798e-01 #> 17 adj_matrix_17 0.02148693 -2.824574e-05 4.300210e-02 #> 18 adj_matrix_18 0.00000000 -1.668145e-05 1.668145e-05 #> 19 adj_matrix_19 0.06237972  3.608334e-02 8.867611e-02 #> 20 adj_matrix_20 0.00000000 -1.281902e-05 1.281902e-05 #> 21 adj_matrix_21 0.01991903  3.973270e-03 3.586478e-02 #> 22 adj_matrix_22 0.07085993  1.471456e-02 1.270053e-01 #> 23 adj_matrix_23 0.13203311  9.154776e-02 1.725185e-01 #> 24 adj_matrix_24 0.07989979  5.405402e-02 1.057456e-01 #> 25 adj_matrix_25 0.00000000 -8.449817e-06 8.449817e-06 #> 26 adj_matrix_26 0.00000000  0.000000e+00 0.000000e+00 #> 27 adj_matrix_27 0.00000000 -2.136079e-05 2.136079e-05 #> 28 adj_matrix_28 0.17694378  1.111561e-01 2.427314e-01 #> 29 adj_matrix_29 0.00000000 -1.648369e-05 1.648369e-05 #> 30 adj_matrix_30 0.00000000 -1.613378e-05 1.613378e-05 #>  #> $input_inferences$Public.Awareness.of.Reservoir.Salinization #>            input         crisp         lower         upper #> 1   adj_matrix_1  4.171136e-07  4.171136e-07  4.171136e-07 #> 2   adj_matrix_2  4.238413e-07  4.238413e-07  4.238413e-07 #> 3   adj_matrix_3  1.708820e-06  1.708820e-06  1.708820e-06 #> 4   adj_matrix_4 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 5   adj_matrix_5  4.036584e-07  4.036584e-07  4.036584e-07 #> 6   adj_matrix_6  0.000000e+00  0.000000e+00  0.000000e+00 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9  0.000000e+00  0.000000e+00  0.000000e+00 #> 10 adj_matrix_10  2.085568e-07  2.085568e-07  2.085568e-07 #> 11 adj_matrix_11  6.458534e-07  6.458534e-07  6.458534e-07 #> 12 adj_matrix_12  2.085568e-07  2.085568e-07  2.085568e-07 #> 13 adj_matrix_13 -8.577740e-07 -8.577740e-07 -8.577740e-07 #> 14 adj_matrix_14  1.695365e-06  1.695365e-06  1.695365e-06 #> 15 adj_matrix_15  1.614633e-07  1.614633e-07  1.614633e-07 #> 16 adj_matrix_16 -2.152845e-07 -2.152845e-07 -2.152845e-07 #> 17 adj_matrix_17 -6.458534e-07 -6.458534e-07 -6.458534e-07 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19  0.000000e+00  0.000000e+00  0.000000e+00 #> 20 adj_matrix_20  0.000000e+00  0.000000e+00  0.000000e+00 #> 21 adj_matrix_21 -1.196956e-02 -2.395658e-02  1.746007e-05 #> 22 adj_matrix_22  8.476826e-07  8.476826e-07  8.476826e-07 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24  5.382112e-08  5.382112e-08  5.382112e-08 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28  8.476826e-07  8.476826e-07  8.476826e-07 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00  0.000000e+00  0.000000e+00 #>  #> $input_inferences$Salinization.of.the.Reservoir #>            input       crisp         lower         upper #> 1   adj_matrix_1 -0.18698522 -3.278790e-01 -4.609143e-02 #> 2   adj_matrix_2 -0.15426504 -2.136746e-01 -9.485554e-02 #> 3   adj_matrix_3 -0.23441846 -3.725386e-01 -9.629834e-02 #> 4   adj_matrix_4 -0.07977586 -1.368576e-01 -2.269413e-02 #> 5   adj_matrix_5 -0.15381088 -2.207422e-01 -8.687954e-02 #> 6   adj_matrix_6  0.00000000 -2.103436e-06  2.103436e-06 #> 7   adj_matrix_7  0.00000000 -6.586473e-06  6.586473e-06 #> 8   adj_matrix_8  0.00000000 -8.743405e-07  8.743405e-07 #> 9   adj_matrix_9 -0.12520673 -2.504205e-01  7.038508e-06 #> 10 adj_matrix_10 -0.13165738 -1.978625e-01 -6.545225e-02 #> 11 adj_matrix_11 -0.06300826 -1.260312e-01  1.466273e-05 #> 12 adj_matrix_12 -0.17074752 -2.076103e-01 -1.338848e-01 #> 13 adj_matrix_13 -0.04372179 -8.748446e-02  4.087751e-05 #> 14 adj_matrix_14 -0.13695270 -1.978584e-01 -7.604704e-02 #> 15 adj_matrix_15 -0.13097225 -2.136648e-01 -4.827970e-02 #> 16 adj_matrix_16 -0.15159784 -3.032049e-01  9.271562e-06 #> 17 adj_matrix_17 -0.07201974 -1.059742e-01 -3.806530e-02 #> 18 adj_matrix_18  0.00000000 -8.926425e-07  8.926425e-07 #> 19 adj_matrix_19 -0.09058375 -1.327392e-01 -4.842825e-02 #> 20 adj_matrix_20  0.00000000 -5.043371e-06  5.043371e-06 #> 21 adj_matrix_21 -0.03999414 -7.999894e-02  1.066973e-05 #> 22 adj_matrix_22 -0.14743918 -2.272914e-01 -6.758692e-02 #> 23 adj_matrix_23 -0.18727439 -3.248824e-01 -4.966640e-02 #> 24 adj_matrix_24 -0.10900006 -1.433314e-01 -7.466872e-02 #> 25 adj_matrix_25  0.00000000 -1.501920e-06  1.501920e-06 #> 26 adj_matrix_26  0.00000000 -2.008037e-05  2.008037e-05 #> 27 adj_matrix_27  0.00000000 -2.783859e-06  2.783859e-06 #> 28 adj_matrix_28 -0.28739316 -4.112664e-01 -1.635199e-01 #> 29 adj_matrix_29  0.00000000 -5.991399e-06  5.991399e-06 #> 30 adj_matrix_30  0.00000000 -3.572937e-06  3.572937e-06 #>  #>  #> $aggregate_inferences #>           input Guidance.Docs.for.Salt.Management Public.Education.Programs #> final aggregate                              1, 1  0.001666765, 0.014991153 #>       Salts.Added.during.Water.Treatment #> final       -2.498283e-04, -2.757085e-05 #>       Salts.Added.by.Winter.Maintenance.Activities       Ecosystem.Health #> final                     -0.21240239, -0.04604259 0.03268942, 0.11233170 #>       Public.Awareness.of.Reservoir.Salinization Salinization.of.the.Reservoir #> final                -2.297476e-03, 6.008910e-07      -0.18569597, -0.04408913 #>  #> $mc_inferences #>       input Guidance.Docs.for.Salt.Management Public.Education.Programs #> 1     mc_ 1                                 1              2.018292e-07 #> 2     mc_ 2                                 1              0.000000e+00 #> 3     mc_ 3                                 1              5.213921e-08 #> 4     mc_ 4                                 1              0.000000e+00 #> 5     mc_ 5                                 1              4.036584e-07 #> 6     mc_ 6                                 1              0.000000e+00 #> 7     mc_ 7                                 1              0.000000e+00 #> 8     mc_ 8                                 1              5.382112e-08 #> 9     mc_ 9                                 1              0.000000e+00 #> 10   mc_ 10                                 1              0.000000e+00 #> 11   mc_ 11                                 1              1.883739e-07 #> 12   mc_ 12                                 1              0.000000e+00 #> 13   mc_ 13                                 1              0.000000e+00 #> 14   mc_ 14                                 1             -3.767478e-07 #> 15   mc_ 15                                 1              5.045730e-08 #> 16   mc_ 16                                 1              1.614633e-07 #> 17   mc_ 17                                 1              3.767478e-07 #> 18   mc_ 18                                 1              8.544102e-07 #> 19   mc_ 19                                 1              4.036584e-07 #> 20   mc_ 20                                 1              3.767478e-07 #> 21   mc_ 21                                 1              2.085568e-07 #> 22   mc_ 22                                 1              1.695365e-06 #> 23   mc_ 23                                 1              1.614633e-07 #> 24   mc_ 24                                 1              0.000000e+00 #> 25   mc_ 25                                 1              1.668455e-06 #> 26   mc_ 26                                 1              6.882375e-06 #> 27   mc_ 27                                 1              0.000000e+00 #> 28   mc_ 28                                 1              4.709348e-08 #> 29   mc_ 29                                 1              0.000000e+00 #> 30   mc_ 30                                 1              4.036584e-07 #> 31   mc_ 31                                 1              4.305689e-07 #> 32   mc_ 32                                 1              8.607174e-07 #> 33   mc_ 33                                 1              8.544102e-07 #> 34   mc_ 34                                 1              1.506991e-06 #> 35   mc_ 35                                 1              3.767478e-07 #> 36   mc_ 36                                 1              0.000000e+00 #> 37   mc_ 37                                 1              8.342273e-07 #> 38   mc_ 38                                 1              0.000000e+00 #> 39   mc_ 39                                 1              0.000000e+00 #> 40   mc_ 40                                 1              0.000000e+00 #> 41   mc_ 41                                 1              1.614633e-06 #> 42   mc_ 42                                 1              0.000000e+00 #> 43   mc_ 43                                 1              0.000000e+00 #> 44   mc_ 44                                 1             -3.229267e-07 #> 45   mc_ 45                                 1              0.000000e+00 #> 46   mc_ 46                                 1              3.767478e-07 #> 47   mc_ 47                                 1              0.000000e+00 #> 48   mc_ 48                                 1              1.883739e-07 #> 49   mc_ 49                                 1             -4.272051e-07 #> 50   mc_ 50                                 1              1.883739e-07 #> 51   mc_ 51                                 1              0.000000e+00 #> 52   mc_ 52                                 1              0.000000e+00 #> 53   mc_ 53                                 1              0.000000e+00 #> 54   mc_ 54                                 1              0.000000e+00 #> 55   mc_ 55                                 1              0.000000e+00 #> 56   mc_ 56                                 1              4.171136e-07 #> 57   mc_ 57                                 1              0.000000e+00 #> 58   mc_ 58                                 1              0.000000e+00 #> 59   mc_ 59                                 1              0.000000e+00 #> 60   mc_ 60                                 1              0.000000e+00 #> 61   mc_ 61                                 1              0.000000e+00 #> 62   mc_ 62                                 1              0.000000e+00 #> 63   mc_ 63                                 1              1.695365e-06 #> 64   mc_ 64                                 1              8.544102e-07 #> 65   mc_ 65                                 1              0.000000e+00 #> 66   mc_ 66                                 1              2.018292e-08 #> 67   mc_ 67                                 1              0.000000e+00 #> 68   mc_ 68                                 1              0.000000e+00 #> 69   mc_ 69                                 1              8.544102e-07 #> 70   mc_ 70                                 1              0.000000e+00 #> 71   mc_ 71                                 1              2.152845e-07 #> 72   mc_ 72                                 1              2.583414e-06 #> 73   mc_ 73                                 1              1.708820e-06 #> 74   mc_ 74                                 1              0.000000e+00 #> 75   mc_ 75                                 1              0.000000e+00 #> 76   mc_ 76                                 1             -3.229267e-07 #> 77   mc_ 77                                 1              4.171136e-07 #> 78   mc_ 78                                 1              2.583414e-06 #> 79   mc_ 79                                 1             -6.458534e-06 #> 80   mc_ 80                                 1              0.000000e+00 #> 81   mc_ 81                                 1              3.767478e-07 #> 82   mc_ 82                                 1              8.544102e-07 #> 83   mc_ 83                                 1              0.000000e+00 #> 84   mc_ 84                                 1              0.000000e+00 #> 85   mc_ 85                                 1              8.342273e-07 #> 86   mc_ 86                                 1              1.614633e-07 #> 87   mc_ 87                                 1              0.000000e+00 #> 88   mc_ 88                                 1              3.767478e-07 #> 89   mc_ 89                                 1              0.000000e+00 #> 90   mc_ 90                                 1              1.614633e-07 #> 91   mc_ 91                                 1              0.000000e+00 #> 92   mc_ 92                                 1              2.018292e-08 #> 93   mc_ 93                                 1              0.000000e+00 #> 94   mc_ 94                                 1              0.000000e+00 #> 95   mc_ 95                                 1              8.577740e-07 #> 96   mc_ 96                                 1             -1.076422e-07 #> 97   mc_ 97                                 1              0.000000e+00 #> 98   mc_ 98                                 1              1.614633e-07 #> 99   mc_ 99                                 1              0.000000e+00 #> 100 mc_ 100                                 1              0.000000e+00 #>     Salts.Added.during.Water.Treatment #> 1                         2.018292e-07 #> 2                         0.000000e+00 #> 3                         5.213921e-08 #> 4                         0.000000e+00 #> 5                         4.036584e-07 #> 6                         0.000000e+00 #> 7                         0.000000e+00 #> 8                         5.382112e-08 #> 9                         0.000000e+00 #> 10                        0.000000e+00 #> 11                        1.883739e-07 #> 12                        0.000000e+00 #> 13                        0.000000e+00 #> 14                       -3.767478e-07 #> 15                        5.045730e-08 #> 16                        1.614633e-07 #> 17                        3.767478e-07 #> 18                        8.544102e-07 #> 19                        4.036584e-07 #> 20                        3.767478e-07 #> 21                        2.085568e-07 #> 22                        1.695365e-06 #> 23                        1.614633e-07 #> 24                        0.000000e+00 #> 25                        1.668455e-06 #> 26                        6.882375e-06 #> 27                        0.000000e+00 #> 28                        4.709348e-08 #> 29                        0.000000e+00 #> 30                        4.036584e-07 #> 31                        4.305689e-07 #> 32                        8.607174e-07 #> 33                        8.544102e-07 #> 34                        1.506991e-06 #> 35                        3.767478e-07 #> 36                        0.000000e+00 #> 37                        8.342273e-07 #> 38                        0.000000e+00 #> 39                        0.000000e+00 #> 40                        0.000000e+00 #> 41                        1.614633e-06 #> 42                        0.000000e+00 #> 43                        0.000000e+00 #> 44                       -3.229267e-07 #> 45                        0.000000e+00 #> 46                        3.767478e-07 #> 47                        0.000000e+00 #> 48                        1.883739e-07 #> 49                       -4.272051e-07 #> 50                        1.883739e-07 #> 51                        0.000000e+00 #> 52                        0.000000e+00 #> 53                        0.000000e+00 #> 54                        0.000000e+00 #> 55                        0.000000e+00 #> 56                        4.171136e-07 #> 57                        0.000000e+00 #> 58                        0.000000e+00 #> 59                        0.000000e+00 #> 60                        0.000000e+00 #> 61                        0.000000e+00 #> 62                        0.000000e+00 #> 63                        1.695365e-06 #> 64                        8.544102e-07 #> 65                        0.000000e+00 #> 66                        2.018292e-08 #> 67                        0.000000e+00 #> 68                        0.000000e+00 #> 69                        8.544102e-07 #> 70                        0.000000e+00 #> 71                        2.152845e-07 #> 72                        2.583414e-06 #> 73                        1.708820e-06 #> 74                        0.000000e+00 #> 75                        0.000000e+00 #> 76                       -3.229267e-07 #> 77                        4.171136e-07 #> 78                        2.583414e-06 #> 79                       -6.458534e-06 #> 80                        0.000000e+00 #> 81                        3.767478e-07 #> 82                        8.544102e-07 #> 83                        0.000000e+00 #> 84                        0.000000e+00 #> 85                        8.342273e-07 #> 86                        1.614633e-07 #> 87                        0.000000e+00 #> 88                        3.767478e-07 #> 89                        0.000000e+00 #> 90                        1.614633e-07 #> 91                        0.000000e+00 #> 92                        2.018292e-08 #> 93                        0.000000e+00 #> 94                        0.000000e+00 #> 95                        8.577740e-07 #> 96                       -1.076422e-07 #> 97                        0.000000e+00 #> 98                        1.614633e-07 #> 99                        0.000000e+00 #> 100                       0.000000e+00 #>     Salts.Added.by.Winter.Maintenance.Activities Ecosystem.Health #> 1                                  -2.309272e-01     6.613037e-02 #> 2                                   0.000000e+00     0.000000e+00 #> 3                                  -2.789450e-01     1.651833e-01 #> 4                                   0.000000e+00     0.000000e+00 #> 5                                  -3.002250e-01     7.684438e-02 #> 6                                   0.000000e+00     0.000000e+00 #> 7                                  -1.554620e-01     5.138601e-02 #> 8                                  -1.771025e-01     1.038383e-01 #> 9                                   0.000000e+00     6.201529e-02 #> 10                                  0.000000e+00     0.000000e+00 #> 11                                 -2.016248e-01     1.275211e-01 #> 12                                 -1.469989e-01     6.711562e-02 #> 13                                  0.000000e+00     0.000000e+00 #> 14                                 -8.799807e-02     4.999715e-02 #> 15                                 -1.644263e-01     7.613673e-02 #> 16                                 -2.318449e-01     7.761388e-02 #> 17                                 -1.667773e-01     4.233245e-02 #> 18                                 -3.312670e-01     1.735228e-01 #> 19                                 -2.706222e-01     9.808407e-02 #> 20                                 -2.323330e-01     7.657051e-02 #> 21                                 -2.430391e-01     8.349110e-02 #> 22                                 -3.283972e-01     1.326181e-01 #> 23                                 -2.047316e-01     7.069382e-02 #> 24                                 -5.656903e-02     4.302776e-02 #> 25                                 -2.370270e-01     1.553426e-01 #> 26                                 -2.656162e-01     1.988533e-01 #> 27                                  0.000000e+00     0.000000e+00 #> 28                                 -1.695781e-01     1.072307e-01 #> 29                                  0.000000e+00     0.000000e+00 #> 30                                 -2.348965e-01     9.130968e-02 #> 31                                 -1.222569e-01     4.305689e-07 #> 32                                 -2.081327e-01     1.704788e-01 #> 33                                 -2.698204e-01     1.669941e-01 #> 34                                 -4.848544e-06     1.260864e-01 #> 35                                  3.767478e-07     1.908749e-01 #> 36                                  0.000000e+00     0.000000e+00 #> 37                                 -1.542143e-01     1.683093e-01 #> 38                                  0.000000e+00     0.000000e+00 #> 39                                  0.000000e+00     0.000000e+00 #> 40                                  0.000000e+00     0.000000e+00 #> 41                                 -2.176626e-01     2.811413e-01 #> 42                                  0.000000e+00     0.000000e+00 #> 43                                  0.000000e+00     0.000000e+00 #> 44                                 -1.540988e-01     4.630780e-02 #> 45                                  0.000000e+00     9.882995e-02 #> 46                                 -2.392041e-01     5.800298e-02 #> 47                                  0.000000e+00     0.000000e+00 #> 48                                 -2.246102e-06     1.402515e-01 #> 49                                 -5.369759e-02     1.604859e-02 #> 50                                 -2.673762e-01     9.191364e-02 #> 51                                  0.000000e+00     0.000000e+00 #> 52                                 -1.693268e-01     5.772912e-02 #> 53                                  0.000000e+00     0.000000e+00 #> 54                                  0.000000e+00     0.000000e+00 #> 55                                  0.000000e+00     0.000000e+00 #> 56                                 -3.257039e-02     1.748989e-01 #> 57                                  0.000000e+00     0.000000e+00 #> 58                                  0.000000e+00     0.000000e+00 #> 59                                  0.000000e+00     0.000000e+00 #> 60                                  0.000000e+00     0.000000e+00 #> 61                                  0.000000e+00     6.586137e-02 #> 62                                 -3.702486e-02     5.288360e-03 #> 63                                 -2.843512e-01     1.404850e-01 #> 64                                 -2.874791e-01     1.226689e-01 #> 65                                  0.000000e+00     8.032033e-02 #> 66                                 -1.083602e-01     7.966568e-02 #> 67                                  0.000000e+00     0.000000e+00 #> 68                                  0.000000e+00     0.000000e+00 #> 69                                 -2.497771e-01     1.441453e-01 #> 70                                  0.000000e+00     0.000000e+00 #> 71                                 -1.695765e-01     2.188030e-02 #> 72                                  2.583414e-06     2.583414e-06 #> 73                                 -2.876921e-01     2.355521e-01 #> 74                                  0.000000e+00     0.000000e+00 #> 75                                 -1.314472e-01     6.533127e-03 #> 76                                 -1.160350e-01     3.063438e-02 #> 77                                 -2.647506e-01     1.002230e-01 #> 78                                 -2.222800e-02     2.799175e-01 #> 79                                 -8.556696e-02    -6.458534e-06 #> 80                                  0.000000e+00     0.000000e+00 #> 81                                 -3.093043e-01     3.427648e-02 #> 82                                 -2.832337e-01     8.111275e-02 #> 83                                  0.000000e+00     0.000000e+00 #> 84                                  0.000000e+00     0.000000e+00 #> 85                                 -1.917351e-01     6.797455e-02 #> 86                                 -1.796655e-01     7.178239e-02 #> 87                                  0.000000e+00     0.000000e+00 #> 88                                 -2.935205e-01     4.256697e-02 #> 89                                 -4.322630e-02     1.836498e-02 #> 90                                 -1.916342e-01     7.496029e-02 #> 91                                  0.000000e+00     0.000000e+00 #> 92                                 -9.791255e-02     7.109232e-02 #> 93                                  0.000000e+00     0.000000e+00 #> 94                                  0.000000e+00     0.000000e+00 #> 95                                 -2.990799e-01     2.279886e-01 #> 96                                 -1.076422e-07     1.918725e-02 #> 97                                 -1.090827e-01     6.576226e-02 #> 98                                 -2.083716e-01     6.606056e-02 #> 99                                  0.000000e+00     0.000000e+00 #> 100                                 0.000000e+00     0.000000e+00 #>     Public.Awareness.of.Reservoir.Salinization Salinization.of.the.Reservoir #> 1                                 2.018292e-07                   -0.08513398 #> 2                                 0.000000e+00                    0.00000000 #> 3                                 5.213921e-08                   -0.22145535 #> 4                                 0.000000e+00                    0.00000000 #> 5                                -8.238871e-02                   -0.15042745 #> 6                                 0.000000e+00                    0.00000000 #> 7                                 0.000000e+00                   -0.11629955 #> 8                                 5.382112e-08                   -0.12212447 #> 9                                 0.000000e+00                   -0.23738175 #> 10                                0.000000e+00                    0.00000000 #> 11                                1.883739e-07                   -0.14896420 #> 12                                0.000000e+00                   -0.09937525 #> 13                                0.000000e+00                    0.00000000 #> 14                               -3.767478e-07                   -0.06207230 #> 15                                5.045730e-08                   -0.10030867 #> 16                                1.614633e-07                   -0.15267108 #> 17                                3.767478e-07                   -0.11256628 #> 18                                8.544102e-07                   -0.25968395 #> 19                                4.036584e-07                   -0.20470663 #> 20                                3.767478e-07                   -0.19128669 #> 21                                2.085568e-07                   -0.15000174 #> 22                                1.695365e-06                   -0.26801796 #> 23                                1.614633e-07                   -0.17401921 #> 24                                0.000000e+00                   -0.05558600 #> 25                                1.668455e-06                   -0.29525580 #> 26                                6.882375e-06                   -0.25736902 #> 27                                0.000000e+00                    0.00000000 #> 28                                4.709348e-08                   -0.14187304 #> 29                                0.000000e+00                    0.00000000 #> 30                                4.036584e-07                   -0.17332617 #> 31                                4.305689e-07                   -0.10366471 #> 32                                8.607174e-07                   -0.36947233 #> 33                                8.544102e-07                   -0.20689550 #> 34                                1.506991e-06                   -0.17511993 #> 35                                3.767478e-07                   -0.25199756 #> 36                                0.000000e+00                    0.00000000 #> 37                                8.342273e-07                   -0.27795878 #> 38                                0.000000e+00                    0.00000000 #> 39                                0.000000e+00                    0.00000000 #> 40                                0.000000e+00                    0.00000000 #> 41                                1.614633e-06                   -0.15840792 #> 42                                0.000000e+00                    0.00000000 #> 43                                0.000000e+00                    0.00000000 #> 44                               -3.229267e-07                   -0.05354097 #> 45                                0.000000e+00                   -0.13130770 #> 46                                3.767478e-07                   -0.14418552 #> 47                                0.000000e+00                    0.00000000 #> 48                                1.883739e-07                   -0.22556312 #> 49                               -4.272051e-07                   -0.02478737 #> 50                                1.883739e-07                   -0.16018467 #> 51                                0.000000e+00                    0.00000000 #> 52                                0.000000e+00                   -0.09290705 #> 53                                0.000000e+00                    0.00000000 #> 54                                0.000000e+00                    0.00000000 #> 55                                0.000000e+00                    0.00000000 #> 56                                4.171136e-07                   -0.25732479 #> 57                                0.000000e+00                    0.00000000 #> 58                                0.000000e+00                    0.00000000 #> 59                                0.000000e+00                    0.00000000 #> 60                                0.000000e+00                    0.00000000 #> 61                                0.000000e+00                   -0.12480864 #> 62                                0.000000e+00                   -0.01376199 #> 63                                1.695365e-06                   -0.30388291 #> 64                                8.544102e-07                   -0.20097242 #> 65                                0.000000e+00                   -0.16433319 #> 66                                2.018292e-08                   -0.08605010 #> 67                                0.000000e+00                    0.00000000 #> 68                                0.000000e+00                    0.00000000 #> 69                                8.544102e-07                   -0.19916715 #> 70                                0.000000e+00                    0.00000000 #> 71                                2.152845e-07                   -0.14552544 #> 72                                2.583414e-06                   -0.26118069 #> 73                                1.708820e-06                   -0.24137837 #> 74                                0.000000e+00                    0.00000000 #> 75                                0.000000e+00                   -0.08052812 #> 76                               -3.229267e-07                   -0.08729385 #> 77                                4.171136e-07                   -0.16548263 #> 78                                2.583414e-06                   -0.27918033 #> 79                               -6.458534e-06                   -0.08128554 #> 80                                0.000000e+00                    0.00000000 #> 81                                3.767478e-07                   -0.04534199 #> 82                                8.544102e-07                   -0.28245558 #> 83                                0.000000e+00                    0.00000000 #> 84                                0.000000e+00                    0.00000000 #> 85                                8.342273e-07                   -0.08206578 #> 86                                1.614633e-07                   -0.12229690 #> 87                                0.000000e+00                    0.00000000 #> 88                                3.767478e-07                   -0.10832306 #> 89                                0.000000e+00                   -0.03381660 #> 90                               -1.330335e-02                   -0.15445873 #> 91                                0.000000e+00                    0.00000000 #> 92                                2.018292e-08                   -0.07899190 #> 93                                0.000000e+00                    0.00000000 #> 94                                0.000000e+00                    0.00000000 #> 95                                8.577740e-07                   -0.28626171 #> 96                               -1.076422e-07                   -0.03792537 #> 97                                0.000000e+00                   -0.08393600 #> 98                                1.614633e-07                   -0.18067251 #> 99                                0.000000e+00                    0.00000000 #> 100                               0.000000e+00                    0.00000000 #>  #> $mc_CIs_and_quantiles #>                                           node expected_value           min #> 1            Guidance.Docs.for.Salt.Management   1.000000e+00  1.000000e+00 #> 2                    Public.Education.Programs   2.907107e-07 -6.458534e-06 #> 3           Salts.Added.during.Water.Treatment   2.869572e-07 -6.458534e-06 #> 4 Salts.Added.by.Winter.Maintenance.Activities  -1.092822e-01 -3.312670e-01 #> 5                             Ecosystem.Health   6.109606e-02 -6.458534e-06 #> 6   Public.Awareness.of.Reservoir.Salinization  -9.694273e-04 -8.238871e-02 #> 7                Salinization.of.the.Reservoir  -1.033584e-01 -3.694723e-01 #>        0.025_CI 0.25_quantile      median 0.75_quantile      0.975_CI #> 1  1.000000e+00     1.0000000  1.00000000  1.000000e+00  1.000000e+00 #> 2  8.774135e-08     0.0000000  0.00000000  3.767478e-07  5.001716e-07 #> 3  7.754603e-08     0.0000000  0.00000000  3.767478e-07  4.978850e-07 #> 4 -1.307648e-01    -0.2106943 -0.07106800  0.000000e+00 -8.642284e-02 #> 5  4.768097e-02     0.0000000  0.04815247  9.345625e-02  7.489594e-02 #> 6 -2.737537e-03     0.0000000  0.00000000  3.767478e-07  3.530349e-07 #> 7 -1.248523e-01    -0.1734994 -0.08667197  0.000000e+00 -8.324756e-02 #>            max #> 1 1.000000e+00 #> 2 6.882375e-06 #> 3 6.882375e-06 #> 4 2.583414e-06 #> 5 2.811413e-01 #> 6 6.882375e-06 #> 7 0.000000e+00 #>    ex_tfn_fcmconfr <- fcmconfr(   adj_matrices = sample_fcms$simple_fcms$tfn_fcms,   # adj_matrices = group_tfn_fcms,   # Aggregation and Monte Carlo Sampling   aggregation_function = 'mean',   monte_carlo_sampling_draws = 100,   # Simulation   initial_state_vector = c(1, 1, 1, 1, 1, 1, 1),   clamping_vector = c(1, 0, 0, 0, 0, 0, 0),   activation = 'rescale',   squashing = 'sigmoid',   lambda = 1,   point_of_inference = \"final\",   max_iter = 1000,   min_error = 1e-05,   # Inference Estimation (bootstrap)   inference_estimation_function = mean,   inference_estimation_CI = 0.95,   inference_estimation_bootstrap_reps = 1000,   # Runtime Options   show_progress = TRUE,   parallel = TRUE,   n_cores = 2,   # Additional Options   perform_aggregate_analysis = TRUE,   perform_monte_carlo_analysis = TRUE,   perform_monte_carlo_inference_bootstrap_analysis = TRUE,   include_zero_weighted_edges_in_aggregation_and_mc_sampling = TRUE,   include_monte_carlo_FCM_simulations_in_output = TRUE ) #> [1] Simulating Input FCMs #> [1] Initializing cluster #> [1] Running Simulations in Parallel #> [1] Sampling from column vectors #> Sampling from column vectors[1] Constructing monte carlo fcms from samples #> Constructing monte carlo fcms from samples[1] Initializing cluster #> [1] Running Simulations in Parallel #> [1] Performing bootstrap simulations #> [1] Initializing cluster #> [1] Sampling means #>    |                                                           |                                                  |   1%   |                                                           |=                                                 |   1%   |                                                           |=                                                 |   2%   |                                                           |=                                                 |   3%   |                                                           |==                                                |   3%   |                                                           |==                                                |   4%   |                                                           |==                                                |   5%   |                                                           |===                                               |   5%   |                                                           |===                                               |   6%   |                                                           |===                                               |   7%   |                                                           |====                                              |   7%   |                                                           |====                                              |   8%   |                                                           |====                                              |   9%   |                                                           |=====                                             |   9%   |                                                           |=====                                             |  10%   |                                                           |=====                                             |  11%   |                                                           |======                                            |  11%   |                                                           |======                                            |  12%   |                                                           |======                                            |  13%   |                                                           |=======                                           |  13%   |                                                           |=======                                           |  14%   |                                                           |=======                                           |  15%   |                                                           |========                                          |  15%   |                                                           |========                                          |  16%   |                                                           |========                                          |  17%   |                                                           |=========                                         |  17%   |                                                           |=========                                         |  18%   |                                                           |=========                                         |  19%   |                                                           |==========                                        |  19%   |                                                           |==========                                        |  20%   |                                                           |==========                                        |  21%   |                                                           |===========                                       |  21%   |                                                           |===========                                       |  22%   |                                                           |===========                                       |  23%   |                                                           |============                                      |  23%   |                                                           |============                                      |  24%   |                                                           |============                                      |  25%   |                                                           |=============                                     |  25%   |                                                           |=============                                     |  26%   |                                                           |=============                                     |  27%   |                                                           |==============                                    |  27%   |                                                           |==============                                    |  28%   |                                                           |==============                                    |  29%   |                                                           |===============                                   |  29%   |                                                           |===============                                   |  30%   |                                                           |===============                                   |  31%   |                                                           |================                                  |  31%   |                                                           |================                                  |  32%   |                                                           |================                                  |  33%   |                                                           |=================                                 |  33%   |                                                           |=================                                 |  34%   |                                                           |=================                                 |  35%   |                                                           |==================                                |  35%   |                                                           |==================                                |  36%   |                                                           |==================                                |  37%   |                                                           |===================                               |  37%   |                                                           |===================                               |  38%   |                                                           |===================                               |  39%   |                                                           |====================                              |  39%   |                                                           |====================                              |  40%   |                                                           |====================                              |  41%   |                                                           |=====================                             |  41%   |                                                           |=====================                             |  42%   |                                                           |=====================                             |  43%   |                                                           |======================                            |  43%   |                                                           |======================                            |  44%   |                                                           |======================                            |  45%   |                                                           |=======================                           |  45%   |                                                           |=======================                           |  46%   |                                                           |=======================                           |  47%   |                                                           |========================                          |  47%   |                                                           |========================                          |  48%   |                                                           |========================                          |  49%   |                                                           |=========================                         |  49%   |                                                           |=========================                         |  50%   |                                                           |=========================                         |  51%   |                                                           |==========================                        |  51%   |                                                           |==========================                        |  52%   |                                                           |==========================                        |  53%   |                                                           |===========================                       |  53%   |                                                           |===========================                       |  54%   |                                                           |===========================                       |  55%   |                                                           |============================                      |  55%   |                                                           |============================                      |  56%   |                                                           |============================                      |  57%   |                                                           |=============================                     |  57%   |                                                           |=============================                     |  58%   |                                                           |=============================                     |  59%   |                                                           |==============================                    |  59%   |                                                           |==============================                    |  60%   |                                                           |==============================                    |  61%   |                                                           |===============================                   |  61%   |                                                           |===============================                   |  62%   |                                                           |===============================                   |  63%   |                                                           |================================                  |  63%   |                                                           |================================                  |  64%   |                                                           |================================                  |  65%   |                                                           |=================================                 |  65%   |                                                           |=================================                 |  66%   |                                                           |=================================                 |  67%   |                                                           |==================================                |  67%   |                                                           |==================================                |  68%   |                                                           |==================================                |  69%   |                                                           |===================================               |  69%   |                                                           |===================================               |  70%   |                                                           |===================================               |  71%   |                                                           |====================================              |  71%   |                                                           |====================================              |  72%   |                                                           |====================================              |  73%   |                                                           |=====================================             |  73%   |                                                           |=====================================             |  74%   |                                                           |=====================================             |  75%   |                                                           |======================================            |  75%   |                                                           |======================================            |  76%   |                                                           |======================================            |  77%   |                                                           |=======================================           |  77%   |                                                           |=======================================           |  78%   |                                                           |=======================================           |  79%   |                                                           |========================================          |  79%   |                                                           |========================================          |  80%   |                                                           |========================================          |  81%   |                                                           |=========================================         |  81%   |                                                           |=========================================         |  82%   |                                                           |=========================================         |  83%   |                                                           |==========================================        |  83%   |                                                           |==========================================        |  84%   |                                                           |==========================================        |  85%   |                                                           |===========================================       |  85%   |                                                           |===========================================       |  86%   |                                                           |===========================================       |  87%   |                                                           |============================================      |  87%   |                                                           |============================================      |  88%   |                                                           |============================================      |  89%   |                                                           |=============================================     |  89%   |                                                           |=============================================     |  90%   |                                                           |=============================================     |  91%   |                                                           |==============================================    |  91%   |                                                           |==============================================    |  92%   |                                                           |==============================================    |  93%   |                                                           |===============================================   |  93%   |                                                           |===============================================   |  94%   |                                                           |===============================================   |  95%   |                                                           |================================================  |  95%   |                                                           |================================================  |  96%   |                                                           |================================================  |  97%   |                                                           |================================================= |  97%   |                                                           |================================================= |  98%   |                                                           |================================================= |  99%   |                                                           |==================================================|  99%   |                                                           |==================================================| 100% #> [1] Done get_inferences(ex_tfn_fcmconfr, analysis = c(\"input\")) #> $input_inferences #> $input_inferences$Guidance.Docs.for.Salt.Management #>            input crisp lower mode upper #> 1   adj_matrix_1     1     1    1     1 #> 2   adj_matrix_2     1     1    1     1 #> 3   adj_matrix_3     1     1    1     1 #> 4   adj_matrix_4     1     1    1     1 #> 5   adj_matrix_5     1     1    1     1 #> 6   adj_matrix_6     1     1    1     1 #> 7   adj_matrix_7     1     1    1     1 #> 8   adj_matrix_8     1     1    1     1 #> 9   adj_matrix_9     1     1    1     1 #> 10 adj_matrix_10     1     1    1     1 #> 11 adj_matrix_11     1     1    1     1 #> 12 adj_matrix_12     1     1    1     1 #> 13 adj_matrix_13     1     1    1     1 #> 14 adj_matrix_14     1     1    1     1 #> 15 adj_matrix_15     1     1    1     1 #> 16 adj_matrix_16     1     1    1     1 #> 17 adj_matrix_17     1     1    1     1 #> 18 adj_matrix_18     1     1    1     1 #> 19 adj_matrix_19     1     1    1     1 #> 20 adj_matrix_20     1     1    1     1 #> 21 adj_matrix_21     1     1    1     1 #> 22 adj_matrix_22     1     1    1     1 #> 23 adj_matrix_23     1     1    1     1 #> 24 adj_matrix_24     1     1    1     1 #> 25 adj_matrix_25     1     1    1     1 #> 26 adj_matrix_26     1     1    1     1 #> 27 adj_matrix_27     1     1    1     1 #> 28 adj_matrix_28     1     1    1     1 #> 29 adj_matrix_29     1     1    1     1 #> 30 adj_matrix_30     1     1    1     1 #>  #> $input_inferences$Public.Education.Programs #>            input         crisp         lower          mode         upper #> 1   adj_matrix_1  4.171136e-07  4.171136e-07  4.171136e-07  4.171136e-07 #> 2   adj_matrix_2  4.238413e-07  4.238413e-07  4.238413e-07  4.238413e-07 #> 3   adj_matrix_3  1.708820e-06  1.708820e-06  1.708820e-06  1.708820e-06 #> 4   adj_matrix_4  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 5   adj_matrix_5  4.171136e-07  4.171136e-07  4.171136e-07  4.171136e-07 #> 6   adj_matrix_6  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9 -1.076422e-07 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 10 adj_matrix_10  2.085568e-07  2.085568e-07  2.085568e-07  2.085568e-07 #> 11 adj_matrix_11  4.305689e-07  4.305689e-07  4.305689e-07  4.305689e-07 #> 12 adj_matrix_12  2.119206e-07  2.119206e-07  2.119206e-07  2.119206e-07 #> 13 adj_matrix_13 -1.009146e-07 -1.009146e-07 -1.009146e-07 -1.009146e-07 #> 14 adj_matrix_14  1.695365e-06  1.695365e-06  1.695365e-06  1.695365e-06 #> 15 adj_matrix_15  1.614633e-07  1.614633e-07  1.614633e-07  1.614633e-07 #> 16 adj_matrix_16  1.976751e-01  4.966368e-02  2.184841e-01  3.248774e-01 #> 17 adj_matrix_17 -1.506991e-06 -1.506991e-06 -1.506991e-06 -1.506991e-06 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 20 adj_matrix_20  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 21 adj_matrix_21  3.767478e-07  3.767478e-07  3.767478e-07  3.767478e-07 #> 22 adj_matrix_22  1.708820e-06  1.708820e-06  1.708820e-06  1.708820e-06 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24  8.073167e-08  8.073167e-08  8.073167e-08  8.073167e-08 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28  8.476826e-07  8.476826e-07  8.476826e-07  8.476826e-07 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #>  #> $input_inferences$Salts.Added.during.Water.Treatment #>            input         crisp         lower          mode         upper #> 1   adj_matrix_1  4.171136e-07  4.171136e-07  4.171136e-07  4.171136e-07 #> 2   adj_matrix_2 -3.780128e-06 -7.287071e-06 -3.781633e-06 -2.716813e-07 #> 3   adj_matrix_3  1.708820e-06  1.708820e-06  1.708820e-06  1.708820e-06 #> 4   adj_matrix_4  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 5   adj_matrix_5  4.171136e-07  4.171136e-07  4.171136e-07  4.171136e-07 #> 6   adj_matrix_6  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9 -1.076422e-07 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 10 adj_matrix_10  2.085568e-07  2.085568e-07  2.085568e-07  2.085568e-07 #> 11 adj_matrix_11  4.305689e-07  4.305689e-07  4.305689e-07  4.305689e-07 #> 12 adj_matrix_12  2.119206e-07  2.119206e-07  2.119206e-07  2.119206e-07 #> 13 adj_matrix_13 -1.009146e-07 -1.009146e-07 -1.009146e-07 -1.009146e-07 #> 14 adj_matrix_14  1.695365e-06  1.695365e-06  1.695365e-06  1.695365e-06 #> 15 adj_matrix_15  1.614633e-07  1.614633e-07  1.614633e-07  1.614633e-07 #> 16 adj_matrix_16  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 17 adj_matrix_17 -1.506991e-06 -1.506991e-06 -1.506991e-06 -1.506991e-06 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 20 adj_matrix_20  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 21 adj_matrix_21  3.767478e-07  3.767478e-07  3.767478e-07  3.767478e-07 #> 22 adj_matrix_22  1.708820e-06  1.708820e-06  1.708820e-06  1.708820e-06 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24  8.073167e-08  8.073167e-08  8.073167e-08  8.073167e-08 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28  8.476826e-07  8.476826e-07  8.476826e-07  8.476826e-07 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #>  #> $input_inferences$Salts.Added.by.Winter.Maintenance.Activities #>            input         crisp         lower          mode         upper #> 1   adj_matrix_1 -1.283727e-01 -2.649185e-01 -1.202008e-01  1.139210e-06 #> 2   adj_matrix_2 -2.548127e-01 -3.439474e-01 -2.785144e-01 -1.419764e-01 #> 3   adj_matrix_3 -1.401640e-01 -2.785162e-01 -1.419780e-01  2.126505e-06 #> 4   adj_matrix_4 -1.618616e-01 -3.031965e-01 -1.823903e-01  1.890719e-06 #> 5   adj_matrix_5 -2.659741e-01 -3.439469e-01 -2.912555e-01 -1.627199e-01 #> 6   adj_matrix_6  0.000000e+00 -4.509185e-07  0.000000e+00  4.509185e-07 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9 -1.076422e-07 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 10 adj_matrix_10 -2.306114e-01 -3.439469e-01 -2.504155e-01 -9.747171e-02 #> 11 adj_matrix_11 -2.765056e-01 -3.439440e-01 -3.031899e-01 -1.823828e-01 #> 12 adj_matrix_12 -2.454309e-01 -3.439472e-01 -2.677088e-01 -1.246366e-01 #> 13 adj_matrix_13 -1.159618e-01 -2.504161e-01 -9.747187e-02  2.606899e-06 #> 14 adj_matrix_14 -2.306111e-01 -3.439469e-01 -2.504156e-01 -9.747073e-02 #> 15 adj_matrix_15 -2.548117e-01 -3.439467e-01 -2.785133e-01 -1.419752e-01 #> 16 adj_matrix_16  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 17 adj_matrix_17 -8.938206e-02 -2.184904e-01 -4.966970e-02  1.394166e-05 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19 -1.401628e-01 -2.785142e-01 -1.419758e-01  1.654658e-06 #> 20 adj_matrix_20  0.000000e+00 -9.886287e-07  0.000000e+00  9.886287e-07 #> 21 adj_matrix_21 -1.159616e-01 -2.504168e-01 -9.747226e-02  4.176917e-06 #> 22 adj_matrix_22 -2.765124e-01 -3.439486e-01 -3.031974e-01 -1.823913e-01 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24 -1.618622e-01 -3.031964e-01 -1.823909e-01  5.964684e-07 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28 -2.659741e-01 -3.439469e-01 -2.912555e-01 -1.627198e-01 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00 -8.650037e-07  0.000000e+00  8.650037e-07 #>  #> $input_inferences$Ecosystem.Health #>            input      crisp         lower       mode        upper #> 1   adj_matrix_1 0.12513954  6.562469e-02 0.13535978 1.744341e-01 #> 2   adj_matrix_2 0.11780562  6.670194e-02 0.12905046 1.576644e-01 #> 3   adj_matrix_3 0.15907991  8.583128e-02 0.17279319 2.186153e-01 #> 4   adj_matrix_4 0.05907343  2.984654e-02 0.06344861 8.392516e-02 #> 5   adj_matrix_5 0.11173486  5.803894e-02 0.12066305 1.565026e-01 #> 6   adj_matrix_6 0.00000000 -1.823495e-05 0.00000000 1.823495e-05 #> 7   adj_matrix_7 0.00000000 -2.339399e-05 0.00000000 2.339399e-05 #> 8   adj_matrix_8 0.00000000 -3.734027e-06 0.00000000 3.734027e-06 #> 9   adj_matrix_9 0.07552588  3.467809e-02 0.07980185 1.120977e-01 #> 10 adj_matrix_10 0.10901490  6.987573e-02 0.12237908 1.347899e-01 #> 11 adj_matrix_11 0.01412492 -3.151840e-05 0.01061280 3.179348e-02 #> 12 adj_matrix_12 0.13681287  8.394626e-02 0.15173773 1.747546e-01 #> 13 adj_matrix_13 0.02335863  1.053170e-02 0.02454208 3.500210e-02 #> 14 adj_matrix_14 0.29763630  1.781593e-01 0.32645102 3.882986e-01 #> 15 adj_matrix_15 0.06754909  1.385923e-02 0.06857068 1.202174e-01 #> 16 adj_matrix_16 0.06273817 -9.634720e-07 0.06403258 1.241829e-01 #> 17 adj_matrix_17 0.01639325 -2.132187e-05 0.01232420 3.687688e-02 #> 18 adj_matrix_18 0.00000000 -1.785633e-05 0.00000000 1.785633e-05 #> 19 adj_matrix_19 0.06837071  3.776046e-02 0.07470845 9.264320e-02 #> 20 adj_matrix_20 0.00000000 -1.313644e-05 0.00000000 1.313644e-05 #> 21 adj_matrix_21 0.01715297  3.418647e-03 0.01717014 3.087011e-02 #> 22 adj_matrix_22 0.07649122  1.581755e-02 0.07796207 1.356940e-01 #> 23 adj_matrix_23 0.14736276  9.639699e-02 0.16507281 1.806185e-01 #> 24 adj_matrix_24 0.09572051  6.100563e-02 0.10751282 1.186431e-01 #> 25 adj_matrix_25 0.00000000 -8.614831e-06 0.00000000 8.614831e-06 #> 26 adj_matrix_26 0.00000000  0.000000e+00 0.00000000 0.000000e+00 #> 27 adj_matrix_27 0.00000000 -2.207469e-05 0.00000000 2.207469e-05 #> 28 adj_matrix_28 0.19577555  1.179967e-01 0.21512975 2.542002e-01 #> 29 adj_matrix_29 0.00000000 -2.906392e-05 0.00000000 2.906392e-05 #> 30 adj_matrix_30 0.00000000 -1.548227e-05 0.00000000 1.548227e-05 #>  #> $input_inferences$Public.Awareness.of.Reservoir.Salinization #>            input         crisp         lower          mode         upper #> 1   adj_matrix_1  4.171136e-07  4.171136e-07  4.171136e-07  4.171136e-07 #> 2   adj_matrix_2  4.238413e-07  4.238413e-07  4.238413e-07  4.238413e-07 #> 3   adj_matrix_3  1.708820e-06  1.708820e-06  1.708820e-06  1.708820e-06 #> 4   adj_matrix_4  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 5   adj_matrix_5  4.171136e-07  4.171136e-07  4.171136e-07  4.171136e-07 #> 6   adj_matrix_6  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9 -1.076422e-07 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 10 adj_matrix_10  2.085568e-07  2.085568e-07  2.085568e-07  2.085568e-07 #> 11 adj_matrix_11  4.305689e-07  4.305689e-07  4.305689e-07  4.305689e-07 #> 12 adj_matrix_12  2.119206e-07  2.119206e-07  2.119206e-07  2.119206e-07 #> 13 adj_matrix_13 -1.009146e-07 -1.009146e-07 -1.009146e-07 -1.009146e-07 #> 14 adj_matrix_14  1.695365e-06  1.695365e-06  1.695365e-06  1.695365e-06 #> 15 adj_matrix_15  1.614633e-07  1.614633e-07  1.614633e-07  1.614633e-07 #> 16 adj_matrix_16  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 17 adj_matrix_17 -1.506991e-06 -1.506991e-06 -1.506991e-06 -1.506991e-06 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 20 adj_matrix_20  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 21 adj_matrix_21 -9.156028e-03 -2.060992e-02 -6.872083e-03  1.392007e-05 #> 22 adj_matrix_22  1.708820e-06  1.708820e-06  1.708820e-06  1.708820e-06 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24  8.073167e-08  8.073167e-08  8.073167e-08  8.073167e-08 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28  8.476826e-07  8.476826e-07  8.476826e-07  8.476826e-07 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #>  #> $input_inferences$Salinization.of.the.Reservoir #>            input       crisp         lower        mode         upper #> 1   adj_matrix_1 -0.18973459 -3.262421e-01 -0.19827639 -4.468532e-02 #> 2   adj_matrix_2 -0.16877553 -2.217470e-01 -0.18532772 -9.925181e-02 #> 3   adj_matrix_3 -0.25019482 -3.727980e-01 -0.28119287 -9.659356e-02 #> 4   adj_matrix_4 -0.08554036 -1.451711e-01 -0.08721721 -2.423273e-02 #> 5   adj_matrix_5 -0.16738432 -2.291275e-01 -0.18199123 -9.103424e-02 #> 6   adj_matrix_6  0.00000000 -2.167430e-06  0.00000000  2.167430e-06 #> 7   adj_matrix_7  0.00000000 -6.586473e-06  0.00000000  6.586473e-06 #> 8   adj_matrix_8  0.00000000 -8.743405e-07  0.00000000  8.743405e-07 #> 9   adj_matrix_9 -0.11596324 -2.504205e-01 -0.09747409  4.872594e-06 #> 10 adj_matrix_10 -0.14163499 -2.049990e-01 -0.15158721 -6.831878e-02 #> 11 adj_matrix_11 -0.05314430 -1.318708e-01 -0.02758877  2.662699e-05 #> 12 adj_matrix_12 -0.19012481 -2.153682e-01 -0.21536762 -1.396386e-01 #> 13 adj_matrix_13 -0.03511896 -7.988033e-02 -0.02548262  6.068898e-06 #> 14 adj_matrix_14 -0.14846821 -2.049958e-01 -0.16105880 -7.934998e-02 #> 15 adj_matrix_15 -0.13892081 -2.217377e-01 -0.14442093 -5.060377e-02 #> 16 adj_matrix_16 -0.16186101 -3.032049e-01 -0.18239155  1.338811e-05 #> 17 adj_matrix_17 -0.06165813 -8.755650e-02 -0.06623863 -3.117925e-02 #> 18 adj_matrix_18  0.00000000 -8.926425e-07  0.00000000  8.926425e-07 #> 19 adj_matrix_19 -0.09482100 -1.335258e-01 -0.10219718 -4.873998e-02 #> 20 adj_matrix_20  0.00000000 -5.044662e-06  0.00000000  5.044662e-06 #> 21 adj_matrix_21 -0.03439455 -7.426995e-02 -0.02892287  9.173772e-06 #> 22 adj_matrix_22 -0.15852674 -2.359207e-01 -0.16873413 -7.092534e-02 #> 23 adj_matrix_23 -0.19767948 -3.248824e-01 -0.21848965 -4.966640e-02 #> 24 adj_matrix_24 -0.12326461 -1.519497e-01 -0.13827989 -7.956420e-02 #> 25 adj_matrix_25  0.00000000 -1.501920e-06  0.00000000  1.501920e-06 #> 26 adj_matrix_26  0.00000000 -2.008037e-05  0.00000000  2.008037e-05 #> 27 adj_matrix_27  0.00000000 -2.783859e-06  0.00000000  2.783859e-06 #> 28 adj_matrix_28 -0.30638416 -4.136693e-01 -0.33891614 -1.665670e-01 #> 29 adj_matrix_29  0.00000000 -1.138000e-05  0.00000000  1.138000e-05 #> 30 adj_matrix_30  0.00000000 -3.414352e-06  0.00000000  3.414352e-06 #>  #>  get_inferences(ex_tfn_fcmconfr, analysis = c(\"input\", \"aggregate\")) #> $input_inferences #> $input_inferences$Guidance.Docs.for.Salt.Management #>            input crisp lower mode upper #> 1   adj_matrix_1     1     1    1     1 #> 2   adj_matrix_2     1     1    1     1 #> 3   adj_matrix_3     1     1    1     1 #> 4   adj_matrix_4     1     1    1     1 #> 5   adj_matrix_5     1     1    1     1 #> 6   adj_matrix_6     1     1    1     1 #> 7   adj_matrix_7     1     1    1     1 #> 8   adj_matrix_8     1     1    1     1 #> 9   adj_matrix_9     1     1    1     1 #> 10 adj_matrix_10     1     1    1     1 #> 11 adj_matrix_11     1     1    1     1 #> 12 adj_matrix_12     1     1    1     1 #> 13 adj_matrix_13     1     1    1     1 #> 14 adj_matrix_14     1     1    1     1 #> 15 adj_matrix_15     1     1    1     1 #> 16 adj_matrix_16     1     1    1     1 #> 17 adj_matrix_17     1     1    1     1 #> 18 adj_matrix_18     1     1    1     1 #> 19 adj_matrix_19     1     1    1     1 #> 20 adj_matrix_20     1     1    1     1 #> 21 adj_matrix_21     1     1    1     1 #> 22 adj_matrix_22     1     1    1     1 #> 23 adj_matrix_23     1     1    1     1 #> 24 adj_matrix_24     1     1    1     1 #> 25 adj_matrix_25     1     1    1     1 #> 26 adj_matrix_26     1     1    1     1 #> 27 adj_matrix_27     1     1    1     1 #> 28 adj_matrix_28     1     1    1     1 #> 29 adj_matrix_29     1     1    1     1 #> 30 adj_matrix_30     1     1    1     1 #>  #> $input_inferences$Public.Education.Programs #>            input         crisp         lower          mode         upper #> 1   adj_matrix_1  4.171136e-07  4.171136e-07  4.171136e-07  4.171136e-07 #> 2   adj_matrix_2  4.238413e-07  4.238413e-07  4.238413e-07  4.238413e-07 #> 3   adj_matrix_3  1.708820e-06  1.708820e-06  1.708820e-06  1.708820e-06 #> 4   adj_matrix_4  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 5   adj_matrix_5  4.171136e-07  4.171136e-07  4.171136e-07  4.171136e-07 #> 6   adj_matrix_6  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9 -1.076422e-07 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 10 adj_matrix_10  2.085568e-07  2.085568e-07  2.085568e-07  2.085568e-07 #> 11 adj_matrix_11  4.305689e-07  4.305689e-07  4.305689e-07  4.305689e-07 #> 12 adj_matrix_12  2.119206e-07  2.119206e-07  2.119206e-07  2.119206e-07 #> 13 adj_matrix_13 -1.009146e-07 -1.009146e-07 -1.009146e-07 -1.009146e-07 #> 14 adj_matrix_14  1.695365e-06  1.695365e-06  1.695365e-06  1.695365e-06 #> 15 adj_matrix_15  1.614633e-07  1.614633e-07  1.614633e-07  1.614633e-07 #> 16 adj_matrix_16  1.976751e-01  4.966368e-02  2.184841e-01  3.248774e-01 #> 17 adj_matrix_17 -1.506991e-06 -1.506991e-06 -1.506991e-06 -1.506991e-06 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 20 adj_matrix_20  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 21 adj_matrix_21  3.767478e-07  3.767478e-07  3.767478e-07  3.767478e-07 #> 22 adj_matrix_22  1.708820e-06  1.708820e-06  1.708820e-06  1.708820e-06 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24  8.073167e-08  8.073167e-08  8.073167e-08  8.073167e-08 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28  8.476826e-07  8.476826e-07  8.476826e-07  8.476826e-07 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #>  #> $input_inferences$Salts.Added.during.Water.Treatment #>            input         crisp         lower          mode         upper #> 1   adj_matrix_1  4.171136e-07  4.171136e-07  4.171136e-07  4.171136e-07 #> 2   adj_matrix_2 -3.780128e-06 -7.287071e-06 -3.781633e-06 -2.716813e-07 #> 3   adj_matrix_3  1.708820e-06  1.708820e-06  1.708820e-06  1.708820e-06 #> 4   adj_matrix_4  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 5   adj_matrix_5  4.171136e-07  4.171136e-07  4.171136e-07  4.171136e-07 #> 6   adj_matrix_6  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9 -1.076422e-07 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 10 adj_matrix_10  2.085568e-07  2.085568e-07  2.085568e-07  2.085568e-07 #> 11 adj_matrix_11  4.305689e-07  4.305689e-07  4.305689e-07  4.305689e-07 #> 12 adj_matrix_12  2.119206e-07  2.119206e-07  2.119206e-07  2.119206e-07 #> 13 adj_matrix_13 -1.009146e-07 -1.009146e-07 -1.009146e-07 -1.009146e-07 #> 14 adj_matrix_14  1.695365e-06  1.695365e-06  1.695365e-06  1.695365e-06 #> 15 adj_matrix_15  1.614633e-07  1.614633e-07  1.614633e-07  1.614633e-07 #> 16 adj_matrix_16  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 17 adj_matrix_17 -1.506991e-06 -1.506991e-06 -1.506991e-06 -1.506991e-06 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 20 adj_matrix_20  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 21 adj_matrix_21  3.767478e-07  3.767478e-07  3.767478e-07  3.767478e-07 #> 22 adj_matrix_22  1.708820e-06  1.708820e-06  1.708820e-06  1.708820e-06 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24  8.073167e-08  8.073167e-08  8.073167e-08  8.073167e-08 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28  8.476826e-07  8.476826e-07  8.476826e-07  8.476826e-07 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #>  #> $input_inferences$Salts.Added.by.Winter.Maintenance.Activities #>            input         crisp         lower          mode         upper #> 1   adj_matrix_1 -1.283727e-01 -2.649185e-01 -1.202008e-01  1.139210e-06 #> 2   adj_matrix_2 -2.548127e-01 -3.439474e-01 -2.785144e-01 -1.419764e-01 #> 3   adj_matrix_3 -1.401640e-01 -2.785162e-01 -1.419780e-01  2.126505e-06 #> 4   adj_matrix_4 -1.618616e-01 -3.031965e-01 -1.823903e-01  1.890719e-06 #> 5   adj_matrix_5 -2.659741e-01 -3.439469e-01 -2.912555e-01 -1.627199e-01 #> 6   adj_matrix_6  0.000000e+00 -4.509185e-07  0.000000e+00  4.509185e-07 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9 -1.076422e-07 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 10 adj_matrix_10 -2.306114e-01 -3.439469e-01 -2.504155e-01 -9.747171e-02 #> 11 adj_matrix_11 -2.765056e-01 -3.439440e-01 -3.031899e-01 -1.823828e-01 #> 12 adj_matrix_12 -2.454309e-01 -3.439472e-01 -2.677088e-01 -1.246366e-01 #> 13 adj_matrix_13 -1.159618e-01 -2.504161e-01 -9.747187e-02  2.606899e-06 #> 14 adj_matrix_14 -2.306111e-01 -3.439469e-01 -2.504156e-01 -9.747073e-02 #> 15 adj_matrix_15 -2.548117e-01 -3.439467e-01 -2.785133e-01 -1.419752e-01 #> 16 adj_matrix_16  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 17 adj_matrix_17 -8.938206e-02 -2.184904e-01 -4.966970e-02  1.394166e-05 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19 -1.401628e-01 -2.785142e-01 -1.419758e-01  1.654658e-06 #> 20 adj_matrix_20  0.000000e+00 -9.886287e-07  0.000000e+00  9.886287e-07 #> 21 adj_matrix_21 -1.159616e-01 -2.504168e-01 -9.747226e-02  4.176917e-06 #> 22 adj_matrix_22 -2.765124e-01 -3.439486e-01 -3.031974e-01 -1.823913e-01 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24 -1.618622e-01 -3.031964e-01 -1.823909e-01  5.964684e-07 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28 -2.659741e-01 -3.439469e-01 -2.912555e-01 -1.627198e-01 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00 -8.650037e-07  0.000000e+00  8.650037e-07 #>  #> $input_inferences$Ecosystem.Health #>            input      crisp         lower       mode        upper #> 1   adj_matrix_1 0.12513954  6.562469e-02 0.13535978 1.744341e-01 #> 2   adj_matrix_2 0.11780562  6.670194e-02 0.12905046 1.576644e-01 #> 3   adj_matrix_3 0.15907991  8.583128e-02 0.17279319 2.186153e-01 #> 4   adj_matrix_4 0.05907343  2.984654e-02 0.06344861 8.392516e-02 #> 5   adj_matrix_5 0.11173486  5.803894e-02 0.12066305 1.565026e-01 #> 6   adj_matrix_6 0.00000000 -1.823495e-05 0.00000000 1.823495e-05 #> 7   adj_matrix_7 0.00000000 -2.339399e-05 0.00000000 2.339399e-05 #> 8   adj_matrix_8 0.00000000 -3.734027e-06 0.00000000 3.734027e-06 #> 9   adj_matrix_9 0.07552588  3.467809e-02 0.07980185 1.120977e-01 #> 10 adj_matrix_10 0.10901490  6.987573e-02 0.12237908 1.347899e-01 #> 11 adj_matrix_11 0.01412492 -3.151840e-05 0.01061280 3.179348e-02 #> 12 adj_matrix_12 0.13681287  8.394626e-02 0.15173773 1.747546e-01 #> 13 adj_matrix_13 0.02335863  1.053170e-02 0.02454208 3.500210e-02 #> 14 adj_matrix_14 0.29763630  1.781593e-01 0.32645102 3.882986e-01 #> 15 adj_matrix_15 0.06754909  1.385923e-02 0.06857068 1.202174e-01 #> 16 adj_matrix_16 0.06273817 -9.634720e-07 0.06403258 1.241829e-01 #> 17 adj_matrix_17 0.01639325 -2.132187e-05 0.01232420 3.687688e-02 #> 18 adj_matrix_18 0.00000000 -1.785633e-05 0.00000000 1.785633e-05 #> 19 adj_matrix_19 0.06837071  3.776046e-02 0.07470845 9.264320e-02 #> 20 adj_matrix_20 0.00000000 -1.313644e-05 0.00000000 1.313644e-05 #> 21 adj_matrix_21 0.01715297  3.418647e-03 0.01717014 3.087011e-02 #> 22 adj_matrix_22 0.07649122  1.581755e-02 0.07796207 1.356940e-01 #> 23 adj_matrix_23 0.14736276  9.639699e-02 0.16507281 1.806185e-01 #> 24 adj_matrix_24 0.09572051  6.100563e-02 0.10751282 1.186431e-01 #> 25 adj_matrix_25 0.00000000 -8.614831e-06 0.00000000 8.614831e-06 #> 26 adj_matrix_26 0.00000000  0.000000e+00 0.00000000 0.000000e+00 #> 27 adj_matrix_27 0.00000000 -2.207469e-05 0.00000000 2.207469e-05 #> 28 adj_matrix_28 0.19577555  1.179967e-01 0.21512975 2.542002e-01 #> 29 adj_matrix_29 0.00000000 -2.906392e-05 0.00000000 2.906392e-05 #> 30 adj_matrix_30 0.00000000 -1.548227e-05 0.00000000 1.548227e-05 #>  #> $input_inferences$Public.Awareness.of.Reservoir.Salinization #>            input         crisp         lower          mode         upper #> 1   adj_matrix_1  4.171136e-07  4.171136e-07  4.171136e-07  4.171136e-07 #> 2   adj_matrix_2  4.238413e-07  4.238413e-07  4.238413e-07  4.238413e-07 #> 3   adj_matrix_3  1.708820e-06  1.708820e-06  1.708820e-06  1.708820e-06 #> 4   adj_matrix_4  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 5   adj_matrix_5  4.171136e-07  4.171136e-07  4.171136e-07  4.171136e-07 #> 6   adj_matrix_6  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9 -1.076422e-07 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 10 adj_matrix_10  2.085568e-07  2.085568e-07  2.085568e-07  2.085568e-07 #> 11 adj_matrix_11  4.305689e-07  4.305689e-07  4.305689e-07  4.305689e-07 #> 12 adj_matrix_12  2.119206e-07  2.119206e-07  2.119206e-07  2.119206e-07 #> 13 adj_matrix_13 -1.009146e-07 -1.009146e-07 -1.009146e-07 -1.009146e-07 #> 14 adj_matrix_14  1.695365e-06  1.695365e-06  1.695365e-06  1.695365e-06 #> 15 adj_matrix_15  1.614633e-07  1.614633e-07  1.614633e-07  1.614633e-07 #> 16 adj_matrix_16  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 17 adj_matrix_17 -1.506991e-06 -1.506991e-06 -1.506991e-06 -1.506991e-06 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 20 adj_matrix_20  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 21 adj_matrix_21 -9.156028e-03 -2.060992e-02 -6.872083e-03  1.392007e-05 #> 22 adj_matrix_22  1.708820e-06  1.708820e-06  1.708820e-06  1.708820e-06 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24  8.073167e-08  8.073167e-08  8.073167e-08  8.073167e-08 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28  8.476826e-07  8.476826e-07  8.476826e-07  8.476826e-07 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #>  #> $input_inferences$Salinization.of.the.Reservoir #>            input       crisp         lower        mode         upper #> 1   adj_matrix_1 -0.18973459 -3.262421e-01 -0.19827639 -4.468532e-02 #> 2   adj_matrix_2 -0.16877553 -2.217470e-01 -0.18532772 -9.925181e-02 #> 3   adj_matrix_3 -0.25019482 -3.727980e-01 -0.28119287 -9.659356e-02 #> 4   adj_matrix_4 -0.08554036 -1.451711e-01 -0.08721721 -2.423273e-02 #> 5   adj_matrix_5 -0.16738432 -2.291275e-01 -0.18199123 -9.103424e-02 #> 6   adj_matrix_6  0.00000000 -2.167430e-06  0.00000000  2.167430e-06 #> 7   adj_matrix_7  0.00000000 -6.586473e-06  0.00000000  6.586473e-06 #> 8   adj_matrix_8  0.00000000 -8.743405e-07  0.00000000  8.743405e-07 #> 9   adj_matrix_9 -0.11596324 -2.504205e-01 -0.09747409  4.872594e-06 #> 10 adj_matrix_10 -0.14163499 -2.049990e-01 -0.15158721 -6.831878e-02 #> 11 adj_matrix_11 -0.05314430 -1.318708e-01 -0.02758877  2.662699e-05 #> 12 adj_matrix_12 -0.19012481 -2.153682e-01 -0.21536762 -1.396386e-01 #> 13 adj_matrix_13 -0.03511896 -7.988033e-02 -0.02548262  6.068898e-06 #> 14 adj_matrix_14 -0.14846821 -2.049958e-01 -0.16105880 -7.934998e-02 #> 15 adj_matrix_15 -0.13892081 -2.217377e-01 -0.14442093 -5.060377e-02 #> 16 adj_matrix_16 -0.16186101 -3.032049e-01 -0.18239155  1.338811e-05 #> 17 adj_matrix_17 -0.06165813 -8.755650e-02 -0.06623863 -3.117925e-02 #> 18 adj_matrix_18  0.00000000 -8.926425e-07  0.00000000  8.926425e-07 #> 19 adj_matrix_19 -0.09482100 -1.335258e-01 -0.10219718 -4.873998e-02 #> 20 adj_matrix_20  0.00000000 -5.044662e-06  0.00000000  5.044662e-06 #> 21 adj_matrix_21 -0.03439455 -7.426995e-02 -0.02892287  9.173772e-06 #> 22 adj_matrix_22 -0.15852674 -2.359207e-01 -0.16873413 -7.092534e-02 #> 23 adj_matrix_23 -0.19767948 -3.248824e-01 -0.21848965 -4.966640e-02 #> 24 adj_matrix_24 -0.12326461 -1.519497e-01 -0.13827989 -7.956420e-02 #> 25 adj_matrix_25  0.00000000 -1.501920e-06  0.00000000  1.501920e-06 #> 26 adj_matrix_26  0.00000000 -2.008037e-05  0.00000000  2.008037e-05 #> 27 adj_matrix_27  0.00000000 -2.783859e-06  0.00000000  2.783859e-06 #> 28 adj_matrix_28 -0.30638416 -4.136693e-01 -0.33891614 -1.665670e-01 #> 29 adj_matrix_29  0.00000000 -1.138000e-05  0.00000000  1.138000e-05 #> 30 adj_matrix_30  0.00000000 -3.414352e-06  0.00000000  3.414352e-06 #>  #>  #> $aggregate_inferences #>           input Guidance.Docs.for.Salt.Management #> final aggregate                           1, 1, 1 #>                   Public.Education.Programs #> final 0.001666766, 0.008331918, 0.014991153 #>                Salts.Added.during.Water.Treatment #> final -2.498580e-04, -1.387161e-04, -2.757432e-05 #>       Salts.Added.by.Winter.Maintenance.Activities #> final        -0.21240256, -0.13590808, -0.04604265 #>                         Ecosystem.Health #> final 0.03361063, 0.08033662, 0.11533175 #>       Public.Awareness.of.Reservoir.Salinization #> final -2.374269e-03, -7.911801e-04, 5.982716e-07 #>               Salinization.of.the.Reservoir #> final -0.18732861, -0.12413998, -0.04472772 #>  get_inferences(ex_tfn_fcmconfr, analysis = c(\"input\", \"aggregate\", \"mc\")) #> $input_inferences #> $input_inferences$Guidance.Docs.for.Salt.Management #>            input crisp lower mode upper #> 1   adj_matrix_1     1     1    1     1 #> 2   adj_matrix_2     1     1    1     1 #> 3   adj_matrix_3     1     1    1     1 #> 4   adj_matrix_4     1     1    1     1 #> 5   adj_matrix_5     1     1    1     1 #> 6   adj_matrix_6     1     1    1     1 #> 7   adj_matrix_7     1     1    1     1 #> 8   adj_matrix_8     1     1    1     1 #> 9   adj_matrix_9     1     1    1     1 #> 10 adj_matrix_10     1     1    1     1 #> 11 adj_matrix_11     1     1    1     1 #> 12 adj_matrix_12     1     1    1     1 #> 13 adj_matrix_13     1     1    1     1 #> 14 adj_matrix_14     1     1    1     1 #> 15 adj_matrix_15     1     1    1     1 #> 16 adj_matrix_16     1     1    1     1 #> 17 adj_matrix_17     1     1    1     1 #> 18 adj_matrix_18     1     1    1     1 #> 19 adj_matrix_19     1     1    1     1 #> 20 adj_matrix_20     1     1    1     1 #> 21 adj_matrix_21     1     1    1     1 #> 22 adj_matrix_22     1     1    1     1 #> 23 adj_matrix_23     1     1    1     1 #> 24 adj_matrix_24     1     1    1     1 #> 25 adj_matrix_25     1     1    1     1 #> 26 adj_matrix_26     1     1    1     1 #> 27 adj_matrix_27     1     1    1     1 #> 28 adj_matrix_28     1     1    1     1 #> 29 adj_matrix_29     1     1    1     1 #> 30 adj_matrix_30     1     1    1     1 #>  #> $input_inferences$Public.Education.Programs #>            input         crisp         lower          mode         upper #> 1   adj_matrix_1  4.171136e-07  4.171136e-07  4.171136e-07  4.171136e-07 #> 2   adj_matrix_2  4.238413e-07  4.238413e-07  4.238413e-07  4.238413e-07 #> 3   adj_matrix_3  1.708820e-06  1.708820e-06  1.708820e-06  1.708820e-06 #> 4   adj_matrix_4  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 5   adj_matrix_5  4.171136e-07  4.171136e-07  4.171136e-07  4.171136e-07 #> 6   adj_matrix_6  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9 -1.076422e-07 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 10 adj_matrix_10  2.085568e-07  2.085568e-07  2.085568e-07  2.085568e-07 #> 11 adj_matrix_11  4.305689e-07  4.305689e-07  4.305689e-07  4.305689e-07 #> 12 adj_matrix_12  2.119206e-07  2.119206e-07  2.119206e-07  2.119206e-07 #> 13 adj_matrix_13 -1.009146e-07 -1.009146e-07 -1.009146e-07 -1.009146e-07 #> 14 adj_matrix_14  1.695365e-06  1.695365e-06  1.695365e-06  1.695365e-06 #> 15 adj_matrix_15  1.614633e-07  1.614633e-07  1.614633e-07  1.614633e-07 #> 16 adj_matrix_16  1.976751e-01  4.966368e-02  2.184841e-01  3.248774e-01 #> 17 adj_matrix_17 -1.506991e-06 -1.506991e-06 -1.506991e-06 -1.506991e-06 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 20 adj_matrix_20  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 21 adj_matrix_21  3.767478e-07  3.767478e-07  3.767478e-07  3.767478e-07 #> 22 adj_matrix_22  1.708820e-06  1.708820e-06  1.708820e-06  1.708820e-06 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24  8.073167e-08  8.073167e-08  8.073167e-08  8.073167e-08 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28  8.476826e-07  8.476826e-07  8.476826e-07  8.476826e-07 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #>  #> $input_inferences$Salts.Added.during.Water.Treatment #>            input         crisp         lower          mode         upper #> 1   adj_matrix_1  4.171136e-07  4.171136e-07  4.171136e-07  4.171136e-07 #> 2   adj_matrix_2 -3.780128e-06 -7.287071e-06 -3.781633e-06 -2.716813e-07 #> 3   adj_matrix_3  1.708820e-06  1.708820e-06  1.708820e-06  1.708820e-06 #> 4   adj_matrix_4  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 5   adj_matrix_5  4.171136e-07  4.171136e-07  4.171136e-07  4.171136e-07 #> 6   adj_matrix_6  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9 -1.076422e-07 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 10 adj_matrix_10  2.085568e-07  2.085568e-07  2.085568e-07  2.085568e-07 #> 11 adj_matrix_11  4.305689e-07  4.305689e-07  4.305689e-07  4.305689e-07 #> 12 adj_matrix_12  2.119206e-07  2.119206e-07  2.119206e-07  2.119206e-07 #> 13 adj_matrix_13 -1.009146e-07 -1.009146e-07 -1.009146e-07 -1.009146e-07 #> 14 adj_matrix_14  1.695365e-06  1.695365e-06  1.695365e-06  1.695365e-06 #> 15 adj_matrix_15  1.614633e-07  1.614633e-07  1.614633e-07  1.614633e-07 #> 16 adj_matrix_16  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 17 adj_matrix_17 -1.506991e-06 -1.506991e-06 -1.506991e-06 -1.506991e-06 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 20 adj_matrix_20  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 21 adj_matrix_21  3.767478e-07  3.767478e-07  3.767478e-07  3.767478e-07 #> 22 adj_matrix_22  1.708820e-06  1.708820e-06  1.708820e-06  1.708820e-06 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24  8.073167e-08  8.073167e-08  8.073167e-08  8.073167e-08 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28  8.476826e-07  8.476826e-07  8.476826e-07  8.476826e-07 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #>  #> $input_inferences$Salts.Added.by.Winter.Maintenance.Activities #>            input         crisp         lower          mode         upper #> 1   adj_matrix_1 -1.283727e-01 -2.649185e-01 -1.202008e-01  1.139210e-06 #> 2   adj_matrix_2 -2.548127e-01 -3.439474e-01 -2.785144e-01 -1.419764e-01 #> 3   adj_matrix_3 -1.401640e-01 -2.785162e-01 -1.419780e-01  2.126505e-06 #> 4   adj_matrix_4 -1.618616e-01 -3.031965e-01 -1.823903e-01  1.890719e-06 #> 5   adj_matrix_5 -2.659741e-01 -3.439469e-01 -2.912555e-01 -1.627199e-01 #> 6   adj_matrix_6  0.000000e+00 -4.509185e-07  0.000000e+00  4.509185e-07 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9 -1.076422e-07 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 10 adj_matrix_10 -2.306114e-01 -3.439469e-01 -2.504155e-01 -9.747171e-02 #> 11 adj_matrix_11 -2.765056e-01 -3.439440e-01 -3.031899e-01 -1.823828e-01 #> 12 adj_matrix_12 -2.454309e-01 -3.439472e-01 -2.677088e-01 -1.246366e-01 #> 13 adj_matrix_13 -1.159618e-01 -2.504161e-01 -9.747187e-02  2.606899e-06 #> 14 adj_matrix_14 -2.306111e-01 -3.439469e-01 -2.504156e-01 -9.747073e-02 #> 15 adj_matrix_15 -2.548117e-01 -3.439467e-01 -2.785133e-01 -1.419752e-01 #> 16 adj_matrix_16  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 17 adj_matrix_17 -8.938206e-02 -2.184904e-01 -4.966970e-02  1.394166e-05 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19 -1.401628e-01 -2.785142e-01 -1.419758e-01  1.654658e-06 #> 20 adj_matrix_20  0.000000e+00 -9.886287e-07  0.000000e+00  9.886287e-07 #> 21 adj_matrix_21 -1.159616e-01 -2.504168e-01 -9.747226e-02  4.176917e-06 #> 22 adj_matrix_22 -2.765124e-01 -3.439486e-01 -3.031974e-01 -1.823913e-01 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24 -1.618622e-01 -3.031964e-01 -1.823909e-01  5.964684e-07 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28 -2.659741e-01 -3.439469e-01 -2.912555e-01 -1.627198e-01 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00 -8.650037e-07  0.000000e+00  8.650037e-07 #>  #> $input_inferences$Ecosystem.Health #>            input      crisp         lower       mode        upper #> 1   adj_matrix_1 0.12513954  6.562469e-02 0.13535978 1.744341e-01 #> 2   adj_matrix_2 0.11780562  6.670194e-02 0.12905046 1.576644e-01 #> 3   adj_matrix_3 0.15907991  8.583128e-02 0.17279319 2.186153e-01 #> 4   adj_matrix_4 0.05907343  2.984654e-02 0.06344861 8.392516e-02 #> 5   adj_matrix_5 0.11173486  5.803894e-02 0.12066305 1.565026e-01 #> 6   adj_matrix_6 0.00000000 -1.823495e-05 0.00000000 1.823495e-05 #> 7   adj_matrix_7 0.00000000 -2.339399e-05 0.00000000 2.339399e-05 #> 8   adj_matrix_8 0.00000000 -3.734027e-06 0.00000000 3.734027e-06 #> 9   adj_matrix_9 0.07552588  3.467809e-02 0.07980185 1.120977e-01 #> 10 adj_matrix_10 0.10901490  6.987573e-02 0.12237908 1.347899e-01 #> 11 adj_matrix_11 0.01412492 -3.151840e-05 0.01061280 3.179348e-02 #> 12 adj_matrix_12 0.13681287  8.394626e-02 0.15173773 1.747546e-01 #> 13 adj_matrix_13 0.02335863  1.053170e-02 0.02454208 3.500210e-02 #> 14 adj_matrix_14 0.29763630  1.781593e-01 0.32645102 3.882986e-01 #> 15 adj_matrix_15 0.06754909  1.385923e-02 0.06857068 1.202174e-01 #> 16 adj_matrix_16 0.06273817 -9.634720e-07 0.06403258 1.241829e-01 #> 17 adj_matrix_17 0.01639325 -2.132187e-05 0.01232420 3.687688e-02 #> 18 adj_matrix_18 0.00000000 -1.785633e-05 0.00000000 1.785633e-05 #> 19 adj_matrix_19 0.06837071  3.776046e-02 0.07470845 9.264320e-02 #> 20 adj_matrix_20 0.00000000 -1.313644e-05 0.00000000 1.313644e-05 #> 21 adj_matrix_21 0.01715297  3.418647e-03 0.01717014 3.087011e-02 #> 22 adj_matrix_22 0.07649122  1.581755e-02 0.07796207 1.356940e-01 #> 23 adj_matrix_23 0.14736276  9.639699e-02 0.16507281 1.806185e-01 #> 24 adj_matrix_24 0.09572051  6.100563e-02 0.10751282 1.186431e-01 #> 25 adj_matrix_25 0.00000000 -8.614831e-06 0.00000000 8.614831e-06 #> 26 adj_matrix_26 0.00000000  0.000000e+00 0.00000000 0.000000e+00 #> 27 adj_matrix_27 0.00000000 -2.207469e-05 0.00000000 2.207469e-05 #> 28 adj_matrix_28 0.19577555  1.179967e-01 0.21512975 2.542002e-01 #> 29 adj_matrix_29 0.00000000 -2.906392e-05 0.00000000 2.906392e-05 #> 30 adj_matrix_30 0.00000000 -1.548227e-05 0.00000000 1.548227e-05 #>  #> $input_inferences$Public.Awareness.of.Reservoir.Salinization #>            input         crisp         lower          mode         upper #> 1   adj_matrix_1  4.171136e-07  4.171136e-07  4.171136e-07  4.171136e-07 #> 2   adj_matrix_2  4.238413e-07  4.238413e-07  4.238413e-07  4.238413e-07 #> 3   adj_matrix_3  1.708820e-06  1.708820e-06  1.708820e-06  1.708820e-06 #> 4   adj_matrix_4  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 5   adj_matrix_5  4.171136e-07  4.171136e-07  4.171136e-07  4.171136e-07 #> 6   adj_matrix_6  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9 -1.076422e-07 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 10 adj_matrix_10  2.085568e-07  2.085568e-07  2.085568e-07  2.085568e-07 #> 11 adj_matrix_11  4.305689e-07  4.305689e-07  4.305689e-07  4.305689e-07 #> 12 adj_matrix_12  2.119206e-07  2.119206e-07  2.119206e-07  2.119206e-07 #> 13 adj_matrix_13 -1.009146e-07 -1.009146e-07 -1.009146e-07 -1.009146e-07 #> 14 adj_matrix_14  1.695365e-06  1.695365e-06  1.695365e-06  1.695365e-06 #> 15 adj_matrix_15  1.614633e-07  1.614633e-07  1.614633e-07  1.614633e-07 #> 16 adj_matrix_16  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 17 adj_matrix_17 -1.506991e-06 -1.506991e-06 -1.506991e-06 -1.506991e-06 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 20 adj_matrix_20  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 21 adj_matrix_21 -9.156028e-03 -2.060992e-02 -6.872083e-03  1.392007e-05 #> 22 adj_matrix_22  1.708820e-06  1.708820e-06  1.708820e-06  1.708820e-06 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24  8.073167e-08  8.073167e-08  8.073167e-08  8.073167e-08 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28  8.476826e-07  8.476826e-07  8.476826e-07  8.476826e-07 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #>  #> $input_inferences$Salinization.of.the.Reservoir #>            input       crisp         lower        mode         upper #> 1   adj_matrix_1 -0.18973459 -3.262421e-01 -0.19827639 -4.468532e-02 #> 2   adj_matrix_2 -0.16877553 -2.217470e-01 -0.18532772 -9.925181e-02 #> 3   adj_matrix_3 -0.25019482 -3.727980e-01 -0.28119287 -9.659356e-02 #> 4   adj_matrix_4 -0.08554036 -1.451711e-01 -0.08721721 -2.423273e-02 #> 5   adj_matrix_5 -0.16738432 -2.291275e-01 -0.18199123 -9.103424e-02 #> 6   adj_matrix_6  0.00000000 -2.167430e-06  0.00000000  2.167430e-06 #> 7   adj_matrix_7  0.00000000 -6.586473e-06  0.00000000  6.586473e-06 #> 8   adj_matrix_8  0.00000000 -8.743405e-07  0.00000000  8.743405e-07 #> 9   adj_matrix_9 -0.11596324 -2.504205e-01 -0.09747409  4.872594e-06 #> 10 adj_matrix_10 -0.14163499 -2.049990e-01 -0.15158721 -6.831878e-02 #> 11 adj_matrix_11 -0.05314430 -1.318708e-01 -0.02758877  2.662699e-05 #> 12 adj_matrix_12 -0.19012481 -2.153682e-01 -0.21536762 -1.396386e-01 #> 13 adj_matrix_13 -0.03511896 -7.988033e-02 -0.02548262  6.068898e-06 #> 14 adj_matrix_14 -0.14846821 -2.049958e-01 -0.16105880 -7.934998e-02 #> 15 adj_matrix_15 -0.13892081 -2.217377e-01 -0.14442093 -5.060377e-02 #> 16 adj_matrix_16 -0.16186101 -3.032049e-01 -0.18239155  1.338811e-05 #> 17 adj_matrix_17 -0.06165813 -8.755650e-02 -0.06623863 -3.117925e-02 #> 18 adj_matrix_18  0.00000000 -8.926425e-07  0.00000000  8.926425e-07 #> 19 adj_matrix_19 -0.09482100 -1.335258e-01 -0.10219718 -4.873998e-02 #> 20 adj_matrix_20  0.00000000 -5.044662e-06  0.00000000  5.044662e-06 #> 21 adj_matrix_21 -0.03439455 -7.426995e-02 -0.02892287  9.173772e-06 #> 22 adj_matrix_22 -0.15852674 -2.359207e-01 -0.16873413 -7.092534e-02 #> 23 adj_matrix_23 -0.19767948 -3.248824e-01 -0.21848965 -4.966640e-02 #> 24 adj_matrix_24 -0.12326461 -1.519497e-01 -0.13827989 -7.956420e-02 #> 25 adj_matrix_25  0.00000000 -1.501920e-06  0.00000000  1.501920e-06 #> 26 adj_matrix_26  0.00000000 -2.008037e-05  0.00000000  2.008037e-05 #> 27 adj_matrix_27  0.00000000 -2.783859e-06  0.00000000  2.783859e-06 #> 28 adj_matrix_28 -0.30638416 -4.136693e-01 -0.33891614 -1.665670e-01 #> 29 adj_matrix_29  0.00000000 -1.138000e-05  0.00000000  1.138000e-05 #> 30 adj_matrix_30  0.00000000 -3.414352e-06  0.00000000  3.414352e-06 #>  #>  #> $aggregate_inferences #>           input Guidance.Docs.for.Salt.Management #> final aggregate                           1, 1, 1 #>                   Public.Education.Programs #> final 0.001666766, 0.008331918, 0.014991153 #>                Salts.Added.during.Water.Treatment #> final -2.498580e-04, -1.387161e-04, -2.757432e-05 #>       Salts.Added.by.Winter.Maintenance.Activities #> final        -0.21240256, -0.13590808, -0.04604265 #>                         Ecosystem.Health #> final 0.03361063, 0.08033662, 0.11533175 #>       Public.Awareness.of.Reservoir.Salinization #> final -2.374269e-03, -7.911801e-04, 5.982716e-07 #>               Salinization.of.the.Reservoir #> final -0.18732861, -0.12413998, -0.04472772 #>  #> $mc_inferences #>       input Guidance.Docs.for.Salt.Management Public.Education.Programs #> 1     mc_ 1                                 1              8.476826e-07 #> 2     mc_ 2                                 1             -1.291707e-06 #> 3     mc_ 3                                 1             -1.076422e-07 #> 4     mc_ 4                                 1              0.000000e+00 #> 5     mc_ 5                                 1              0.000000e+00 #> 6     mc_ 6                                 1              0.000000e+00 #> 7     mc_ 7                                 1              3.441188e-06 #> 8     mc_ 8                                 1              2.691056e-08 #> 9     mc_ 9                                 1              1.076422e-07 #> 10   mc_ 10                                 1              2.324631e-01 #> 11   mc_ 11                                 1             -4.305689e-07 #> 12   mc_ 12                                 1              0.000000e+00 #> 13   mc_ 13                                 1              1.329033e-01 #> 14   mc_ 14                                 1              2.152845e-07 #> 15   mc_ 15                                 1              5.382112e-08 #> 16   mc_ 16                                 1              8.073167e-08 #> 17   mc_ 17                                 1              6.862192e-06 #> 18   mc_ 18                                 1              6.727639e-09 #> 19   mc_ 19                                 1              5.382112e-08 #> 20   mc_ 20                                 1              2.605706e-01 #> 21   mc_ 21                                 1              8.073167e-07 #> 22   mc_ 22                                 1              3.336909e-06 #> 23   mc_ 23                                 1              1.883739e-07 #> 24   mc_ 24                                 1              0.000000e+00 #> 25   mc_ 25                                 1              0.000000e+00 #> 26   mc_ 26                                 1              1.291707e-06 #> 27   mc_ 27                                 1              0.000000e+00 #> 28   mc_ 28                                 1              1.708820e-06 #> 29   mc_ 29                                 1              0.000000e+00 #> 30   mc_ 30                                 1              1.076422e-07 #> 31   mc_ 31                                 1              0.000000e+00 #> 32   mc_ 32                                 1              0.000000e+00 #> 33   mc_ 33                                 1              3.431096e-06 #> 34   mc_ 34                                 1              1.614633e-06 #> 35   mc_ 35                                 1              0.000000e+00 #> 36   mc_ 36                                 1             -2.152845e-07 #> 37   mc_ 37                                 1              0.000000e+00 #> 38   mc_ 38                                 1              1.883739e-07 #> 39   mc_ 39                                 1              8.476826e-07 #> 40   mc_ 40                                 1              0.000000e+00 #> 41   mc_ 41                                 1              1.614633e-07 #> 42   mc_ 42                                 1              0.000000e+00 #> 43   mc_ 43                                 1              1.708820e-06 #> 44   mc_ 44                                 1              0.000000e+00 #> 45   mc_ 45                                 1              0.000000e+00 #> 46   mc_ 46                                 1              1.035305e-01 #> 47   mc_ 47                                 1              0.000000e+00 #> 48   mc_ 48                                 1              2.295986e-01 #> 49   mc_ 49                                 1             -1.291707e-06 #> 50   mc_ 50                                 1             -1.076422e-07 #> 51   mc_ 51                                 1              5.382112e-08 #> 52   mc_ 52                                 1              2.691056e-08 #> 53   mc_ 53                                 1              8.073167e-07 #> 54   mc_ 54                                 1              0.000000e+00 #> 55   mc_ 55                                 1              1.614633e-07 #> 56   mc_ 56                                 1             -4.305689e-07 #> 57   mc_ 57                                 1              0.000000e+00 #> 58   mc_ 58                                 1             -1.076422e-07 #> 59   mc_ 59                                 1              1.883739e-07 #> 60   mc_ 60                                 1              8.544102e-07 #> 61   mc_ 61                                 1             -6.458534e-07 #> 62   mc_ 62                                 1             -4.305689e-07 #> 63   mc_ 63                                 1              0.000000e+00 #> 64   mc_ 64                                 1              0.000000e+00 #> 65   mc_ 65                                 1             -3.229267e-07 #> 66   mc_ 66                                 1              0.000000e+00 #> 67   mc_ 67                                 1              2.412995e-01 #> 68   mc_ 68                                 1              1.076422e-07 #> 69   mc_ 69                                 1              0.000000e+00 #> 70   mc_ 70                                 1              0.000000e+00 #> 71   mc_ 71                                 1              0.000000e+00 #> 72   mc_ 72                                 1              2.152845e-07 #> 73   mc_ 73                                 1              1.883739e-07 #> 74   mc_ 74                                 1              1.614633e-07 #> 75   mc_ 75                                 1              0.000000e+00 #> 76   mc_ 76                                 1              5.382112e-08 #> 77   mc_ 77                                 1              0.000000e+00 #> 78   mc_ 78                                 1              1.668455e-06 #> 79   mc_ 79                                 1              0.000000e+00 #> 80   mc_ 80                                 1              1.009146e-07 #> 81   mc_ 81                                 1              0.000000e+00 #> 82   mc_ 82                                 1              1.883739e-07 #> 83   mc_ 83                                 1              8.476826e-07 #> 84   mc_ 84                                 1              0.000000e+00 #> 85   mc_ 85                                 1             -4.305689e-07 #> 86   mc_ 86                                 1              0.000000e+00 #> 87   mc_ 87                                 1              0.000000e+00 #> 88   mc_ 88                                 1             -1.076422e-07 #> 89   mc_ 89                                 1              0.000000e+00 #> 90   mc_ 90                                 1              1.708820e-06 #> 91   mc_ 91                                 1              4.305689e-07 #> 92   mc_ 92                                 1              2.152845e-07 #> 93   mc_ 93                                 1              4.036584e-08 #> 94   mc_ 94                                 1              7.534956e-07 #> 95   mc_ 95                                 1              2.085568e-07 #> 96   mc_ 96                                 1              7.534956e-07 #> 97   mc_ 97                                 1              0.000000e+00 #> 98   mc_ 98                                 1              5.382112e-08 #> 99   mc_ 99                                 1             -1.681910e-09 #> 100 mc_ 100                                 1              0.000000e+00 #>     Salts.Added.during.Water.Treatment #> 1                         8.476826e-07 #> 2                        -1.291707e-06 #> 3                        -1.076422e-07 #> 4                         0.000000e+00 #> 5                         0.000000e+00 #> 6                         0.000000e+00 #> 7                         3.441188e-06 #> 8                         2.691056e-08 #> 9                         1.076422e-07 #> 10                        6.888262e-06 #> 11                       -4.305689e-07 #> 12                        0.000000e+00 #> 13                        8.577740e-07 #> 14                        2.152845e-07 #> 15                        5.382112e-08 #> 16                        8.073167e-08 #> 17                        6.862192e-06 #> 18                        6.727639e-09 #> 19                        5.382112e-08 #> 20                        2.018292e-07 #> 21                        8.073167e-07 #> 22                        3.336909e-06 #> 23                        1.883739e-07 #> 24                        0.000000e+00 #> 25                        0.000000e+00 #> 26                        1.291707e-06 #> 27                        0.000000e+00 #> 28                        1.708820e-06 #> 29                        0.000000e+00 #> 30                        1.076422e-07 #> 31                        0.000000e+00 #> 32                        0.000000e+00 #> 33                        3.431096e-06 #> 34                        1.614633e-06 #> 35                        0.000000e+00 #> 36                       -2.152845e-07 #> 37                        0.000000e+00 #> 38                        1.883739e-07 #> 39                        8.476826e-07 #> 40                        0.000000e+00 #> 41                        1.614633e-07 #> 42                        0.000000e+00 #> 43                        1.708820e-06 #> 44                        0.000000e+00 #> 45                        0.000000e+00 #> 46                        0.000000e+00 #> 47                        0.000000e+00 #> 48                        0.000000e+00 #> 49                       -1.291707e-06 #> 50                       -1.076422e-07 #> 51                        5.382112e-08 #> 52                        2.691056e-08 #> 53                        8.073167e-07 #> 54                        0.000000e+00 #> 55                        1.614633e-07 #> 56                       -4.305689e-07 #> 57                        0.000000e+00 #> 58                       -1.076422e-07 #> 59                        1.883739e-07 #> 60                        8.544102e-07 #> 61                       -6.458534e-07 #> 62                       -4.305689e-07 #> 63                        0.000000e+00 #> 64                        0.000000e+00 #> 65                       -3.229267e-07 #> 66                        0.000000e+00 #> 67                       -3.229267e-07 #> 68                       -3.152961e-07 #> 69                        0.000000e+00 #> 70                        0.000000e+00 #> 71                        0.000000e+00 #> 72                        2.152845e-07 #> 73                        1.883739e-07 #> 74                        1.614633e-07 #> 75                        0.000000e+00 #> 76                        5.382112e-08 #> 77                        0.000000e+00 #> 78                        1.668455e-06 #> 79                        0.000000e+00 #> 80                        1.009146e-07 #> 81                        0.000000e+00 #> 82                        1.883739e-07 #> 83                        8.476826e-07 #> 84                        0.000000e+00 #> 85                       -4.305689e-07 #> 86                        0.000000e+00 #> 87                        0.000000e+00 #> 88                       -1.076422e-07 #> 89                        0.000000e+00 #> 90                        1.708820e-06 #> 91                        4.305689e-07 #> 92                        2.152845e-07 #> 93                        4.036584e-08 #> 94                        7.534956e-07 #> 95                        2.085568e-07 #> 96                        7.534956e-07 #> 97                        0.000000e+00 #> 98                        5.382112e-08 #> 99                       -1.681910e-09 #> 100                       0.000000e+00 #>     Salts.Added.by.Winter.Maintenance.Activities Ecosystem.Health #> 1                                  -3.070146e-01     9.024109e-02 #> 2                                  -1.773516e-01     8.057875e-03 #> 3                                  -1.482140e-01     8.604504e-02 #> 4                                   0.000000e+00     0.000000e+00 #> 5                                   0.000000e+00     0.000000e+00 #> 6                                   0.000000e+00     0.000000e+00 #> 7                                  -3.192002e-01     1.753454e-01 #> 8                                  -2.772770e-07     1.103088e-01 #> 9                                  -2.381251e-01     4.134884e-02 #> 10                                 -3.434118e-01     2.519948e-01 #> 11                                 -4.305689e-07     1.140307e-01 #> 12                                  0.000000e+00     0.000000e+00 #> 13                                 -2.829797e-01     1.919279e-01 #> 14                                 -9.232839e-02     1.360318e-01 #> 15                                 -1.710918e-01     8.731371e-02 #> 16                                 -1.209068e-06     6.136959e-02 #> 17                                 -2.850048e-01     3.140990e-01 #> 18                                 -9.689903e-08     1.025205e-01 #> 19                                 -2.714198e-01     6.167940e-02 #> 20                                 -1.286281e-01     2.564071e-02 #> 21                                 -2.974415e-01     5.569147e-02 #> 22                                 -1.575227e-01     3.254337e-01 #> 23                                 -2.300132e-01     1.115355e-01 #> 24                                  0.000000e+00     0.000000e+00 #> 25                                  0.000000e+00     0.000000e+00 #> 26                                 -2.273506e-01     1.291707e-06 #> 27                                  0.000000e+00     0.000000e+00 #> 28                                 -2.576384e-01     1.005270e-01 #> 29                                  0.000000e+00     0.000000e+00 #> 30                                 -1.753082e-01     4.901751e-02 #> 31                                  0.000000e+00     0.000000e+00 #> 32                                  0.000000e+00     0.000000e+00 #> 33                                 -2.448631e-01     2.898529e-01 #> 34                                 -2.255027e-01     1.376445e-02 #> 35                                  0.000000e+00     0.000000e+00 #> 36                                 -7.288493e-02     1.046801e-02 #> 37                                  0.000000e+00     0.000000e+00 #> 38                                 -2.940744e-01     9.277833e-02 #> 39                                 -2.705742e-01     6.082170e-02 #> 40                                  0.000000e+00     0.000000e+00 #> 41                                  1.614633e-07     1.535902e-01 #> 42                                  0.000000e+00     0.000000e+00 #> 43                                 -2.560629e-01     1.815622e-01 #> 44                                  0.000000e+00     0.000000e+00 #> 45                                 -2.663067e-01     7.028651e-02 #> 46                                  0.000000e+00     0.000000e+00 #> 47                                  0.000000e+00     0.000000e+00 #> 48                                  0.000000e+00     0.000000e+00 #> 49                                 -9.559279e-02    -1.291707e-06 #> 50                                 -4.013792e-02     2.156288e-02 #> 51                                 -7.626035e-02     5.382112e-08 #> 52                                 -3.157207e-07     6.943574e-02 #> 53                                 -2.381256e-01     1.251432e-01 #> 54                                 -9.559658e-02     1.478017e-01 #> 55                                 -1.823906e-01     9.272110e-02 #> 56                                 -4.305689e-07     1.406203e-01 #> 57                                  0.000000e+00     0.000000e+00 #> 58                                 -5.434091e-02     1.733882e-02 #> 59                                 -2.300151e-01     1.196829e-01 #> 60                                 -2.765129e-01     1.759834e-01 #> 61                                 -6.409211e-02     1.299625e-02 #> 62                                 -4.305689e-07     5.230744e-02 #> 63                                  0.000000e+00     0.000000e+00 #> 64                                  0.000000e+00     0.000000e+00 #> 65                                 -1.157269e-01     3.285257e-02 #> 66                                  0.000000e+00     0.000000e+00 #> 67                                 -8.493835e-02     1.668321e-02 #> 68                                 -1.839021e-01     5.347643e-02 #> 69                                  0.000000e+00     0.000000e+00 #> 70                                  0.000000e+00     0.000000e+00 #> 71                                  0.000000e+00     0.000000e+00 #> 72                                 -2.898252e-01     2.413468e-02 #> 73                                 -2.733036e-01     1.045195e-01 #> 74                                 -1.458979e-06     3.057301e-01 #> 75                                  0.000000e+00     0.000000e+00 #> 76                                 -2.041160e-01     1.270763e-01 #> 77                                  0.000000e+00     0.000000e+00 #> 78                                 -1.808668e-01     1.537055e-01 #> 79                                  0.000000e+00     0.000000e+00 #> 80                                 -2.492090e-01     8.036429e-02 #> 81                                  0.000000e+00     0.000000e+00 #> 82                                 -2.064588e-01     1.048121e-01 #> 83                                 -3.020508e-01     1.229847e-01 #> 84                                  0.000000e+00     5.825310e-02 #> 85                                 -4.557105e-02     1.142109e-03 #> 86                                  0.000000e+00     0.000000e+00 #> 87                                  0.000000e+00     0.000000e+00 #> 88                                 -1.421881e-01     5.671956e-02 #> 89                                  0.000000e+00     0.000000e+00 #> 90                                 -2.830725e-01     9.352363e-02 #> 91                                 -1.157268e-01     1.461128e-02 #> 92                                 -1.584145e-01     2.079128e-02 #> 93                                 -6.543130e-07     2.542906e-01 #> 94                                 -4.160147e-06     5.977344e-02 #> 95                                 -1.647577e-01     1.199746e-01 #> 96                                 -1.411282e-01     2.658609e-02 #> 97                                 -7.808340e-02     1.150039e-01 #> 98                                 -2.098785e-01     1.087660e-01 #> 99                                 -7.868141e-02     5.884581e-02 #> 100                                 0.000000e+00     2.672634e-02 #>     Public.Awareness.of.Reservoir.Salinization Salinization.of.the.Reservoir #> 1                                 8.476826e-07                 -1.308694e-01 #> 2                                -1.291707e-06                 -2.239742e-02 #> 3                                -1.076422e-07                 -1.257881e-01 #> 4                                 0.000000e+00                  0.000000e+00 #> 5                                 0.000000e+00                  0.000000e+00 #> 6                                 0.000000e+00                  0.000000e+00 #> 7                                 3.441188e-06                 -2.145061e-01 #> 8                                 2.691056e-08                 -1.361154e-01 #> 9                                 1.076422e-07                 -7.659834e-02 #> 10                                6.888262e-06                 -3.693804e-01 #> 11                               -4.305689e-07                 -1.480321e-01 #> 12                                0.000000e+00                  0.000000e+00 #> 13                                8.577740e-07                 -2.296968e-01 #> 14                                2.152845e-07                 -2.036442e-01 #> 15                                5.382112e-08                 -1.377743e-01 #> 16                                8.073167e-08                 -2.191741e-01 #> 17                                6.862192e-06                 -6.848731e-02 #> 18                                6.727639e-09                 -1.180611e-01 #> 19                                5.382112e-08                 -1.056057e-01 #> 20                                2.018292e-07                 -4.179645e-02 #> 21                                8.073167e-07                 -2.040499e-01 #> 22                                3.336909e-06                 -2.550856e-01 #> 23                               -2.500764e-02                 -1.240299e-01 #> 24                                0.000000e+00                  0.000000e+00 #> 25                                0.000000e+00                  0.000000e+00 #> 26                                1.291707e-06                 -8.921356e-02 #> 27                                0.000000e+00                  0.000000e+00 #> 28                                1.708820e-06                 -1.410663e-01 #> 29                                0.000000e+00                  0.000000e+00 #> 30                                1.076422e-07                 -9.581093e-02 #> 31                                0.000000e+00                  0.000000e+00 #> 32                                0.000000e+00                  0.000000e+00 #> 33                                3.431096e-06                 -1.792192e-01 #> 34                                1.614633e-06                 -1.647356e-01 #> 35                                0.000000e+00                  0.000000e+00 #> 36                               -2.152845e-07                 -2.241272e-02 #> 37                                0.000000e+00                  0.000000e+00 #> 38                                1.883739e-07                 -1.379898e-01 #> 39                                8.476826e-07                 -1.403900e-01 #> 40                                0.000000e+00                  0.000000e+00 #> 41                                1.614633e-07                 -1.862940e-01 #> 42                                0.000000e+00                  0.000000e+00 #> 43                                1.708820e-06                 -3.209542e-01 #> 44                                0.000000e+00                  0.000000e+00 #> 45                                0.000000e+00                 -1.115897e-01 #> 46                                0.000000e+00                  0.000000e+00 #> 47                                0.000000e+00                  0.000000e+00 #> 48                                0.000000e+00                  0.000000e+00 #> 49                               -1.291707e-06                 -7.242534e-02 #> 50                               -1.076422e-07                 -3.245571e-02 #> 51                                5.382112e-08                 -6.926265e-02 #> 52                                2.691056e-08                 -1.172312e-01 #> 53                                8.073167e-07                 -1.941931e-01 #> 54                                0.000000e+00                 -2.302727e-01 #> 55                                1.614633e-07                 -1.557123e-01 #> 56                               -4.305689e-07                 -2.198503e-01 #> 57                                0.000000e+00                  0.000000e+00 #> 58                               -1.076422e-07                 -3.949593e-02 #> 59                                1.883739e-07                 -1.308493e-01 #> 60                                8.544102e-07                 -2.550975e-01 #> 61                               -6.458534e-07                 -3.098675e-02 #> 62                               -4.305689e-07                 -1.995325e-01 #> 63                                0.000000e+00                  0.000000e+00 #> 64                                0.000000e+00                  0.000000e+00 #> 65                               -3.229267e-07                 -9.339049e-02 #> 66                                0.000000e+00                  0.000000e+00 #> 67                               -3.229267e-07                 -2.773605e-02 #> 68                                1.076422e-07                 -1.018916e-01 #> 69                                0.000000e+00                  0.000000e+00 #> 70                                0.000000e+00                  0.000000e+00 #> 71                                0.000000e+00                  0.000000e+00 #> 72                                2.152845e-07                 -3.557389e-02 #> 73                                1.883739e-07                 -1.340258e-01 #> 74                                1.614633e-07                 -7.568016e-06 #> 75                                0.000000e+00                  0.000000e+00 #> 76                                5.382112e-08                 -1.538171e-01 #> 77                                0.000000e+00                  0.000000e+00 #> 78                                1.668455e-06                 -3.253785e-01 #> 79                                0.000000e+00                  0.000000e+00 #> 80                                1.009146e-07                 -1.343700e-01 #> 81                                0.000000e+00                  0.000000e+00 #> 82                                1.883739e-07                 -1.277811e-01 #> 83                                8.476826e-07                 -2.897745e-01 #> 84                                0.000000e+00                 -1.083597e-01 #> 85                               -4.305689e-07                 -1.647052e-02 #> 86                                0.000000e+00                  0.000000e+00 #> 87                                0.000000e+00                  0.000000e+00 #> 88                               -1.076422e-07                 -7.979994e-02 #> 89                                0.000000e+00                  0.000000e+00 #> 90                                1.708820e-06                 -1.387648e-01 #> 91                                4.305689e-07                 -4.556160e-02 #> 92                                2.152845e-07                 -1.052117e-01 #> 93                                4.036584e-08                 -4.694832e-06 #> 94                               -3.655146e-02                 -2.734279e-01 #> 95                                2.085568e-07                 -2.698936e-01 #> 96                                7.534956e-07                 -7.749845e-02 #> 97                                0.000000e+00                 -1.702036e-01 #> 98                                5.382112e-08                 -1.458926e-01 #> 99                               -1.681910e-09                 -8.348434e-02 #> 100                               0.000000e+00                 -1.411292e-01 #>  #> $mc_CIs_and_quantiles #>                                           node expected_value           min #> 1            Guidance.Docs.for.Salt.Management   1.000000e+00  1.000000e+00 #> 2                    Public.Education.Programs   1.221609e-02 -1.291707e-06 #> 3           Salts.Added.during.Water.Treatment   3.833765e-07 -1.291707e-06 #> 4 Salts.Added.by.Winter.Maintenance.Activities  -1.061946e-01 -3.434118e-01 #> 5                             Ecosystem.Health   6.459906e-02 -1.291707e-06 #> 6   Public.Awareness.of.Reservoir.Salinization  -6.033052e-04 -3.655146e-02 #> 7                Salinization.of.the.Reservoir  -9.372844e-02 -3.693804e-01 #>        0.025_CI 0.25_quantile        median 0.75_quantile      0.975_CI #> 1  1.000000e+00     1.0000000  1.000000e+00  1.000000e+00  1.000000e+00 #> 2  3.360325e-03     0.0000000  1.681910e-08  2.691056e-07  2.342933e-02 #> 3  1.631528e-07     0.0000000  0.000000e+00  2.035111e-07  6.135246e-07 #> 4 -1.286072e-01    -0.2137845 -7.457264e-02  0.000000e+00 -8.582217e-02 #> 5  5.008933e-02     0.0000000  3.710071e-02  1.058006e-01  8.061387e-02 #> 6 -1.596402e-03     0.0000000  0.000000e+00  1.917377e-07  5.114976e-07 #> 7 -1.115734e-01    -0.1423200 -8.164214e-02  0.000000e+00 -7.507261e-02 #>            max #> 1 1.000000e+00 #> 2 2.605706e-01 #> 3 6.888262e-06 #> 4 1.614633e-07 #> 5 3.254337e-01 #> 6 6.888262e-06 #> 7 0.000000e+00 #>  get_inferences(ex_tfn_fcmconfr) #> $input_inferences #> $input_inferences$Guidance.Docs.for.Salt.Management #>            input crisp lower mode upper #> 1   adj_matrix_1     1     1    1     1 #> 2   adj_matrix_2     1     1    1     1 #> 3   adj_matrix_3     1     1    1     1 #> 4   adj_matrix_4     1     1    1     1 #> 5   adj_matrix_5     1     1    1     1 #> 6   adj_matrix_6     1     1    1     1 #> 7   adj_matrix_7     1     1    1     1 #> 8   adj_matrix_8     1     1    1     1 #> 9   adj_matrix_9     1     1    1     1 #> 10 adj_matrix_10     1     1    1     1 #> 11 adj_matrix_11     1     1    1     1 #> 12 adj_matrix_12     1     1    1     1 #> 13 adj_matrix_13     1     1    1     1 #> 14 adj_matrix_14     1     1    1     1 #> 15 adj_matrix_15     1     1    1     1 #> 16 adj_matrix_16     1     1    1     1 #> 17 adj_matrix_17     1     1    1     1 #> 18 adj_matrix_18     1     1    1     1 #> 19 adj_matrix_19     1     1    1     1 #> 20 adj_matrix_20     1     1    1     1 #> 21 adj_matrix_21     1     1    1     1 #> 22 adj_matrix_22     1     1    1     1 #> 23 adj_matrix_23     1     1    1     1 #> 24 adj_matrix_24     1     1    1     1 #> 25 adj_matrix_25     1     1    1     1 #> 26 adj_matrix_26     1     1    1     1 #> 27 adj_matrix_27     1     1    1     1 #> 28 adj_matrix_28     1     1    1     1 #> 29 adj_matrix_29     1     1    1     1 #> 30 adj_matrix_30     1     1    1     1 #>  #> $input_inferences$Public.Education.Programs #>            input         crisp         lower          mode         upper #> 1   adj_matrix_1  4.171136e-07  4.171136e-07  4.171136e-07  4.171136e-07 #> 2   adj_matrix_2  4.238413e-07  4.238413e-07  4.238413e-07  4.238413e-07 #> 3   adj_matrix_3  1.708820e-06  1.708820e-06  1.708820e-06  1.708820e-06 #> 4   adj_matrix_4  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 5   adj_matrix_5  4.171136e-07  4.171136e-07  4.171136e-07  4.171136e-07 #> 6   adj_matrix_6  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9 -1.076422e-07 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 10 adj_matrix_10  2.085568e-07  2.085568e-07  2.085568e-07  2.085568e-07 #> 11 adj_matrix_11  4.305689e-07  4.305689e-07  4.305689e-07  4.305689e-07 #> 12 adj_matrix_12  2.119206e-07  2.119206e-07  2.119206e-07  2.119206e-07 #> 13 adj_matrix_13 -1.009146e-07 -1.009146e-07 -1.009146e-07 -1.009146e-07 #> 14 adj_matrix_14  1.695365e-06  1.695365e-06  1.695365e-06  1.695365e-06 #> 15 adj_matrix_15  1.614633e-07  1.614633e-07  1.614633e-07  1.614633e-07 #> 16 adj_matrix_16  1.976751e-01  4.966368e-02  2.184841e-01  3.248774e-01 #> 17 adj_matrix_17 -1.506991e-06 -1.506991e-06 -1.506991e-06 -1.506991e-06 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 20 adj_matrix_20  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 21 adj_matrix_21  3.767478e-07  3.767478e-07  3.767478e-07  3.767478e-07 #> 22 adj_matrix_22  1.708820e-06  1.708820e-06  1.708820e-06  1.708820e-06 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24  8.073167e-08  8.073167e-08  8.073167e-08  8.073167e-08 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28  8.476826e-07  8.476826e-07  8.476826e-07  8.476826e-07 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #>  #> $input_inferences$Salts.Added.during.Water.Treatment #>            input         crisp         lower          mode         upper #> 1   adj_matrix_1  4.171136e-07  4.171136e-07  4.171136e-07  4.171136e-07 #> 2   adj_matrix_2 -3.780128e-06 -7.287071e-06 -3.781633e-06 -2.716813e-07 #> 3   adj_matrix_3  1.708820e-06  1.708820e-06  1.708820e-06  1.708820e-06 #> 4   adj_matrix_4  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 5   adj_matrix_5  4.171136e-07  4.171136e-07  4.171136e-07  4.171136e-07 #> 6   adj_matrix_6  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9 -1.076422e-07 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 10 adj_matrix_10  2.085568e-07  2.085568e-07  2.085568e-07  2.085568e-07 #> 11 adj_matrix_11  4.305689e-07  4.305689e-07  4.305689e-07  4.305689e-07 #> 12 adj_matrix_12  2.119206e-07  2.119206e-07  2.119206e-07  2.119206e-07 #> 13 adj_matrix_13 -1.009146e-07 -1.009146e-07 -1.009146e-07 -1.009146e-07 #> 14 adj_matrix_14  1.695365e-06  1.695365e-06  1.695365e-06  1.695365e-06 #> 15 adj_matrix_15  1.614633e-07  1.614633e-07  1.614633e-07  1.614633e-07 #> 16 adj_matrix_16  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 17 adj_matrix_17 -1.506991e-06 -1.506991e-06 -1.506991e-06 -1.506991e-06 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 20 adj_matrix_20  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 21 adj_matrix_21  3.767478e-07  3.767478e-07  3.767478e-07  3.767478e-07 #> 22 adj_matrix_22  1.708820e-06  1.708820e-06  1.708820e-06  1.708820e-06 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24  8.073167e-08  8.073167e-08  8.073167e-08  8.073167e-08 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28  8.476826e-07  8.476826e-07  8.476826e-07  8.476826e-07 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #>  #> $input_inferences$Salts.Added.by.Winter.Maintenance.Activities #>            input         crisp         lower          mode         upper #> 1   adj_matrix_1 -1.283727e-01 -2.649185e-01 -1.202008e-01  1.139210e-06 #> 2   adj_matrix_2 -2.548127e-01 -3.439474e-01 -2.785144e-01 -1.419764e-01 #> 3   adj_matrix_3 -1.401640e-01 -2.785162e-01 -1.419780e-01  2.126505e-06 #> 4   adj_matrix_4 -1.618616e-01 -3.031965e-01 -1.823903e-01  1.890719e-06 #> 5   adj_matrix_5 -2.659741e-01 -3.439469e-01 -2.912555e-01 -1.627199e-01 #> 6   adj_matrix_6  0.000000e+00 -4.509185e-07  0.000000e+00  4.509185e-07 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9 -1.076422e-07 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 10 adj_matrix_10 -2.306114e-01 -3.439469e-01 -2.504155e-01 -9.747171e-02 #> 11 adj_matrix_11 -2.765056e-01 -3.439440e-01 -3.031899e-01 -1.823828e-01 #> 12 adj_matrix_12 -2.454309e-01 -3.439472e-01 -2.677088e-01 -1.246366e-01 #> 13 adj_matrix_13 -1.159618e-01 -2.504161e-01 -9.747187e-02  2.606899e-06 #> 14 adj_matrix_14 -2.306111e-01 -3.439469e-01 -2.504156e-01 -9.747073e-02 #> 15 adj_matrix_15 -2.548117e-01 -3.439467e-01 -2.785133e-01 -1.419752e-01 #> 16 adj_matrix_16  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 17 adj_matrix_17 -8.938206e-02 -2.184904e-01 -4.966970e-02  1.394166e-05 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19 -1.401628e-01 -2.785142e-01 -1.419758e-01  1.654658e-06 #> 20 adj_matrix_20  0.000000e+00 -9.886287e-07  0.000000e+00  9.886287e-07 #> 21 adj_matrix_21 -1.159616e-01 -2.504168e-01 -9.747226e-02  4.176917e-06 #> 22 adj_matrix_22 -2.765124e-01 -3.439486e-01 -3.031974e-01 -1.823913e-01 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24 -1.618622e-01 -3.031964e-01 -1.823909e-01  5.964684e-07 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28 -2.659741e-01 -3.439469e-01 -2.912555e-01 -1.627198e-01 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00 -8.650037e-07  0.000000e+00  8.650037e-07 #>  #> $input_inferences$Ecosystem.Health #>            input      crisp         lower       mode        upper #> 1   adj_matrix_1 0.12513954  6.562469e-02 0.13535978 1.744341e-01 #> 2   adj_matrix_2 0.11780562  6.670194e-02 0.12905046 1.576644e-01 #> 3   adj_matrix_3 0.15907991  8.583128e-02 0.17279319 2.186153e-01 #> 4   adj_matrix_4 0.05907343  2.984654e-02 0.06344861 8.392516e-02 #> 5   adj_matrix_5 0.11173486  5.803894e-02 0.12066305 1.565026e-01 #> 6   adj_matrix_6 0.00000000 -1.823495e-05 0.00000000 1.823495e-05 #> 7   adj_matrix_7 0.00000000 -2.339399e-05 0.00000000 2.339399e-05 #> 8   adj_matrix_8 0.00000000 -3.734027e-06 0.00000000 3.734027e-06 #> 9   adj_matrix_9 0.07552588  3.467809e-02 0.07980185 1.120977e-01 #> 10 adj_matrix_10 0.10901490  6.987573e-02 0.12237908 1.347899e-01 #> 11 adj_matrix_11 0.01412492 -3.151840e-05 0.01061280 3.179348e-02 #> 12 adj_matrix_12 0.13681287  8.394626e-02 0.15173773 1.747546e-01 #> 13 adj_matrix_13 0.02335863  1.053170e-02 0.02454208 3.500210e-02 #> 14 adj_matrix_14 0.29763630  1.781593e-01 0.32645102 3.882986e-01 #> 15 adj_matrix_15 0.06754909  1.385923e-02 0.06857068 1.202174e-01 #> 16 adj_matrix_16 0.06273817 -9.634720e-07 0.06403258 1.241829e-01 #> 17 adj_matrix_17 0.01639325 -2.132187e-05 0.01232420 3.687688e-02 #> 18 adj_matrix_18 0.00000000 -1.785633e-05 0.00000000 1.785633e-05 #> 19 adj_matrix_19 0.06837071  3.776046e-02 0.07470845 9.264320e-02 #> 20 adj_matrix_20 0.00000000 -1.313644e-05 0.00000000 1.313644e-05 #> 21 adj_matrix_21 0.01715297  3.418647e-03 0.01717014 3.087011e-02 #> 22 adj_matrix_22 0.07649122  1.581755e-02 0.07796207 1.356940e-01 #> 23 adj_matrix_23 0.14736276  9.639699e-02 0.16507281 1.806185e-01 #> 24 adj_matrix_24 0.09572051  6.100563e-02 0.10751282 1.186431e-01 #> 25 adj_matrix_25 0.00000000 -8.614831e-06 0.00000000 8.614831e-06 #> 26 adj_matrix_26 0.00000000  0.000000e+00 0.00000000 0.000000e+00 #> 27 adj_matrix_27 0.00000000 -2.207469e-05 0.00000000 2.207469e-05 #> 28 adj_matrix_28 0.19577555  1.179967e-01 0.21512975 2.542002e-01 #> 29 adj_matrix_29 0.00000000 -2.906392e-05 0.00000000 2.906392e-05 #> 30 adj_matrix_30 0.00000000 -1.548227e-05 0.00000000 1.548227e-05 #>  #> $input_inferences$Public.Awareness.of.Reservoir.Salinization #>            input         crisp         lower          mode         upper #> 1   adj_matrix_1  4.171136e-07  4.171136e-07  4.171136e-07  4.171136e-07 #> 2   adj_matrix_2  4.238413e-07  4.238413e-07  4.238413e-07  4.238413e-07 #> 3   adj_matrix_3  1.708820e-06  1.708820e-06  1.708820e-06  1.708820e-06 #> 4   adj_matrix_4  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 5   adj_matrix_5  4.171136e-07  4.171136e-07  4.171136e-07  4.171136e-07 #> 6   adj_matrix_6  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 7   adj_matrix_7  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 8   adj_matrix_8  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 9   adj_matrix_9 -1.076422e-07 -1.076422e-07 -1.076422e-07 -1.076422e-07 #> 10 adj_matrix_10  2.085568e-07  2.085568e-07  2.085568e-07  2.085568e-07 #> 11 adj_matrix_11  4.305689e-07  4.305689e-07  4.305689e-07  4.305689e-07 #> 12 adj_matrix_12  2.119206e-07  2.119206e-07  2.119206e-07  2.119206e-07 #> 13 adj_matrix_13 -1.009146e-07 -1.009146e-07 -1.009146e-07 -1.009146e-07 #> 14 adj_matrix_14  1.695365e-06  1.695365e-06  1.695365e-06  1.695365e-06 #> 15 adj_matrix_15  1.614633e-07  1.614633e-07  1.614633e-07  1.614633e-07 #> 16 adj_matrix_16  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 17 adj_matrix_17 -1.506991e-06 -1.506991e-06 -1.506991e-06 -1.506991e-06 #> 18 adj_matrix_18  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 19 adj_matrix_19  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 20 adj_matrix_20  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 21 adj_matrix_21 -9.156028e-03 -2.060992e-02 -6.872083e-03  1.392007e-05 #> 22 adj_matrix_22  1.708820e-06  1.708820e-06  1.708820e-06  1.708820e-06 #> 23 adj_matrix_23  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 24 adj_matrix_24  8.073167e-08  8.073167e-08  8.073167e-08  8.073167e-08 #> 25 adj_matrix_25  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 26 adj_matrix_26  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 27 adj_matrix_27  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 28 adj_matrix_28  8.476826e-07  8.476826e-07  8.476826e-07  8.476826e-07 #> 29 adj_matrix_29  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 30 adj_matrix_30  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #>  #> $input_inferences$Salinization.of.the.Reservoir #>            input       crisp         lower        mode         upper #> 1   adj_matrix_1 -0.18973459 -3.262421e-01 -0.19827639 -4.468532e-02 #> 2   adj_matrix_2 -0.16877553 -2.217470e-01 -0.18532772 -9.925181e-02 #> 3   adj_matrix_3 -0.25019482 -3.727980e-01 -0.28119287 -9.659356e-02 #> 4   adj_matrix_4 -0.08554036 -1.451711e-01 -0.08721721 -2.423273e-02 #> 5   adj_matrix_5 -0.16738432 -2.291275e-01 -0.18199123 -9.103424e-02 #> 6   adj_matrix_6  0.00000000 -2.167430e-06  0.00000000  2.167430e-06 #> 7   adj_matrix_7  0.00000000 -6.586473e-06  0.00000000  6.586473e-06 #> 8   adj_matrix_8  0.00000000 -8.743405e-07  0.00000000  8.743405e-07 #> 9   adj_matrix_9 -0.11596324 -2.504205e-01 -0.09747409  4.872594e-06 #> 10 adj_matrix_10 -0.14163499 -2.049990e-01 -0.15158721 -6.831878e-02 #> 11 adj_matrix_11 -0.05314430 -1.318708e-01 -0.02758877  2.662699e-05 #> 12 adj_matrix_12 -0.19012481 -2.153682e-01 -0.21536762 -1.396386e-01 #> 13 adj_matrix_13 -0.03511896 -7.988033e-02 -0.02548262  6.068898e-06 #> 14 adj_matrix_14 -0.14846821 -2.049958e-01 -0.16105880 -7.934998e-02 #> 15 adj_matrix_15 -0.13892081 -2.217377e-01 -0.14442093 -5.060377e-02 #> 16 adj_matrix_16 -0.16186101 -3.032049e-01 -0.18239155  1.338811e-05 #> 17 adj_matrix_17 -0.06165813 -8.755650e-02 -0.06623863 -3.117925e-02 #> 18 adj_matrix_18  0.00000000 -8.926425e-07  0.00000000  8.926425e-07 #> 19 adj_matrix_19 -0.09482100 -1.335258e-01 -0.10219718 -4.873998e-02 #> 20 adj_matrix_20  0.00000000 -5.044662e-06  0.00000000  5.044662e-06 #> 21 adj_matrix_21 -0.03439455 -7.426995e-02 -0.02892287  9.173772e-06 #> 22 adj_matrix_22 -0.15852674 -2.359207e-01 -0.16873413 -7.092534e-02 #> 23 adj_matrix_23 -0.19767948 -3.248824e-01 -0.21848965 -4.966640e-02 #> 24 adj_matrix_24 -0.12326461 -1.519497e-01 -0.13827989 -7.956420e-02 #> 25 adj_matrix_25  0.00000000 -1.501920e-06  0.00000000  1.501920e-06 #> 26 adj_matrix_26  0.00000000 -2.008037e-05  0.00000000  2.008037e-05 #> 27 adj_matrix_27  0.00000000 -2.783859e-06  0.00000000  2.783859e-06 #> 28 adj_matrix_28 -0.30638416 -4.136693e-01 -0.33891614 -1.665670e-01 #> 29 adj_matrix_29  0.00000000 -1.138000e-05  0.00000000  1.138000e-05 #> 30 adj_matrix_30  0.00000000 -3.414352e-06  0.00000000  3.414352e-06 #>  #>  #> $aggregate_inferences #>           input Guidance.Docs.for.Salt.Management #> final aggregate                           1, 1, 1 #>                   Public.Education.Programs #> final 0.001666766, 0.008331918, 0.014991153 #>                Salts.Added.during.Water.Treatment #> final -2.498580e-04, -1.387161e-04, -2.757432e-05 #>       Salts.Added.by.Winter.Maintenance.Activities #> final        -0.21240256, -0.13590808, -0.04604265 #>                         Ecosystem.Health #> final 0.03361063, 0.08033662, 0.11533175 #>       Public.Awareness.of.Reservoir.Salinization #> final -2.374269e-03, -7.911801e-04, 5.982716e-07 #>               Salinization.of.the.Reservoir #> final -0.18732861, -0.12413998, -0.04472772 #>  #> $mc_inferences #>       input Guidance.Docs.for.Salt.Management Public.Education.Programs #> 1     mc_ 1                                 1              8.476826e-07 #> 2     mc_ 2                                 1             -1.291707e-06 #> 3     mc_ 3                                 1             -1.076422e-07 #> 4     mc_ 4                                 1              0.000000e+00 #> 5     mc_ 5                                 1              0.000000e+00 #> 6     mc_ 6                                 1              0.000000e+00 #> 7     mc_ 7                                 1              3.441188e-06 #> 8     mc_ 8                                 1              2.691056e-08 #> 9     mc_ 9                                 1              1.076422e-07 #> 10   mc_ 10                                 1              2.324631e-01 #> 11   mc_ 11                                 1             -4.305689e-07 #> 12   mc_ 12                                 1              0.000000e+00 #> 13   mc_ 13                                 1              1.329033e-01 #> 14   mc_ 14                                 1              2.152845e-07 #> 15   mc_ 15                                 1              5.382112e-08 #> 16   mc_ 16                                 1              8.073167e-08 #> 17   mc_ 17                                 1              6.862192e-06 #> 18   mc_ 18                                 1              6.727639e-09 #> 19   mc_ 19                                 1              5.382112e-08 #> 20   mc_ 20                                 1              2.605706e-01 #> 21   mc_ 21                                 1              8.073167e-07 #> 22   mc_ 22                                 1              3.336909e-06 #> 23   mc_ 23                                 1              1.883739e-07 #> 24   mc_ 24                                 1              0.000000e+00 #> 25   mc_ 25                                 1              0.000000e+00 #> 26   mc_ 26                                 1              1.291707e-06 #> 27   mc_ 27                                 1              0.000000e+00 #> 28   mc_ 28                                 1              1.708820e-06 #> 29   mc_ 29                                 1              0.000000e+00 #> 30   mc_ 30                                 1              1.076422e-07 #> 31   mc_ 31                                 1              0.000000e+00 #> 32   mc_ 32                                 1              0.000000e+00 #> 33   mc_ 33                                 1              3.431096e-06 #> 34   mc_ 34                                 1              1.614633e-06 #> 35   mc_ 35                                 1              0.000000e+00 #> 36   mc_ 36                                 1             -2.152845e-07 #> 37   mc_ 37                                 1              0.000000e+00 #> 38   mc_ 38                                 1              1.883739e-07 #> 39   mc_ 39                                 1              8.476826e-07 #> 40   mc_ 40                                 1              0.000000e+00 #> 41   mc_ 41                                 1              1.614633e-07 #> 42   mc_ 42                                 1              0.000000e+00 #> 43   mc_ 43                                 1              1.708820e-06 #> 44   mc_ 44                                 1              0.000000e+00 #> 45   mc_ 45                                 1              0.000000e+00 #> 46   mc_ 46                                 1              1.035305e-01 #> 47   mc_ 47                                 1              0.000000e+00 #> 48   mc_ 48                                 1              2.295986e-01 #> 49   mc_ 49                                 1             -1.291707e-06 #> 50   mc_ 50                                 1             -1.076422e-07 #> 51   mc_ 51                                 1              5.382112e-08 #> 52   mc_ 52                                 1              2.691056e-08 #> 53   mc_ 53                                 1              8.073167e-07 #> 54   mc_ 54                                 1              0.000000e+00 #> 55   mc_ 55                                 1              1.614633e-07 #> 56   mc_ 56                                 1             -4.305689e-07 #> 57   mc_ 57                                 1              0.000000e+00 #> 58   mc_ 58                                 1             -1.076422e-07 #> 59   mc_ 59                                 1              1.883739e-07 #> 60   mc_ 60                                 1              8.544102e-07 #> 61   mc_ 61                                 1             -6.458534e-07 #> 62   mc_ 62                                 1             -4.305689e-07 #> 63   mc_ 63                                 1              0.000000e+00 #> 64   mc_ 64                                 1              0.000000e+00 #> 65   mc_ 65                                 1             -3.229267e-07 #> 66   mc_ 66                                 1              0.000000e+00 #> 67   mc_ 67                                 1              2.412995e-01 #> 68   mc_ 68                                 1              1.076422e-07 #> 69   mc_ 69                                 1              0.000000e+00 #> 70   mc_ 70                                 1              0.000000e+00 #> 71   mc_ 71                                 1              0.000000e+00 #> 72   mc_ 72                                 1              2.152845e-07 #> 73   mc_ 73                                 1              1.883739e-07 #> 74   mc_ 74                                 1              1.614633e-07 #> 75   mc_ 75                                 1              0.000000e+00 #> 76   mc_ 76                                 1              5.382112e-08 #> 77   mc_ 77                                 1              0.000000e+00 #> 78   mc_ 78                                 1              1.668455e-06 #> 79   mc_ 79                                 1              0.000000e+00 #> 80   mc_ 80                                 1              1.009146e-07 #> 81   mc_ 81                                 1              0.000000e+00 #> 82   mc_ 82                                 1              1.883739e-07 #> 83   mc_ 83                                 1              8.476826e-07 #> 84   mc_ 84                                 1              0.000000e+00 #> 85   mc_ 85                                 1             -4.305689e-07 #> 86   mc_ 86                                 1              0.000000e+00 #> 87   mc_ 87                                 1              0.000000e+00 #> 88   mc_ 88                                 1             -1.076422e-07 #> 89   mc_ 89                                 1              0.000000e+00 #> 90   mc_ 90                                 1              1.708820e-06 #> 91   mc_ 91                                 1              4.305689e-07 #> 92   mc_ 92                                 1              2.152845e-07 #> 93   mc_ 93                                 1              4.036584e-08 #> 94   mc_ 94                                 1              7.534956e-07 #> 95   mc_ 95                                 1              2.085568e-07 #> 96   mc_ 96                                 1              7.534956e-07 #> 97   mc_ 97                                 1              0.000000e+00 #> 98   mc_ 98                                 1              5.382112e-08 #> 99   mc_ 99                                 1             -1.681910e-09 #> 100 mc_ 100                                 1              0.000000e+00 #>     Salts.Added.during.Water.Treatment #> 1                         8.476826e-07 #> 2                        -1.291707e-06 #> 3                        -1.076422e-07 #> 4                         0.000000e+00 #> 5                         0.000000e+00 #> 6                         0.000000e+00 #> 7                         3.441188e-06 #> 8                         2.691056e-08 #> 9                         1.076422e-07 #> 10                        6.888262e-06 #> 11                       -4.305689e-07 #> 12                        0.000000e+00 #> 13                        8.577740e-07 #> 14                        2.152845e-07 #> 15                        5.382112e-08 #> 16                        8.073167e-08 #> 17                        6.862192e-06 #> 18                        6.727639e-09 #> 19                        5.382112e-08 #> 20                        2.018292e-07 #> 21                        8.073167e-07 #> 22                        3.336909e-06 #> 23                        1.883739e-07 #> 24                        0.000000e+00 #> 25                        0.000000e+00 #> 26                        1.291707e-06 #> 27                        0.000000e+00 #> 28                        1.708820e-06 #> 29                        0.000000e+00 #> 30                        1.076422e-07 #> 31                        0.000000e+00 #> 32                        0.000000e+00 #> 33                        3.431096e-06 #> 34                        1.614633e-06 #> 35                        0.000000e+00 #> 36                       -2.152845e-07 #> 37                        0.000000e+00 #> 38                        1.883739e-07 #> 39                        8.476826e-07 #> 40                        0.000000e+00 #> 41                        1.614633e-07 #> 42                        0.000000e+00 #> 43                        1.708820e-06 #> 44                        0.000000e+00 #> 45                        0.000000e+00 #> 46                        0.000000e+00 #> 47                        0.000000e+00 #> 48                        0.000000e+00 #> 49                       -1.291707e-06 #> 50                       -1.076422e-07 #> 51                        5.382112e-08 #> 52                        2.691056e-08 #> 53                        8.073167e-07 #> 54                        0.000000e+00 #> 55                        1.614633e-07 #> 56                       -4.305689e-07 #> 57                        0.000000e+00 #> 58                       -1.076422e-07 #> 59                        1.883739e-07 #> 60                        8.544102e-07 #> 61                       -6.458534e-07 #> 62                       -4.305689e-07 #> 63                        0.000000e+00 #> 64                        0.000000e+00 #> 65                       -3.229267e-07 #> 66                        0.000000e+00 #> 67                       -3.229267e-07 #> 68                       -3.152961e-07 #> 69                        0.000000e+00 #> 70                        0.000000e+00 #> 71                        0.000000e+00 #> 72                        2.152845e-07 #> 73                        1.883739e-07 #> 74                        1.614633e-07 #> 75                        0.000000e+00 #> 76                        5.382112e-08 #> 77                        0.000000e+00 #> 78                        1.668455e-06 #> 79                        0.000000e+00 #> 80                        1.009146e-07 #> 81                        0.000000e+00 #> 82                        1.883739e-07 #> 83                        8.476826e-07 #> 84                        0.000000e+00 #> 85                       -4.305689e-07 #> 86                        0.000000e+00 #> 87                        0.000000e+00 #> 88                       -1.076422e-07 #> 89                        0.000000e+00 #> 90                        1.708820e-06 #> 91                        4.305689e-07 #> 92                        2.152845e-07 #> 93                        4.036584e-08 #> 94                        7.534956e-07 #> 95                        2.085568e-07 #> 96                        7.534956e-07 #> 97                        0.000000e+00 #> 98                        5.382112e-08 #> 99                       -1.681910e-09 #> 100                       0.000000e+00 #>     Salts.Added.by.Winter.Maintenance.Activities Ecosystem.Health #> 1                                  -3.070146e-01     9.024109e-02 #> 2                                  -1.773516e-01     8.057875e-03 #> 3                                  -1.482140e-01     8.604504e-02 #> 4                                   0.000000e+00     0.000000e+00 #> 5                                   0.000000e+00     0.000000e+00 #> 6                                   0.000000e+00     0.000000e+00 #> 7                                  -3.192002e-01     1.753454e-01 #> 8                                  -2.772770e-07     1.103088e-01 #> 9                                  -2.381251e-01     4.134884e-02 #> 10                                 -3.434118e-01     2.519948e-01 #> 11                                 -4.305689e-07     1.140307e-01 #> 12                                  0.000000e+00     0.000000e+00 #> 13                                 -2.829797e-01     1.919279e-01 #> 14                                 -9.232839e-02     1.360318e-01 #> 15                                 -1.710918e-01     8.731371e-02 #> 16                                 -1.209068e-06     6.136959e-02 #> 17                                 -2.850048e-01     3.140990e-01 #> 18                                 -9.689903e-08     1.025205e-01 #> 19                                 -2.714198e-01     6.167940e-02 #> 20                                 -1.286281e-01     2.564071e-02 #> 21                                 -2.974415e-01     5.569147e-02 #> 22                                 -1.575227e-01     3.254337e-01 #> 23                                 -2.300132e-01     1.115355e-01 #> 24                                  0.000000e+00     0.000000e+00 #> 25                                  0.000000e+00     0.000000e+00 #> 26                                 -2.273506e-01     1.291707e-06 #> 27                                  0.000000e+00     0.000000e+00 #> 28                                 -2.576384e-01     1.005270e-01 #> 29                                  0.000000e+00     0.000000e+00 #> 30                                 -1.753082e-01     4.901751e-02 #> 31                                  0.000000e+00     0.000000e+00 #> 32                                  0.000000e+00     0.000000e+00 #> 33                                 -2.448631e-01     2.898529e-01 #> 34                                 -2.255027e-01     1.376445e-02 #> 35                                  0.000000e+00     0.000000e+00 #> 36                                 -7.288493e-02     1.046801e-02 #> 37                                  0.000000e+00     0.000000e+00 #> 38                                 -2.940744e-01     9.277833e-02 #> 39                                 -2.705742e-01     6.082170e-02 #> 40                                  0.000000e+00     0.000000e+00 #> 41                                  1.614633e-07     1.535902e-01 #> 42                                  0.000000e+00     0.000000e+00 #> 43                                 -2.560629e-01     1.815622e-01 #> 44                                  0.000000e+00     0.000000e+00 #> 45                                 -2.663067e-01     7.028651e-02 #> 46                                  0.000000e+00     0.000000e+00 #> 47                                  0.000000e+00     0.000000e+00 #> 48                                  0.000000e+00     0.000000e+00 #> 49                                 -9.559279e-02    -1.291707e-06 #> 50                                 -4.013792e-02     2.156288e-02 #> 51                                 -7.626035e-02     5.382112e-08 #> 52                                 -3.157207e-07     6.943574e-02 #> 53                                 -2.381256e-01     1.251432e-01 #> 54                                 -9.559658e-02     1.478017e-01 #> 55                                 -1.823906e-01     9.272110e-02 #> 56                                 -4.305689e-07     1.406203e-01 #> 57                                  0.000000e+00     0.000000e+00 #> 58                                 -5.434091e-02     1.733882e-02 #> 59                                 -2.300151e-01     1.196829e-01 #> 60                                 -2.765129e-01     1.759834e-01 #> 61                                 -6.409211e-02     1.299625e-02 #> 62                                 -4.305689e-07     5.230744e-02 #> 63                                  0.000000e+00     0.000000e+00 #> 64                                  0.000000e+00     0.000000e+00 #> 65                                 -1.157269e-01     3.285257e-02 #> 66                                  0.000000e+00     0.000000e+00 #> 67                                 -8.493835e-02     1.668321e-02 #> 68                                 -1.839021e-01     5.347643e-02 #> 69                                  0.000000e+00     0.000000e+00 #> 70                                  0.000000e+00     0.000000e+00 #> 71                                  0.000000e+00     0.000000e+00 #> 72                                 -2.898252e-01     2.413468e-02 #> 73                                 -2.733036e-01     1.045195e-01 #> 74                                 -1.458979e-06     3.057301e-01 #> 75                                  0.000000e+00     0.000000e+00 #> 76                                 -2.041160e-01     1.270763e-01 #> 77                                  0.000000e+00     0.000000e+00 #> 78                                 -1.808668e-01     1.537055e-01 #> 79                                  0.000000e+00     0.000000e+00 #> 80                                 -2.492090e-01     8.036429e-02 #> 81                                  0.000000e+00     0.000000e+00 #> 82                                 -2.064588e-01     1.048121e-01 #> 83                                 -3.020508e-01     1.229847e-01 #> 84                                  0.000000e+00     5.825310e-02 #> 85                                 -4.557105e-02     1.142109e-03 #> 86                                  0.000000e+00     0.000000e+00 #> 87                                  0.000000e+00     0.000000e+00 #> 88                                 -1.421881e-01     5.671956e-02 #> 89                                  0.000000e+00     0.000000e+00 #> 90                                 -2.830725e-01     9.352363e-02 #> 91                                 -1.157268e-01     1.461128e-02 #> 92                                 -1.584145e-01     2.079128e-02 #> 93                                 -6.543130e-07     2.542906e-01 #> 94                                 -4.160147e-06     5.977344e-02 #> 95                                 -1.647577e-01     1.199746e-01 #> 96                                 -1.411282e-01     2.658609e-02 #> 97                                 -7.808340e-02     1.150039e-01 #> 98                                 -2.098785e-01     1.087660e-01 #> 99                                 -7.868141e-02     5.884581e-02 #> 100                                 0.000000e+00     2.672634e-02 #>     Public.Awareness.of.Reservoir.Salinization Salinization.of.the.Reservoir #> 1                                 8.476826e-07                 -1.308694e-01 #> 2                                -1.291707e-06                 -2.239742e-02 #> 3                                -1.076422e-07                 -1.257881e-01 #> 4                                 0.000000e+00                  0.000000e+00 #> 5                                 0.000000e+00                  0.000000e+00 #> 6                                 0.000000e+00                  0.000000e+00 #> 7                                 3.441188e-06                 -2.145061e-01 #> 8                                 2.691056e-08                 -1.361154e-01 #> 9                                 1.076422e-07                 -7.659834e-02 #> 10                                6.888262e-06                 -3.693804e-01 #> 11                               -4.305689e-07                 -1.480321e-01 #> 12                                0.000000e+00                  0.000000e+00 #> 13                                8.577740e-07                 -2.296968e-01 #> 14                                2.152845e-07                 -2.036442e-01 #> 15                                5.382112e-08                 -1.377743e-01 #> 16                                8.073167e-08                 -2.191741e-01 #> 17                                6.862192e-06                 -6.848731e-02 #> 18                                6.727639e-09                 -1.180611e-01 #> 19                                5.382112e-08                 -1.056057e-01 #> 20                                2.018292e-07                 -4.179645e-02 #> 21                                8.073167e-07                 -2.040499e-01 #> 22                                3.336909e-06                 -2.550856e-01 #> 23                               -2.500764e-02                 -1.240299e-01 #> 24                                0.000000e+00                  0.000000e+00 #> 25                                0.000000e+00                  0.000000e+00 #> 26                                1.291707e-06                 -8.921356e-02 #> 27                                0.000000e+00                  0.000000e+00 #> 28                                1.708820e-06                 -1.410663e-01 #> 29                                0.000000e+00                  0.000000e+00 #> 30                                1.076422e-07                 -9.581093e-02 #> 31                                0.000000e+00                  0.000000e+00 #> 32                                0.000000e+00                  0.000000e+00 #> 33                                3.431096e-06                 -1.792192e-01 #> 34                                1.614633e-06                 -1.647356e-01 #> 35                                0.000000e+00                  0.000000e+00 #> 36                               -2.152845e-07                 -2.241272e-02 #> 37                                0.000000e+00                  0.000000e+00 #> 38                                1.883739e-07                 -1.379898e-01 #> 39                                8.476826e-07                 -1.403900e-01 #> 40                                0.000000e+00                  0.000000e+00 #> 41                                1.614633e-07                 -1.862940e-01 #> 42                                0.000000e+00                  0.000000e+00 #> 43                                1.708820e-06                 -3.209542e-01 #> 44                                0.000000e+00                  0.000000e+00 #> 45                                0.000000e+00                 -1.115897e-01 #> 46                                0.000000e+00                  0.000000e+00 #> 47                                0.000000e+00                  0.000000e+00 #> 48                                0.000000e+00                  0.000000e+00 #> 49                               -1.291707e-06                 -7.242534e-02 #> 50                               -1.076422e-07                 -3.245571e-02 #> 51                                5.382112e-08                 -6.926265e-02 #> 52                                2.691056e-08                 -1.172312e-01 #> 53                                8.073167e-07                 -1.941931e-01 #> 54                                0.000000e+00                 -2.302727e-01 #> 55                                1.614633e-07                 -1.557123e-01 #> 56                               -4.305689e-07                 -2.198503e-01 #> 57                                0.000000e+00                  0.000000e+00 #> 58                               -1.076422e-07                 -3.949593e-02 #> 59                                1.883739e-07                 -1.308493e-01 #> 60                                8.544102e-07                 -2.550975e-01 #> 61                               -6.458534e-07                 -3.098675e-02 #> 62                               -4.305689e-07                 -1.995325e-01 #> 63                                0.000000e+00                  0.000000e+00 #> 64                                0.000000e+00                  0.000000e+00 #> 65                               -3.229267e-07                 -9.339049e-02 #> 66                                0.000000e+00                  0.000000e+00 #> 67                               -3.229267e-07                 -2.773605e-02 #> 68                                1.076422e-07                 -1.018916e-01 #> 69                                0.000000e+00                  0.000000e+00 #> 70                                0.000000e+00                  0.000000e+00 #> 71                                0.000000e+00                  0.000000e+00 #> 72                                2.152845e-07                 -3.557389e-02 #> 73                                1.883739e-07                 -1.340258e-01 #> 74                                1.614633e-07                 -7.568016e-06 #> 75                                0.000000e+00                  0.000000e+00 #> 76                                5.382112e-08                 -1.538171e-01 #> 77                                0.000000e+00                  0.000000e+00 #> 78                                1.668455e-06                 -3.253785e-01 #> 79                                0.000000e+00                  0.000000e+00 #> 80                                1.009146e-07                 -1.343700e-01 #> 81                                0.000000e+00                  0.000000e+00 #> 82                                1.883739e-07                 -1.277811e-01 #> 83                                8.476826e-07                 -2.897745e-01 #> 84                                0.000000e+00                 -1.083597e-01 #> 85                               -4.305689e-07                 -1.647052e-02 #> 86                                0.000000e+00                  0.000000e+00 #> 87                                0.000000e+00                  0.000000e+00 #> 88                               -1.076422e-07                 -7.979994e-02 #> 89                                0.000000e+00                  0.000000e+00 #> 90                                1.708820e-06                 -1.387648e-01 #> 91                                4.305689e-07                 -4.556160e-02 #> 92                                2.152845e-07                 -1.052117e-01 #> 93                                4.036584e-08                 -4.694832e-06 #> 94                               -3.655146e-02                 -2.734279e-01 #> 95                                2.085568e-07                 -2.698936e-01 #> 96                                7.534956e-07                 -7.749845e-02 #> 97                                0.000000e+00                 -1.702036e-01 #> 98                                5.382112e-08                 -1.458926e-01 #> 99                               -1.681910e-09                 -8.348434e-02 #> 100                               0.000000e+00                 -1.411292e-01 #>  #> $mc_CIs_and_quantiles #>                                           node expected_value           min #> 1            Guidance.Docs.for.Salt.Management   1.000000e+00  1.000000e+00 #> 2                    Public.Education.Programs   1.221609e-02 -1.291707e-06 #> 3           Salts.Added.during.Water.Treatment   3.833765e-07 -1.291707e-06 #> 4 Salts.Added.by.Winter.Maintenance.Activities  -1.061946e-01 -3.434118e-01 #> 5                             Ecosystem.Health   6.459906e-02 -1.291707e-06 #> 6   Public.Awareness.of.Reservoir.Salinization  -6.033052e-04 -3.655146e-02 #> 7                Salinization.of.the.Reservoir  -9.372844e-02 -3.693804e-01 #>        0.025_CI 0.25_quantile        median 0.75_quantile      0.975_CI #> 1  1.000000e+00     1.0000000  1.000000e+00  1.000000e+00  1.000000e+00 #> 2  3.360325e-03     0.0000000  1.681910e-08  2.691056e-07  2.342933e-02 #> 3  1.631528e-07     0.0000000  0.000000e+00  2.035111e-07  6.135246e-07 #> 4 -1.286072e-01    -0.2137845 -7.457264e-02  0.000000e+00 -8.582217e-02 #> 5  5.008933e-02     0.0000000  3.710071e-02  1.058006e-01  8.061387e-02 #> 6 -1.596402e-03     0.0000000  0.000000e+00  1.917377e-07  5.114976e-07 #> 7 -1.115734e-01    -0.1423200 -8.164214e-02  0.000000e+00 -7.507261e-02 #>            max #> 1 1.000000e+00 #> 2 2.605706e-01 #> 3 6.888262e-06 #> 4 1.614633e-07 #> 5 3.254337e-01 #> 6 6.888262e-06 #> 7 0.000000e+00 #>"},{"path":"/reference/get_mc_simulations_inference_CIs_w_bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"[INTENDED FOR DEVELOPER USE ONLY] Calculate Inferences (w/ Confidence Intervals via Bootstrap) of MC FCM Simulations — get_mc_simulations_inference_CIs_w_bootstrap","title":"[INTENDED FOR DEVELOPER USE ONLY] Calculate Inferences (w/ Confidence Intervals via Bootstrap) of MC FCM Simulations — get_mc_simulations_inference_CIs_w_bootstrap","text":"gets mean distribution simulated values across given iter. Also returns bootstrapped mean means distribution simulated values across given iter called.","code":""},{"path":"/reference/get_mc_simulations_inference_CIs_w_bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[INTENDED FOR DEVELOPER USE ONLY] Calculate Inferences (w/ Confidence Intervals via Bootstrap) of MC FCM Simulations — get_mc_simulations_inference_CIs_w_bootstrap","text":"","code":"get_mc_simulations_inference_CIs_w_bootstrap(   mc_simulations_inference_df = data.frame(),   inference_function = \"mean\",   confidence_interval = 0.95,   bootstrap_reps = 1000,   parallel = TRUE,   n_cores = integer(),   show_progress = TRUE )"},{"path":"/reference/get_mc_simulations_inference_CIs_w_bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[INTENDED FOR DEVELOPER USE ONLY] Calculate Inferences (w/ Confidence Intervals via Bootstrap) of MC FCM Simulations — get_mc_simulations_inference_CIs_w_bootstrap","text":"mc_simulations_inference_df final values set fcm simulations; also inference infer_fmcm object inference_function Estimate confidence intervals \"mean\" \"median\" inferences monte carlo simulations confidence_interval distribution bounded confidence intervals? (e.g. 0.95) bootstrap_reps Repetitions bootstrap process, chosen parallel TRUE/FALSE Whether perform function using parallel processing n_cores Number cores use parallel processing. input given, use available cores machine. show_progress TRUE/FALSE Show progress bar creating fmcm. Uses pbmapply pbapply package underlying function.","code":""},{"path":"/reference/get_mc_simulations_inference_CIs_w_bootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[INTENDED FOR DEVELOPER USE ONLY] Calculate Inferences (w/ Confidence Intervals via Bootstrap) of MC FCM Simulations — get_mc_simulations_inference_CIs_w_bootstrap","text":"list raw bootstrap draws dataframe confidence intervals","code":""},{"path":"/reference/get_mc_simulations_inference_CIs_w_bootstrap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[INTENDED FOR DEVELOPER USE ONLY] Calculate Inferences (w/ Confidence Intervals via Bootstrap) of MC FCM Simulations — get_mc_simulations_inference_CIs_w_bootstrap","text":"function designed streamline process getting mean bootstrapped mean means distribution simulated values across individual iterations. Use get_bootstrapped_means estimate confidence intervals mean value across simulations. show_progress parallel inputs change functions called, change output! allowed toggled /increase user control runtime.","code":""},{"path":[]},{"path":"/reference/get_mc_simulations_inference_CIs_w_bootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[INTENDED FOR DEVELOPER USE ONLY] Calculate Inferences (w/ Confidence Intervals via Bootstrap) of MC FCM Simulations — get_mc_simulations_inference_CIs_w_bootstrap","text":"","code":"ex_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0, 0, 0),   \"B\" = c(0, 0, 0, 1),   \"C\" = c(0, 1, 0, 0),   \"D\" = c(0, 0, 1, 0) ) ex_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0, 0, 0),   \"B\" = c(0.25, 0, 0, 0.25),   \"C\" = c(0, 0.25, 0, 0),   \"D\" = c(0, 0, 0.25, 0) ) ex_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0, 0, 0),   \"B\" = c(0.75, 0, 0, 0.75),   \"C\" = c(0, 0.75, 0, 0),   \"D\" = c(0, 0, 0.75, 0) ) ex_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0, 0, 0),   \"B\" = c(0.5, 0, 0, 0.5),   \"C\" = c(0, 0.5, 0, 0),   \"D\" = c(0, 0, 0.5, 0) ) ex_fcms <- list(   ex_adj_matrix_1, ex_adj_matrix_2, ex_adj_matrix_3, ex_adj_matrix_4 )  mc_fcms <- build_monte_carlo_fcms_from_conventional_adj_matrices(   ex_fcms, N_samples = 100, include_zeroes = FALSE, show_progress = TRUE ) #> [1] Sampling from column vectors #> Sampling from column vectors[1] Constructing monte carlo fcms from samples #> Constructing monte carlo fcms from samples  mc_fcms_inferences <- infer_fcm_set(   adj_matrices = mc_fcms,   initial_state_vector <- c(1, 1, 1, 1),   clamping_vector <- c(1, 0, 0, 0),   activation = \"kosko\",   squashing = \"sigmoid\",   lambda = 1,   point_of_inference = \"final\",   max_iter = 1000,   min_error = 1e-5,   parallel = FALSE,   show_progress = TRUE ) #>  #> [1] Running Simulations  mc_sims_inferences <- get_mc_simulations_inference_CIs_w_bootstrap(   mc_fcms_inferences$inference, \"median\", 0.95, parallel = FALSE ) #> [1] Done"},{"path":"/reference/get_node_IDs_from_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Node IDs (Concepts) from Adj. Matrix — get_node_IDs_from_input","title":"Get Node IDs (Concepts) from Adj. Matrix — get_node_IDs_from_input","text":"Get column names adjacency matrix names concepts. column names given, use generic column names (C1, C2, ..., Cn) Intended developer use improve package readability.","code":""},{"path":"/reference/get_node_IDs_from_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Node IDs (Concepts) from Adj. Matrix — get_node_IDs_from_input","text":"","code":"get_node_IDs_from_input(adj_matrix = matrix())"},{"path":"/reference/get_node_IDs_from_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Node IDs (Concepts) from Adj. Matrix — get_node_IDs_from_input","text":"adj_matrix n x n adjacency matrix represents FCM","code":""},{"path":"/reference/get_node_IDs_from_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Node IDs (Concepts) from Adj. Matrix — get_node_IDs_from_input","text":"vector concept names","code":""},{"path":[]},{"path":"/reference/get_node_IDs_from_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Node IDs (Concepts) from Adj. Matrix — get_node_IDs_from_input","text":"","code":"adj_matrix <- data.frame(   \"A\" = c(0, 0, 0.3, 0),   \"B\" = c(0.5, 0, 0, 0.6),   \"C\" = c(0, 0, 0, 0),   \"D\" = c(1, 0, 1, 0) ) get_node_IDs_from_input(adj_matrix) #> [1] \"A\" \"B\" \"C\" \"D\""},{"path":"/reference/get_plot_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get fcmconfr Object Plot Data — get_plot_data","title":"Get fcmconfr Object Plot Data — get_plot_data","text":"function parses fcmconfr output gather organize analysis results dataframes constructed plugged directly ggplot2 pipeline","code":""},{"path":"/reference/get_plot_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get fcmconfr Object Plot Data — get_plot_data","text":"","code":"get_plot_data(fcmconfr_object, filter_limit = 0.01)"},{"path":"/reference/get_plot_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get fcmconfr Object Plot Data — get_plot_data","text":"fcmconfr_object direct output fcmconfr function filter_limit Remove concepts whose inferences exceed value","code":""},{"path":"/reference/get_plot_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get fcmconfr Object Plot Data — get_plot_data","text":"list fcmconfr output dataframes organized streamline functionality ggplot","code":""},{"path":"/reference/get_plot_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get fcmconfr Object Plot Data — get_plot_data","text":"function produces slightly different outputs fcmconfr outputs generated conventional, ivfn, tfn FCMs","code":""},{"path":"/reference/get_plot_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get fcmconfr Object Plot Data — get_plot_data","text":"","code":"NULL #> NULL"},{"path":"/reference/grapes-dopar-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"dopar operator — %dopar%","title":"dopar operator — %dopar%","text":"See https://cran.r-project.org/web/packages/doParallel/vignettes/gettingstartedParallel.pdf details.","code":""},{"path":"/reference/infer_conventional_fcm.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer (Conventional) FCM — infer_conventional_fcm","title":"Infer (Conventional) FCM — infer_conventional_fcm","text":"compares baseline simulation fcm input scenario (scenario vector) estimate outputs change compared structural expected behavior system.","code":""},{"path":"/reference/infer_conventional_fcm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer (Conventional) FCM — infer_conventional_fcm","text":"","code":"infer_conventional_fcm(   adj_matrix = matrix(),   initial_state_vector = c(),   clamping_vector = c(),   activation = c(\"kosko\", \"modified-kosko\", \"rescale\"),   squashing = c(\"sigmoid\", \"tanh\"),   lambda = 1,   point_of_inference = c(\"peak\", \"final\"),   max_iter = 100,   min_error = 1e-05 )"},{"path":"/reference/infer_conventional_fcm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer (Conventional) FCM — infer_conventional_fcm","text":"adj_matrix n x n adjacency matrix represents FCM initial_state_vector list state values start fcm simulation clamping_vector list values representing specific actions taken control behavior FCM. Specifically, non-zero values defined vector remain constant throughout entire simulation \"clamped\" values. activation activation function applied. Must one following: 'kosko', 'modified-kosko', 'rescale'. squashing squashing function apply. Must one following: 'bivalent', 'saturation', 'trivalent', 'tanh', 'sigmoid'. lambda numeric value defines steepness slope squashing function tanh sigmoid applied point_of_inference point along simulation time-series identified inference. Must one following: 'peak' 'final' max_iter maximum number iterations run minimum error value achieved min_error lowest error (sum absolute value current state vector minus previous state vector) iterations necessary simulation stop","code":""},{"path":"/reference/infer_conventional_fcm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer (Conventional) FCM — infer_conventional_fcm","text":"list (conventional) fcm inference results (including baseline simulation outputs)","code":""},{"path":"/reference/infer_conventional_fcm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Infer (Conventional) FCM — infer_conventional_fcm","text":"function performs two fcm simulations compares output two. first simulation considers baseline activity nodes \"clamped\" system behaves without outside inputs. second simulation considers scenario one multiple nodes \"clamped\" system reactive additional inputs. function returns difference simulation results scenario baseline activity understand system manipulations compare structural expectations system. function produces output mental modeler following inputs:  - initial_state_vector = c(1, 1, ..., 1)  - activation = \"kosko\"  - squashing = either \"sigmoid\" \"tanh\"  - lambda = 1","code":""},{"path":"/reference/infer_conventional_fcm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infer (Conventional) FCM — infer_conventional_fcm","text":"","code":"adj_matrix <- data.frame(   C1 = c(0, 0, 0, 0, 0, 0),   C2 = c(-0.85, 0, 0, 0.35, 0, 0),   C3 = c(0, 0, 0, 0, 0, 0),   C4 = c(-0.7, 0.6, -1, 0, -1, 0),   C5 = c(0.1, 0, 0, -0.8, 0, 0),   C6 = c(0, -0.95, 0, 0, -0.95, 0) )  infer_conventional_fcm(adj_matrix,           initial_state_vector = c(1, 1, 1, 1, 1, 1),           clamping_vector = c(1, 0, 0, 0, 0, 0),           activation = \"kosko\",           squashing = \"sigmoid\",           lambda = 1,           point_of_inference = \"final\") #> fcmconfr: conventional  #>  $inference #>    C1: 1 #>    C2: -0.1 #>    C3: 0 #>    C4: -0.07 #>    C5: 0.03 #>    C6: 0.02 #>  $inference_for_plotting #>    - inference data transformed to streamline plotting with ggplot  #>  $inference_state_vectors #>    - inferences across all iterations of the simulation  #>  $scenario_simulation #>  $baseline_simulation  # To simulate an fcm without clamping (i.e. don't calculate the difference # from steady-state), change the values in the initial_state_vector while # leaving all values in the clamping_vector at 0 infer_conventional_fcm(adj_matrix,           initial_state_vector = c(1, 0, 0, 0, 0, 0),           clamping_vector = c(0, 0, 0, 0, 0, 0),           activation = \"kosko\",           squashing = \"sigmoid\",           lambda = 1,           point_of_inference = \"final\") #> fcmconfr: conventional  #>  $inference #>    C1: 0.5 #>    C2: 0.42 #>    C3: 0.5 #>    C4: 0.26 #>    C5: 0.46 #>    C6: 0.3 #>  $inference_for_plotting #>    - inference data transformed to streamline plotting with ggplot  #>  $inference_state_vectors #>    - inferences across all iterations of the simulation  #>  $scenario_simulation #>  $baseline_simulation"},{"path":"/reference/infer_fcm.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer FCM — infer_fcm","title":"Infer FCM — infer_fcm","text":"compares baseline simulation fcm input scenario (scenario vector) estimate outputs change compared structural expected behavior system.","code":""},{"path":"/reference/infer_fcm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer FCM — infer_fcm","text":"","code":"infer_fcm(   adj_matrix = matrix(),   initial_state_vector = c(),   clamping_vector = c(),   activation = c(\"kosko\", \"modified-kosko\", \"rescale\"),   squashing = c(\"sigmoid\", \"tanh\"),   lambda = 1,   point_of_inference = c(\"peak\", \"final\"),   max_iter = 100,   min_error = 1e-05 )"},{"path":"/reference/infer_fcm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer FCM — infer_fcm","text":"adj_matrix n x n adjacency matrix represents FCM initial_state_vector list state values start fcm simulation clamping_vector list values representing specific actions taken control behavior FCM. Specifically, non-zero values defined vector remain constant throughout entire simulation \"clamped\" values. activation activation function applied. Must one following: 'kosko', 'modified-kosko', 'rescale'. squashing squashing function apply. Must one following: 'bivalent', 'saturation', 'trivalent', 'tanh', 'sigmoid'. lambda numeric value defines steepness slope squashing function tanh sigmoid applied point_of_inference point along simulation time-series identified inference. Must one following: 'peak' 'final' max_iter maximum number iterations run minimum error value achieved min_error lowest error (sum absolute value current state vector minus previous state vector) iterations necessary simulation stop","code":""},{"path":"/reference/infer_fcm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer FCM — infer_fcm","text":"list fcm inference results (including baseline simulation outputs)","code":""},{"path":"/reference/infer_fcm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Infer FCM — infer_fcm","text":"function performs two fcm simulations compares output two. first simulation considers baseline activity nodes \"clamped\" system behaves without outside inputs. second simulation considers scenario one multiple nodes \"clamped\" system reactive additional inputs. function returns difference simulation results scenario baseline activity understand system manipulations compare structural expectations system. function produces output mental modeler following inputs:  - initial_state_vector = c(1, 1, ..., 1)  - activation = \"kosko\"  - squashing = either \"sigmoid\" \"tanh\"  - lambda = 1","code":""},{"path":"/reference/infer_fcm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infer FCM — infer_fcm","text":"","code":"adj_matrix <- data.frame(   C1 = c(0, 0, 0, 0, 0, 0),   C2 = c(-0.85, 0, 0, 0.35, 0, 0),   C3 = c(0, 0, 0, 0, 0, 0),   C4 = c(-0.7, 0.6, -1, 0, -1, 0),   C5 = c(0.1, 0, 0, -0.8, 0, 0),   C6 = c(0, -0.95, 0, 0, -0.95, 0) )  infer_fcm(adj_matrix,           initial_state_vector = c(1, 1, 1, 1, 1, 1),           clamping_vector = c(1, 0, 0, 0, 0, 0),           activation = \"kosko\",           squashing = \"sigmoid\",           lambda = 1,           point_of_inference = \"final\") #> fcmconfr: conventional  #>  $inference #>    C1: 1 #>    C2: -0.1 #>    C3: 0 #>    C4: -0.07 #>    C5: 0.03 #>    C6: 0.02 #>  $inference_for_plotting #>    - inference data transformed to streamline plotting with ggplot  #>  $inference_state_vectors #>    - inferences across all iterations of the simulation  #>  $scenario_simulation #>  $baseline_simulation  # To simulate an fcm without clamping (i.e. don't calculate the difference # from steady-state), change the values in the initial_state_vector while # leaving all values in the clamping_vector at 0 infer_fcm(adj_matrix,           initial_state_vector = c(1, 0, 0, 0, 0, 0),           clamping_vector = c(0, 0, 0, 0, 0, 0),           activation = \"kosko\",           squashing = \"sigmoid\",           lambda = 1,           point_of_inference = \"final\") #> fcmconfr: conventional  #>  $inference #>    C1: 0.5 #>    C2: 0.42 #>    C3: 0.5 #>    C4: 0.26 #>    C5: 0.46 #>    C6: 0.3 #>  $inference_for_plotting #>    - inference data transformed to streamline plotting with ggplot  #>  $inference_state_vectors #>    - inferences across all iterations of the simulation  #>  $scenario_simulation #>  $baseline_simulation   # Inference w/ Interval-Valued Fuzzy Numbers (IVFNs) lower_adj_matrix <- data.frame(   C1 = c(0, 0, 0, 0, 0, 0),   C2 = c(-0.85, 0, 0, 0.35, 0, 0),   C3 = c(0, 0, 0, 0, 0, 0),   C4 = c(-0.7, 0.6, -1, 0, -1, 0),   C5 = c(0.1, 0, 0, -0.8, 0, 0),   C6 = c(0, -0.95, 0, 0, -0.95, 0) ) upper_adj_matrix <- data.frame(   C1 = c(0, 0, 0, 0, 0, 0),   C2 = c(-0.2, 0, 0, 0.9, 0, 0),   C3 = c(0, 0, 0, 0, 0, 0),   C4 = c(-0.3, 0.9, -0.5, 0, -0.5, 0),   C5 = c(0.5, 0, 0, -0.3, 0, 0),   C6 = c(0, -0.4, 0, 0, -0.5, 0) ) adj_matrix <- make_adj_matrix_w_ivfns(lower_adj_matrix, upper_adj_matrix)  infer_fcm(adj_matrix,           initial_state_vector = c(1, 1, 1, 1, 1, 1),           clamping_vector = c(1, 0, 0, 0, 0, 0),           activation = \"kosko\",           squashing = \"sigmoid\",           lambda = 1,           point_of_inference = \"final\") #> infer_fcm: ivfn  #>  $inferences_df #>    : [1, 1] (1) #>    : [-0.23, 0.09] (-0.23) #>    : [0, 0] (0) #>    : [-0.26, 0.13] (-0.26) #>    : [-0.07, 0.16] (-0.07) #>    : [-0.1, 0.11] (-0.1) #>  $inferences_for_plotting #>    - inference data transformed to streamline plotting with ggplot  #>  $inference_state_vectors #>    - inferences as fuzzy sets across all iterations of the simulation  #>  $scenario_simulation #>  $baseline_simulation   # Inference w/ Triangular Fuzzy Numbers (TFNs) lower_adj_matrix <- data.frame(   C1 = c(0, 0, 0, 0, 0, 0),   C2 = c(-0.85, 0, 0, 0.35, 0, 0),   C3 = c(0, 0, 0, 0, 0, 0),   C4 = c(-0.7, 0.6, -1, 0, -1, 0),   C5 = c(0.1, 0, 0, -0.8, 0, 0),   C6 = c(0, -0.95, 0, 0, -0.95, 0) ) mode_adj_matrix <- data.frame(   C1 = c(0, 0, 0, 0, 0, 0),   C2 = c(-0.5, 0, 0, 0.6, 0, 0),   C3 = c(0, 0, 0, 0, 0, 0),   C4 = c(-0.5, 0.7, -0.8, 0, -0.8, 0),   C5 = c(0.2, 0, 0, -0.6, 0, 0),   C6 = c(0, -0.7, 0, 0, -0.6, 0) ) upper_adj_matrix <- data.frame(   C1 = c(0, 0, 0, 0, 0, 0),   C2 = c(-0.2, 0, 0, 0.9, 0, 0),   C3 = c(0, 0, 0, 0, 0, 0),   C4 = c(-0.3, 0.9, -0.5, 0, -0.5, 0),   C5 = c(0.5, 0, 0, -0.3, 0, 0),   C6 = c(0, -0.4, 0, 0, -0.5, 0) ) adj_matrix <- make_adj_matrix_w_tfns(   lower_adj_matrix, mode_adj_matrix, upper_adj_matrix )  infer_fcm(adj_matrix,           initial_state_vector = c(1, 1, 1, 1, 1, 1),           clamping_vector = c(1, 0, 0, 0, 0, 0),           activation = \"kosko\",           squashing = \"sigmoid\",           lambda = 1,           point_of_inference = \"final\") #> infer_fcm: tfn  #>  $inferences_df #>    C1: [1, 1, 1] (1) #>    C2: [-0.23, -0.07, 0.09] (-0.23) #>    C3: [0, 0, 0] (0) #>    C4: [-0.26, -0.07, 0.13] (-0.26) #>    C5: [-0.07, 0.04, 0.16] (-0.07) #>    C6: [-0.1, 0.01, 0.11] (-0.1) #>  $inferences_for_plotting #>    - inference data transformed to streamline plotting with ggplot  #>  $inference_state_vectors #>    - inferences as fuzzy sets across all iterations of the simulation  #>  $scenario_simulation #>  $baseline_simulation"},{"path":"/reference/infer_fcm_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer FCMs Generated from Monte Carlo Methods — infer_fcm_set","title":"Infer FCMs Generated from Monte Carlo Methods — infer_fcm_set","text":"function mass simulates set FCMs (Conventional, IVFN, /TFN) (whose edge weights sampled using monte carlo methods) repetitively calling infer_fcm function empirical (monte carlo) adj. matrix.","code":""},{"path":"/reference/infer_fcm_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer FCMs Generated from Monte Carlo Methods — infer_fcm_set","text":"","code":"infer_fcm_set(   adj_matrices = list(matrix()),   initial_state_vector = c(),   clamping_vector = c(),   activation = c(\"kosko\", \"modified-kosko\", \"rescale\"),   squashing = c(\"sigmoid\", \"tanh\"),   lambda = 1,   point_of_inference = c(\"peak\", \"final\"),   max_iter = 100,   min_error = 1e-05,   parallel = TRUE,   n_cores = integer(),   show_progress = TRUE,   include_simulations_in_output = FALSE )"},{"path":"/reference/infer_fcm_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer FCMs Generated from Monte Carlo Methods — infer_fcm_set","text":"adj_matrices list adjecency matrices generated simulation using build_fmcm_models. initial_state_vector list state values start fcm simulation clamping_vector list values representing specific actions taken control behavior FCM. Specifically, non-zero values defined vector remain constant throughout entire simulation \"clamped\" values. activation activation function applied. Must one following: 'kosko', 'modified-kosko', 'papageorgiou'. squashing squashing function apply. Must one following: 'bivalent', 'saturation', 'trivalent', 'tanh', 'sigmoid'. lambda numeric value defines steepness slope squashing function tanh sigmoid applied point_of_inference point along simulation time-series identified inference. Must one following: 'peak' 'final' max_iter maximum number iterations run minimum error value achieved min_error lowest error (sum absolute value current state vector minus previous state vector) iterations necessary simulation stop parallel TRUE/FALSE Whether utilize parallel processing n_cores Number cores use parallel processing. input given, use available cores machine. show_progress TRUE/FALSE Show progress bar creating fmcm. Uses pbmapply pbapply package underlying function. include_simulations_in_output TRUE/FALSE whether include simulations monte-carlo-generated FCM. dramatically increase size output TRUE.","code":""},{"path":"/reference/infer_fcm_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer FCMs Generated from Monte Carlo Methods — infer_fcm_set","text":"list two dataframes: first contains inference estimates across empirical (monte carlo) FCM inferences, second elongated version first dataframe organizes data plotting (particularly ggplot2)","code":""},{"path":"/reference/infer_fcm_set.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Infer FCMs Generated from Monte Carlo Methods — infer_fcm_set","text":"show_progress parallel inputs change functions called, change output! allowed toggled /increase user control runtime.","code":""},{"path":[]},{"path":"/reference/infer_fcm_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infer FCMs Generated from Monte Carlo Methods — infer_fcm_set","text":"","code":"ex_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0, 0, 0),   \"B\" = c(0, 0, 0, 1),   \"C\" = c(0, 1, 0, 0),   \"D\" = c(0, 0, 1, 0) ) ex_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0, 0, 0),   \"B\" = c(0.25, 0, 0, 0.25),   \"C\" = c(0, 0.25, 0, 0),   \"D\" = c(0, 0, 0.25, 0) ) ex_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0, 0, 0),   \"B\" = c(0.75, 0, 0, 0.75),   \"C\" = c(0, 0.75, 0, 0),   \"D\" = c(0, 0, 0.75, 0) ) ex_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0, 0, 0),   \"B\" = c(0.5, 0, 0, 0.5),   \"C\" = c(0, 0.5, 0, 0),   \"D\" = c(0, 0, 0.5, 0) ) ex_fcms <- list(   ex_adj_matrix_1, ex_adj_matrix_2, ex_adj_matrix_3, ex_adj_matrix_4 )  mc_fcms <- build_monte_carlo_fcms_from_conventional_adj_matrices(   ex_fcms, N_samples = 1000, include_zeroes = FALSE, show_progress = TRUE ) #> [1] Sampling from column vectors #> Sampling from column vectors[1] Constructing monte carlo fcms from samples #> Constructing monte carlo fcms from samples  mc_fcms_inferences <- infer_fcm_set(   adj_matrices = mc_fcms,   initial_state_vector <- c(1, 1, 1, 1),   clamping_vector <- c(1, 0, 0, 0),   activation = \"kosko\",   squashing = \"sigmoid\",   lambda = 1,   point_of_inference = \"final\",   max_iter = 1000,   min_error = 1e-5,   parallel = FALSE,   show_progress = TRUE ) #>  #> [1] Running Simulations     # For Interval-Valued Fuzzy Numbers (IVFNs) lower_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) upper_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) adj_matrix_1 <- make_adj_matrix_w_ivfns(lower_adj_matrix_1, upper_adj_matrix_1) lower_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) upper_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(1, 0) ) adj_matrix_2 <- make_adj_matrix_w_ivfns(lower_adj_matrix_2, upper_adj_matrix_2) lower_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.2, 0) ) upper_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) adj_matrix_3 <- make_adj_matrix_w_ivfns(lower_adj_matrix_3, upper_adj_matrix_3) lower_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.0, 0) ) upper_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) adj_matrix_4 <- make_adj_matrix_w_ivfns(lower_adj_matrix_4, upper_adj_matrix_4) fcms_w_ivfns <- list(adj_matrix_1, adj_matrix_2, adj_matrix_3, adj_matrix_4)  mc_fcms <- build_monte_carlo_fcms_from_fuzzy_set_adj_matrices(   fcms_w_ivfns, \"ivfn\", 1000, include_zeroes = FALSE ) #> [1] Sampling from column vectors #> Sampling from column vectors[1] Constructing monte carlo fcms from samples #> Constructing monte carlo fcms from samples mc_fcms_inferences <- infer_fcm_set(   adj_matrices = mc_fcms,   initial_state_vector <- c(1, 1),   clamping_vector <- c(1, 0),   activation = \"kosko\",   squashing = \"sigmoid\",   lambda = 1,   point_of_inference = \"final\",   max_iter = 100,   min_error = 1e-5,   parallel = FALSE,   show_progress = TRUE ) #>  #> [1] Running Simulations  # For Triangular Fuzzy Numbers (TFNs) lower_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) mode_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) upper_adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) adj_matrix_1 <- make_adj_matrix_w_tfns(   lower_adj_matrix_1, mode_adj_matrix_1, upper_adj_matrix_1 ) lower_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) mode_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.7, 0) ) upper_adj_matrix_2 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(1, 0) ) adj_matrix_2 <- make_adj_matrix_w_tfns(   lower_adj_matrix_2, mode_adj_matrix_2, upper_adj_matrix_2 ) lower_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.2, 0) ) mode_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) upper_adj_matrix_3 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) adj_matrix_3 <- make_adj_matrix_w_tfns(   lower_adj_matrix_3, mode_adj_matrix_3, upper_adj_matrix_3 ) lower_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.0, 0) ) mode_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0, 0) ) upper_adj_matrix_4 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) adj_matrix_4 <- make_adj_matrix_w_tfns(   lower_adj_matrix_4, mode_adj_matrix_4, upper_adj_matrix_4 )  fcms_w_tfns <- list(adj_matrix_1, adj_matrix_2, adj_matrix_3, adj_matrix_4)  mc_fcms <- build_monte_carlo_fcms_from_fuzzy_set_adj_matrices(   fcms_w_tfns, \"tfn\", 1000, include_zeroes = FALSE ) #> [1] Sampling from column vectors #> Sampling from column vectors[1] Constructing monte carlo fcms from samples #> Constructing monte carlo fcms from samples mc_fcms_inferences <- infer_fcm_set(   adj_matrices = mc_fcms,   initial_state_vector <- c(1, 1),   clamping_vector <- c(1, 0),   activation = \"kosko\",   squashing = \"sigmoid\",   lambda = 1,   point_of_inference = \"final\",   max_iter = 100,   min_error = 1e-5,   parallel = FALSE,   show_progress = TRUE ) #>  #> [1] Running Simulations"},{"path":"/reference/infer_ivfn_or_tfn_fcm.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer (IVFN or TFN) FCM — infer_ivfn_or_tfn_fcm","title":"Infer (IVFN or TFN) FCM — infer_ivfn_or_tfn_fcm","text":"compares baseline simulation fcm input scenario (scenario vector) estimate outputs change compared structural expected behavior system.","code":""},{"path":"/reference/infer_ivfn_or_tfn_fcm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer (IVFN or TFN) FCM — infer_ivfn_or_tfn_fcm","text":"","code":"infer_ivfn_or_tfn_fcm(   adj_matrix = matrix(),   initial_state_vector = c(),   clamping_vector = c(),   activation = c(\"kosko\", \"modified-kosko\", \"rescale\"),   squashing = c(\"sigmoid\", \"tanh\"),   lambda = 1,   point_of_inference = c(\"peak\", \"final\"),   max_iter = 100,   min_error = 1e-05 )"},{"path":"/reference/infer_ivfn_or_tfn_fcm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer (IVFN or TFN) FCM — infer_ivfn_or_tfn_fcm","text":"adj_matrix n x n adjacency matrix represents FCM initial_state_vector list state values start fcm simulation clamping_vector list values representing specific actions taken control behavior FCM. Specifically, non-zero values defined vector remain constant throughout entire simulation \"clamped\" values. activation activation function applied. Must one following: 'kosko', 'modified-kosko', 'rescale'. squashing squashing function apply. Must one following: 'bivalent', 'saturation', 'trivalent', 'tanh', 'sigmoid'. lambda numeric value defines steepness slope squashing function tanh sigmoid applied point_of_inference point along simulation time-series identified inference. Must one following: 'peak' 'final' max_iter maximum number iterations run minimum error value achieved min_error lowest error (sum absolute value current state vector minus previous state vector) iterations necessary simulation stop","code":""},{"path":"/reference/infer_ivfn_or_tfn_fcm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer (IVFN or TFN) FCM — infer_ivfn_or_tfn_fcm","text":"list (ivfn tfn) fcm inference results (including baseline simulation outputs)","code":""},{"path":"/reference/infer_ivfn_or_tfn_fcm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Infer (IVFN or TFN) FCM — infer_ivfn_or_tfn_fcm","text":"function performs two fcm simulations compares output two. first simulation considers baseline activity nodes \"clamped\" system behaves without outside inputs. second simulation considers scenario one multiple nodes \"clamped\" system reactive additional inputs. function returns difference simulation results scenario baseline activity understand system manipulations compare structural expectations system. function produces output mental modeler following inputs:  - initial_state_vector = c(1, 1, ..., 1)  - activation = \"kosko\"  - squashing = either \"sigmoid\" \"tanh\"  - lambda = 1","code":""},{"path":"/reference/infer_ivfn_or_tfn_fcm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infer (IVFN or TFN) FCM — infer_ivfn_or_tfn_fcm","text":"","code":"# Inference w/ Interval-Valued Fuzzy Numbers (IVFNs) lower_adj_matrix <- data.frame(   C1 = c(0, 0, 0, 0, 0, 0),   C2 = c(-0.85, 0, 0, 0.35, 0, 0),   C3 = c(0, 0, 0, 0, 0, 0),   C4 = c(-0.7, 0.6, -1, 0, -1, 0),   C5 = c(0.1, 0, 0, -0.8, 0, 0),   C6 = c(0, -0.95, 0, 0, -0.95, 0) ) upper_adj_matrix <- data.frame(   C1 = c(0, 0, 0, 0, 0, 0),   C2 = c(-0.2, 0, 0, 0.9, 0, 0),   C3 = c(0, 0, 0, 0, 0, 0),   C4 = c(-0.3, 0.9, -0.5, 0, -0.5, 0),   C5 = c(0.5, 0, 0, -0.3, 0, 0),   C6 = c(0, -0.4, 0, 0, -0.5, 0) ) adj_matrix <- make_adj_matrix_w_ivfns(lower_adj_matrix, upper_adj_matrix)  infer_fcm(adj_matrix,           initial_state_vector = c(1, 1, 1, 1, 1, 1),           clamping_vector = c(1, 0, 0, 0, 0, 0),           activation = \"kosko\",           squashing = \"sigmoid\",           lambda = 1,           point_of_inference = \"final\") #> infer_fcm: ivfn  #>  $inferences_df #>    : [1, 1] (1) #>    : [-0.23, 0.09] (-0.23) #>    : [0, 0] (0) #>    : [-0.26, 0.13] (-0.26) #>    : [-0.07, 0.16] (-0.07) #>    : [-0.1, 0.11] (-0.1) #>  $inferences_for_plotting #>    - inference data transformed to streamline plotting with ggplot  #>  $inference_state_vectors #>    - inferences as fuzzy sets across all iterations of the simulation  #>  $scenario_simulation #>  $baseline_simulation   # Inference w/ Triangular Fuzzy Numbers (TFNs) lower_adj_matrix <- data.frame(   C1 = c(0, 0, 0, 0, 0, 0),   C2 = c(-0.85, 0, 0, 0.35, 0, 0),   C3 = c(0, 0, 0, 0, 0, 0),   C4 = c(-0.7, 0.6, -1, 0, -1, 0),   C5 = c(0.1, 0, 0, -0.8, 0, 0),   C6 = c(0, -0.95, 0, 0, -0.95, 0) ) mode_adj_matrix <- data.frame(   C1 = c(0, 0, 0, 0, 0, 0),   C2 = c(-0.5, 0, 0, 0.6, 0, 0),   C3 = c(0, 0, 0, 0, 0, 0),   C4 = c(-0.5, 0.7, -0.8, 0, -0.8, 0),   C5 = c(0.2, 0, 0, -0.6, 0, 0),   C6 = c(0, -0.7, 0, 0, -0.6, 0) ) upper_adj_matrix <- data.frame(   C1 = c(0, 0, 0, 0, 0, 0),   C2 = c(-0.2, 0, 0, 0.9, 0, 0),   C3 = c(0, 0, 0, 0, 0, 0),   C4 = c(-0.3, 0.9, -0.5, 0, -0.5, 0),   C5 = c(0.5, 0, 0, -0.3, 0, 0),   C6 = c(0, -0.4, 0, 0, -0.5, 0) ) adj_matrix <- make_adj_matrix_w_tfns(   lower_adj_matrix, mode_adj_matrix, upper_adj_matrix )  infer_fcm(adj_matrix,           initial_state_vector = c(1, 1, 1, 1, 1, 1),           clamping_vector = c(1, 0, 0, 0, 0, 0),           activation = \"kosko\",           squashing = \"sigmoid\",           lambda = 1,           point_of_inference = \"final\") #> infer_fcm: tfn  #>  $inferences_df #>    C1: [1, 1, 1] (1) #>    C2: [-0.23, -0.07, 0.09] (-0.23) #>    C3: [0, 0, 0] (0) #>    C4: [-0.26, -0.07, 0.13] (-0.26) #>    C5: [-0.07, 0.04, 0.16] (-0.07) #>    C6: [-0.1, 0.01, 0.11] (-0.1) #>  $inferences_for_plotting #>    - inference data transformed to streamline plotting with ggplot  #>  $inference_state_vectors #>    - inferences as fuzzy sets across all iterations of the simulation  #>  $scenario_simulation #>  $baseline_simulation"},{"path":"/reference/interactive_plot_fcmconfr.html","id":null,"dir":"Reference","previous_headings":"","what":"(Interactive) Plot fcmconfr — interactive_plot_fcmconfr","title":"(Interactive) Plot fcmconfr — interactive_plot_fcmconfr","text":"Load plot fcmconfr output interactive shiny window","code":""},{"path":"/reference/interactive_plot_fcmconfr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Interactive) Plot fcmconfr — interactive_plot_fcmconfr","text":"","code":"interactive_plot_fcmconfr(x, ...)"},{"path":"/reference/interactive_plot_fcmconfr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Interactive) Plot fcmconfr — interactive_plot_fcmconfr","text":"x direct output fcmconfr function ... Additional inputs: - filter_limit Remove concepts whose inferences exceed value - coord_flip Swap x- y-axes (.e. rotate plot)","code":""},{"path":"/reference/interactive_plot_fcmconfr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Interactive) Plot fcmconfr — interactive_plot_fcmconfr","text":"shiny window displaying plot fcmconfr object's results","code":""},{"path":"/reference/interactive_plot_fcmconfr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Interactive) Plot fcmconfr — interactive_plot_fcmconfr","text":"","code":"NULL #> NULL"},{"path":"/reference/ivfn.html","id":null,"dir":"Reference","previous_headings":"","what":"Interval-Valued Fuzzy Number (IVFN) - S3 Class — ivfn","title":"Interval-Valued Fuzzy Number (IVFN) - S3 Class — ivfn","text":"constructs interval-valued fuzzy number (ivfn) represents continuous, uniform distribution values within given range","code":""},{"path":"/reference/ivfn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interval-Valued Fuzzy Number (IVFN) - S3 Class — ivfn","text":"","code":"ivfn(lower = double(), upper = double())"},{"path":"/reference/ivfn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interval-Valued Fuzzy Number (IVFN) - S3 Class — ivfn","text":"lower n x n adjacency matrix represents lower limits edges FCM upper n x n adjacency matrix represents upper limits edges FCM","code":""},{"path":"/reference/ivfn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interval-Valued Fuzzy Number (IVFN) - S3 Class — ivfn","text":"interval-valued fuzzy number (IVFN)","code":""},{"path":"/reference/ivfn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interval-Valued Fuzzy Number (IVFN) - S3 Class — ivfn","text":"IVFN class perform operations input, rather checks whether input follows defining criteria IVFNs IVFNs, lower bound must less equal upper bound. lower bound upper bound equal, IVFN represents \"crisp\" numeric value.","code":""},{"path":[]},{"path":"/reference/ivfn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interval-Valued Fuzzy Number (IVFN) - S3 Class — ivfn","text":"","code":"ivfn(lower = 0, upper = 1) #> ivfn: [0, 1] ivfn(-1, 1) #> ivfn: [-1, 1]"},{"path":"/reference/make_adj_matrix_w_ivfns.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Adj. Matrix w/ Edges Represented as IVFNs — make_adj_matrix_w_ivfns","title":"Create Adj. Matrix w/ Edges Represented as IVFNs — make_adj_matrix_w_ivfns","text":"constructs adjacency matrix edges represented interval-value fuzzy numbers (IVFNs) adjacency matrix lower bounds adjacency matrix upper bounds","code":""},{"path":"/reference/make_adj_matrix_w_ivfns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Adj. Matrix w/ Edges Represented as IVFNs — make_adj_matrix_w_ivfns","text":"","code":"make_adj_matrix_w_ivfns(lower = matrix(), upper = matrix())"},{"path":"/reference/make_adj_matrix_w_ivfns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Adj. Matrix w/ Edges Represented as IVFNs — make_adj_matrix_w_ivfns","text":"lower n x n adjacency matrix represents lower limits edges FCM upper n x n adjacency matrix represents upper limits edges FCM","code":""},{"path":"/reference/make_adj_matrix_w_ivfns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Adj. Matrix w/ Edges Represented as IVFNs — make_adj_matrix_w_ivfns","text":"adj. matrix (class 'ivfn') edges represented IVFNs","code":""},{"path":"/reference/make_adj_matrix_w_ivfns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Adj. Matrix w/ Edges Represented as IVFNs — make_adj_matrix_w_ivfns","text":"input adjacency matrices must square n x n matrices dimensions. input can either matrix, data.table, tibble, data.table type objects, output always data.frame. output readability. data.table tibble objects work logically, outputs require additional steps parse user's perspective. input matrices named columns, names carried grey adjacency matrix. Otherwise, generic node IDs used (C1, C2, ... Cn).","code":""},{"path":[]},{"path":"/reference/make_adj_matrix_w_ivfns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Adj. Matrix w/ Edges Represented as IVFNs — make_adj_matrix_w_ivfns","text":"","code":"make_adj_matrix_w_ivfns(   lower = matrix(data = c(0, 0.2, 0, 0.5), nrow = 2, ncol = 2),   upper = matrix(data = c(0, 0.4, 0, 0.7), nrow = 2, ncol = 2) ) #>          C1       C2 #> C1     0, 0     0, 0 #> C2 0.2, 0.4 0.5, 0.7  lower_adj_matrix <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) upper_adj_matrix <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) make_adj_matrix_w_ivfns(lower_adj_matrix, upper_adj_matrix) #>      A        B #> A 0, 0 0.4, 0.6 #> B 0, 0     0, 0"},{"path":"/reference/make_adj_matrix_w_tfns.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Adj. Matrix w/ Edges Represented as TFNs — make_adj_matrix_w_tfns","title":"Create Adj. Matrix w/ Edges Represented as TFNs — make_adj_matrix_w_tfns","text":"constructs adjacency matrix edges represented triangular fuzzy numbers (TFNs) adjacency matrix lower bounds, adjacency matrix modes, adjacency matrix upper bounds","code":""},{"path":"/reference/make_adj_matrix_w_tfns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Adj. Matrix w/ Edges Represented as TFNs — make_adj_matrix_w_tfns","text":"","code":"make_adj_matrix_w_tfns(lower = matrix(), mode = matrix(), upper = matrix())"},{"path":"/reference/make_adj_matrix_w_tfns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Adj. Matrix w/ Edges Represented as TFNs — make_adj_matrix_w_tfns","text":"lower n x n adjacency matrix represents lower limits edges FCM mode n x n adjacency matrix represents modes edges FCM upper n x n adjacency matrix represents upper limits edges FCM","code":""},{"path":"/reference/make_adj_matrix_w_tfns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Adj. Matrix w/ Edges Represented as TFNs — make_adj_matrix_w_tfns","text":"adj. matrix (class 'tfn') edges represented TFNs","code":""},{"path":"/reference/make_adj_matrix_w_tfns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Adj. Matrix w/ Edges Represented as TFNs — make_adj_matrix_w_tfns","text":"input adjacency matrices must square n x n matrices dimensions. input can either matrix, data.table, tibble, data.table type objects, output always data.frame. output readability. data.table tibble objects work logically, outputs require additional steps parse user's perspective. input matrices named columns, names carried triangular adjacency matrix. Otherwise, generic node IDs used (C1, C2, ... Cn).","code":""},{"path":[]},{"path":"/reference/make_adj_matrix_w_tfns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Adj. Matrix w/ Edges Represented as TFNs — make_adj_matrix_w_tfns","text":"","code":"make_adj_matrix_w_tfns(   lower = matrix(data = c(0, 0.2, 0, 0.5), nrow = 2, ncol = 2),   mode = matrix(data = c(0, 0.3, 0, 0.6), nrow = 2, ncol = 2),   upper = matrix(data = c(0, 0.4, 0, 0.7), nrow = 2, ncol = 2) ) #>               C1            C2 #> C1       0, 0, 0       0, 0, 0 #> C2 0.2, 0.3, 0.4 0.5, 0.6, 0.7  lower_adj_matrix <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) mode_adj_matrix <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.4, 0) ) upper_adj_matrix <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(0.6, 0) ) make_adj_matrix_w_tfns(lower_adj_matrix, mode_adj_matrix, upper_adj_matrix) #>         A             B #> A 0, 0, 0 0.4, 0.4, 0.6 #> B 0, 0, 0       0, 0, 0"},{"path":"/reference/organize_fcmconfr_output.html","id":null,"dir":"Reference","previous_headings":"","what":"[INTENDED FOR DEVELOPER USE ONLY] Organize fcmconfr Output — organize_fcmconfr_output","title":"[INTENDED FOR DEVELOPER USE ONLY] Organize fcmconfr Output — organize_fcmconfr_output","text":"arranges fcmconfr inputs outputs neatly-arranged list lists, critically, neatly-arranged data structures clean code written fcmconfr function.","code":""},{"path":"/reference/organize_fcmconfr_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[INTENDED FOR DEVELOPER USE ONLY] Organize fcmconfr Output — organize_fcmconfr_output","text":"","code":"organize_fcmconfr_output(...)"},{"path":"/reference/organize_fcmconfr_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[INTENDED FOR DEVELOPER USE ONLY] Organize fcmconfr Output — organize_fcmconfr_output","text":"... additional inputs; typically environmental variables","code":""},{"path":"/reference/organize_fcmconfr_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[INTENDED FOR DEVELOPER USE ONLY] Organize fcmconfr Output — organize_fcmconfr_output","text":"organzed list output fcmconfr","code":""},{"path":"/reference/organize_fcmconfr_output.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[INTENDED FOR DEVELOPER USE ONLY] Organize fcmconfr Output — organize_fcmconfr_output","text":"[INTENDED DEVELOPER USE ]","code":""},{"path":"/reference/organize_fcmconfr_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[INTENDED FOR DEVELOPER USE ONLY] Organize fcmconfr Output — organize_fcmconfr_output","text":"","code":"NULL #> NULL"},{"path":"/reference/plot.fcmconfr.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot fcmconfr — plot.fcmconfr","title":"Plot fcmconfr — plot.fcmconfr","text":"Print output autoplot function (autoplot.fcmconfr)","code":""},{"path":"/reference/plot.fcmconfr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot fcmconfr — plot.fcmconfr","text":"","code":"# S3 method for class 'fcmconfr' plot(x, ...)"},{"path":"/reference/plot.fcmconfr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot fcmconfr — plot.fcmconfr","text":"x direct output fcmconfr function ... Additional inputs: - interactive Open plot interactive shiny app # Plot Formatting Parameters - filter_limit Remove concepts whose inferences exceed value - coord_flip Swap x- y-axes (.e. rotate plot) - text_font_size (Mainly shiny use, .e. leave blank) Set text font size # Plot Aesthetic Parameters (defaults) - mc_avg_and_CIs_color = \"blue\" - mc_inferences_color = \"blue\" - mc_inferences_shape = 3 - ind_inferences_color = \"black\" - ind_inferences_shape = 16 - agg_inferences_color = \"red\" - agg_inferences_shape = 17 - ind_ivfn_and_tfn_linewidth = 0.1 - agg_ivfn_and_tfn_linewidth = 0.6","code":""},{"path":"/reference/plot.fcmconfr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot fcmconfr — plot.fcmconfr","text":"plot fcmconfr object's results","code":""},{"path":"/reference/plot.fcmconfr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot fcmconfr — plot.fcmconfr","text":"","code":"# Example using TFN FCMs fcmconfr tfn_example_fcmconfr <- fcmconfr(   adj_matrices = sample_fcms$simple_fcms$tfn_fcms,   # adj_matrices = group_tfn_fcms,   # Aggregation and Monte Carlo Sampling   aggregation_function = 'mean',   monte_carlo_sampling_draws = 100,   # Simulation   initial_state_vector = c(1, 1, 1, 1, 1, 1, 1),   clamping_vector = c(1, 0, 0, 0, 0, 0, 0),   activation = 'rescale',   squashing = 'sigmoid',   lambda = 1,   point_of_inference = \"final\",   max_iter = 1000,   min_error = 1e-05,   # Inference Estimation (bootstrap)   inference_estimation_function = mean,   inference_estimation_CI = 0.95,   inference_estimation_bootstrap_reps = 1000,   # Runtime Options   show_progress = TRUE,   parallel = TRUE,   n_cores = 2,   # Additional Options   perform_aggregate_analysis = TRUE,   perform_monte_carlo_analysis = TRUE,   perform_monte_carlo_inference_bootstrap_analysis = TRUE,   include_zero_weighted_edges_in_aggregation_and_mc_sampling = TRUE,   include_monte_carlo_FCM_simulations_in_output = TRUE ) #> [1] Simulating Input FCMs #> [1] Initializing cluster #> [1] Running Simulations in Parallel #> [1] Sampling from column vectors #> Sampling from column vectors[1] Constructing monte carlo fcms from samples #> Constructing monte carlo fcms from samples[1] Initializing cluster #> [1] Running Simulations in Parallel #> [1] Performing bootstrap simulations #> [1] Initializing cluster #> [1] Sampling means #>    |                                                           |                                                  |   1%   |                                                           |=                                                 |   1%   |                                                           |=                                                 |   2%   |                                                           |=                                                 |   3%   |                                                           |==                                                |   3%   |                                                           |==                                                |   4%   |                                                           |==                                                |   5%   |                                                           |===                                               |   5%   |                                                           |===                                               |   6%   |                                                           |===                                               |   7%   |                                                           |====                                              |   7%   |                                                           |====                                              |   8%   |                                                           |====                                              |   9%   |                                                           |=====                                             |   9%   |                                                           |=====                                             |  10%   |                                                           |=====                                             |  11%   |                                                           |======                                            |  11%   |                                                           |======                                            |  12%   |                                                           |======                                            |  13%   |                                                           |=======                                           |  13%   |                                                           |=======                                           |  14%   |                                                           |=======                                           |  15%   |                                                           |========                                          |  15%   |                                                           |========                                          |  16%   |                                                           |========                                          |  17%   |                                                           |=========                                         |  17%   |                                                           |=========                                         |  18%   |                                                           |=========                                         |  19%   |                                                           |==========                                        |  19%   |                                                           |==========                                        |  20%   |                                                           |==========                                        |  21%   |                                                           |===========                                       |  21%   |                                                           |===========                                       |  22%   |                                                           |===========                                       |  23%   |                                                           |============                                      |  23%   |                                                           |============                                      |  24%   |                                                           |============                                      |  25%   |                                                           |=============                                     |  25%   |                                                           |=============                                     |  26%   |                                                           |=============                                     |  27%   |                                                           |==============                                    |  27%   |                                                           |==============                                    |  28%   |                                                           |==============                                    |  29%   |                                                           |===============                                   |  29%   |                                                           |===============                                   |  30%   |                                                           |===============                                   |  31%   |                                                           |================                                  |  31%   |                                                           |================                                  |  32%   |                                                           |================                                  |  33%   |                                                           |=================                                 |  33%   |                                                           |=================                                 |  34%   |                                                           |=================                                 |  35%   |                                                           |==================                                |  35%   |                                                           |==================                                |  36%   |                                                           |==================                                |  37%   |                                                           |===================                               |  37%   |                                                           |===================                               |  38%   |                                                           |===================                               |  39%   |                                                           |====================                              |  39%   |                                                           |====================                              |  40%   |                                                           |====================                              |  41%   |                                                           |=====================                             |  41%   |                                                           |=====================                             |  42%   |                                                           |=====================                             |  43%   |                                                           |======================                            |  43%   |                                                           |======================                            |  44%   |                                                           |======================                            |  45%   |                                                           |=======================                           |  45%   |                                                           |=======================                           |  46%   |                                                           |=======================                           |  47%   |                                                           |========================                          |  47%   |                                                           |========================                          |  48%   |                                                           |========================                          |  49%   |                                                           |=========================                         |  49%   |                                                           |=========================                         |  50%   |                                                           |=========================                         |  51%   |                                                           |==========================                        |  51%   |                                                           |==========================                        |  52%   |                                                           |==========================                        |  53%   |                                                           |===========================                       |  53%   |                                                           |===========================                       |  54%   |                                                           |===========================                       |  55%   |                                                           |============================                      |  55%   |                                                           |============================                      |  56%   |                                                           |============================                      |  57%   |                                                           |=============================                     |  57%   |                                                           |=============================                     |  58%   |                                                           |=============================                     |  59%   |                                                           |==============================                    |  59%   |                                                           |==============================                    |  60%   |                                                           |==============================                    |  61%   |                                                           |===============================                   |  61%   |                                                           |===============================                   |  62%   |                                                           |===============================                   |  63%   |                                                           |================================                  |  63%   |                                                           |================================                  |  64%   |                                                           |================================                  |  65%   |                                                           |=================================                 |  65%   |                                                           |=================================                 |  66%   |                                                           |=================================                 |  67%   |                                                           |==================================                |  67%   |                                                           |==================================                |  68%   |                                                           |==================================                |  69%   |                                                           |===================================               |  69%   |                                                           |===================================               |  70%   |                                                           |===================================               |  71%   |                                                           |====================================              |  71%   |                                                           |====================================              |  72%   |                                                           |====================================              |  73%   |                                                           |=====================================             |  73%   |                                                           |=====================================             |  74%   |                                                           |=====================================             |  75%   |                                                           |======================================            |  75%   |                                                           |======================================            |  76%   |                                                           |======================================            |  77%   |                                                           |=======================================           |  77%   |                                                           |=======================================           |  78%   |                                                           |=======================================           |  79%   |                                                           |========================================          |  79%   |                                                           |========================================          |  80%   |                                                           |========================================          |  81%   |                                                           |=========================================         |  81%   |                                                           |=========================================         |  82%   |                                                           |=========================================         |  83%   |                                                           |==========================================        |  83%   |                                                           |==========================================        |  84%   |                                                           |==========================================        |  85%   |                                                           |===========================================       |  85%   |                                                           |===========================================       |  86%   |                                                           |===========================================       |  87%   |                                                           |============================================      |  87%   |                                                           |============================================      |  88%   |                                                           |============================================      |  89%   |                                                           |=============================================     |  89%   |                                                           |=============================================     |  90%   |                                                           |=============================================     |  91%   |                                                           |==============================================    |  91%   |                                                           |==============================================    |  92%   |                                                           |==============================================    |  93%   |                                                           |===============================================   |  93%   |                                                           |===============================================   |  94%   |                                                           |===============================================   |  95%   |                                                           |================================================  |  95%   |                                                           |================================================  |  96%   |                                                           |================================================  |  97%   |                                                           |================================================= |  97%   |                                                           |================================================= |  98%   |                                                           |================================================= |  99%   |                                                           |==================================================|  99%   |                                                           |==================================================| 100% #> [1] Done   # Plot Defaults plot(tfn_example_fcmconfr,      interactive = FALSE, # Set to TRUE to open shiny app      # Plot Formatting Parameters      filter_limit = 1e-4,      coord_flip = FALSE,      # Plot Aesthetic Parameters      mc_avg_and_CIs_color = \"blue\",      mc_inferences_color = \"blue\",      mc_inferences_shape = 3,      ind_inferences_color = \"black\",      ind_inferences_shape = 16,      agg_inferences_color = \"red\",      agg_inferences_shape = 17,      ind_ivfn_and_tfn_linewidth = 0.1,      agg_ivfn_and_tfn_linewidth = 0.6 )   # Changed from Plot Defaults plot(tfn_example_fcmconfr,      interactive = FALSE, # Set to TRUE to open shiny app      # Plot Formatting Parameters      filter_limit = 1e-4,      coord_flip = FALSE,      # Plot Aesthetic Parameters      mc_avg_and_CIs_color = \"blue\",      mc_inferences_color = \"blue\",      mc_inferences_shape = 3,      ind_inferences_color = \"black\",      ind_inferences_shape = 16,      agg_inferences_color = \"red\",      agg_inferences_shape = 17,      ind_ivfn_and_tfn_linewidth = 0.1,      agg_ivfn_and_tfn_linewidth = 0.6 )    # Plot Defaults w/ Shiny App # plot(tfn_example_fcmconfr, #      interactive = TRUE, # Set to TRUE to open shiny app #      # Plot Formatting Parameters #      filter_limit = 1e-4, #      coord_flip = FALSE, #      text_font_size = 12, #      # Plot Aesthetic Parameters #      mc_avg_and_CIs_color = \"blue\", #      mc_inferences_color = \"blue\", #      mc_inferences_shape = 3, #      ind_inferences_color = \"black\", #      ind_inferences_shape = 16, #      agg_inferences_color = \"red\", #      agg_inferences_shape = 17, #      ind_ivfn_and_tfn_linewidth = 0.1, #      agg_ivfn_and_tfn_linewidth = 0.6 # )"},{"path":"/reference/plot.rtriangular_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"plot.rtriangular_dist — plot.rtriangular_dist","title":"plot.rtriangular_dist — plot.rtriangular_dist","text":"Plot rtriangular_dist distribution similar runif plotted base plot function","code":""},{"path":"/reference/plot.rtriangular_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot.rtriangular_dist — plot.rtriangular_dist","text":"","code":"# S3 method for class 'rtriangular_dist' plot(x, ...)"},{"path":"/reference/plot.rtriangular_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot.rtriangular_dist — plot.rtriangular_dist","text":"x rtriangular_dist object ... additional inputs (leave empty)","code":""},{"path":"/reference/plot.rtriangular_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot.rtriangular_dist — plot.rtriangular_dist","text":"plot triangular distribution generated rtriangular_dist (vain plot(runif))","code":""},{"path":"/reference/plot.rtriangular_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot.rtriangular_dist — plot.rtriangular_dist","text":"","code":"plot(rtriangular_dist(1000, -1, 0, 1))"},{"path":"/reference/print.aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for aggregate — print.aggregate","title":"Print method for aggregate — print.aggregate","text":"Print method aggregate","code":""},{"path":"/reference/print.aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for aggregate — print.aggregate","text":"","code":"# S3 method for class 'aggregate' print(x, ...)"},{"path":"/reference/print.aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for aggregate — print.aggregate","text":"x aggregate object ... additional inputs","code":""},{"path":"/reference/print.aggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for aggregate — print.aggregate","text":"console printout aggregate_fcm output","code":""},{"path":[]},{"path":"/reference/print.aggregate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for aggregate — print.aggregate","text":"","code":"NULL #> NULL"},{"path":"/reference/print.fcmconfr.html","id":null,"dir":"Reference","previous_headings":"","what":"print.fcmconfr — print.fcmconfr","title":"print.fcmconfr — print.fcmconfr","text":"improves readability fcmconfr output","code":""},{"path":"/reference/print.fcmconfr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print.fcmconfr — print.fcmconfr","text":"","code":"# S3 method for class 'fcmconfr' print(x, ...)"},{"path":"/reference/print.fcmconfr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print.fcmconfr — print.fcmconfr","text":"x fcmconfr object ... additional inputs","code":""},{"path":"/reference/print.fcmconfr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print.fcmconfr — print.fcmconfr","text":"console printout fcmconfr results","code":""},{"path":"/reference/print.fcmconfr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"print.fcmconfr — print.fcmconfr","text":"Show objects listed fcmconfr output $inference $params, well $bootstrap present output. Additionally, prints descriptions/summaries objects within sub-list like inference_opts, bootstrap_input_opts, etc.","code":""},{"path":"/reference/print.fcmconfr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"print.fcmconfr — print.fcmconfr","text":"","code":"NULL #> NULL"},{"path":"/reference/print.fcmconfr_gui_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Print fcmconfr_gui_input — print.fcmconfr_gui_input","title":"Print fcmconfr_gui_input — print.fcmconfr_gui_input","text":"function prints clean, copy--paste-able call fcmconfr inputs selected user shiny app.","code":""},{"path":"/reference/print.fcmconfr_gui_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print fcmconfr_gui_input — print.fcmconfr_gui_input","text":"","code":"# S3 method for class 'fcmconfr_gui_input' print(x, ...)"},{"path":"/reference/print.fcmconfr_gui_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print fcmconfr_gui_input — print.fcmconfr_gui_input","text":"x fcmconfr object ... additional inputs","code":""},{"path":"/reference/print.fcmconfr_gui_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print fcmconfr_gui_input — print.fcmconfr_gui_input","text":"pasteable output console call fcmconfr selected variables","code":""},{"path":"/reference/print.fcmconfr_gui_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print fcmconfr_gui_input — print.fcmconfr_gui_input","text":"","code":"NULL #> NULL"},{"path":"/reference/print.infer_conventional_fcm.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for infer_conventional_fcm objects — print.infer_conventional_fcm","title":"Print method for infer_conventional_fcm objects — print.infer_conventional_fcm","text":"Print method infer_conventional_fcm objects","code":""},{"path":"/reference/print.infer_conventional_fcm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for infer_conventional_fcm objects — print.infer_conventional_fcm","text":"","code":"# S3 method for class 'infer_conventional_fcm' print(x, ...)"},{"path":"/reference/print.infer_conventional_fcm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for infer_conventional_fcm objects — print.infer_conventional_fcm","text":"x infer_conventional_fcm object ... additional inputs","code":""},{"path":"/reference/print.infer_conventional_fcm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for infer_conventional_fcm objects — print.infer_conventional_fcm","text":"console printout infer_conventional_fcm results","code":""},{"path":"/reference/print.infer_conventional_fcm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for infer_conventional_fcm objects — print.infer_conventional_fcm","text":"","code":"NULL #> NULL"},{"path":"/reference/print.infer_ivfn_or_tfn_fcm.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for infer_ivfn_or_tfn_fcm objects — print.infer_ivfn_or_tfn_fcm","title":"Print method for infer_ivfn_or_tfn_fcm objects — print.infer_ivfn_or_tfn_fcm","text":"Print method infer_ivfn_or_tfn_fcm objects","code":""},{"path":"/reference/print.infer_ivfn_or_tfn_fcm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for infer_ivfn_or_tfn_fcm objects — print.infer_ivfn_or_tfn_fcm","text":"","code":"# S3 method for class 'infer_ivfn_or_tfn_fcm' print(x, ...)"},{"path":"/reference/print.infer_ivfn_or_tfn_fcm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for infer_ivfn_or_tfn_fcm objects — print.infer_ivfn_or_tfn_fcm","text":"x infer_ivfn_or_tfn_fcm object ... additional inputs","code":""},{"path":"/reference/print.infer_ivfn_or_tfn_fcm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for infer_ivfn_or_tfn_fcm objects — print.infer_ivfn_or_tfn_fcm","text":"console printout infer_ivfn_or_tfn_fcm results","code":""},{"path":"/reference/print.infer_ivfn_or_tfn_fcm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for infer_ivfn_or_tfn_fcm objects — print.infer_ivfn_or_tfn_fcm","text":"","code":"NULL #> NULL"},{"path":"/reference/print.ivfn.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an Interval-Valued Fuzzy Number (IVFN) - S3 Class — print.ivfn","title":"Print an Interval-Valued Fuzzy Number (IVFN) - S3 Class — print.ivfn","text":"prints ivfn object","code":""},{"path":"/reference/print.ivfn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an Interval-Valued Fuzzy Number (IVFN) - S3 Class — print.ivfn","text":"","code":"# S3 method for class 'ivfn' print(x, ...)"},{"path":"/reference/print.ivfn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an Interval-Valued Fuzzy Number (IVFN) - S3 Class — print.ivfn","text":"x ivfn object ... additional inputs","code":""},{"path":"/reference/print.ivfn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print an Interval-Valued Fuzzy Number (IVFN) - S3 Class — print.ivfn","text":"console printout IVFN object","code":""},{"path":[]},{"path":"/reference/print.ivfn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print an Interval-Valued Fuzzy Number (IVFN) - S3 Class — print.ivfn","text":"","code":"print(ivfn(-1, 1)) #> ivfn: [-1, 1]"},{"path":"/reference/print.tfn.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a Triangular Fuzzy Number (TFN) — print.tfn","title":"Print a Triangular Fuzzy Number (TFN) — print.tfn","text":"improves readability output prints tfn object","code":""},{"path":"/reference/print.tfn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a Triangular Fuzzy Number (TFN) — print.tfn","text":"","code":"# S3 method for class 'tfn' print(x, ...)"},{"path":"/reference/print.tfn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a Triangular Fuzzy Number (TFN) — print.tfn","text":"x tfn object ... additional inputs","code":""},{"path":"/reference/print.tfn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a Triangular Fuzzy Number (TFN) — print.tfn","text":"console printout TFN object","code":""},{"path":[]},{"path":"/reference/print.tfn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a Triangular Fuzzy Number (TFN) — print.tfn","text":"","code":"tfn(-1, 0, 1) #> tfn: [-1, 0, 1]"},{"path":"/reference/rtriangular_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"The Triangular Distribution — rtriangular_dist","title":"The Triangular Distribution — rtriangular_dist","text":"function generates triangular distribution interval lower upper bounds given mode,","code":""},{"path":"/reference/rtriangular_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Triangular Distribution — rtriangular_dist","text":"","code":"rtriangular_dist(   n = integer(),   lower = double(),   mode = double(),   upper = double() )"},{"path":"/reference/rtriangular_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Triangular Distribution — rtriangular_dist","text":"n number samples draw triangular distribution lower lower limit minimum sample space mode peak sample space upper upper limit maximum sample space","code":""},{"path":"/reference/rtriangular_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Triangular Distribution — rtriangular_dist","text":"set c() values representing triangular distribution","code":""},{"path":"/reference/rtriangular_dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Triangular Distribution — rtriangular_dist","text":"Additional details...","code":""},{"path":"/reference/rtriangular_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Triangular Distribution — rtriangular_dist","text":"","code":"rtriangular_dist(100, -1, 0, 1) #>   [1] -0.85857864 -0.80000000 -0.75505103 -0.71715729 -0.68377223 -0.65358984 #>   [7] -0.62583426 -0.60000000 -0.57573593 -0.55278640 -0.53095842 -0.51010205 #>  [13] -0.49009805 -0.47084974 -0.45227744 -0.43431458 -0.41690481 -0.40000000 #>  [19] -0.38355860 -0.36754447 -0.35192593 -0.33667504 -0.32176700 -0.30717968 #>  [25] -0.29289322 -0.27888974 -0.26515308 -0.25166852 -0.23842269 -0.22540333 #>  [31] -0.21259921 -0.20000000 -0.18759616 -0.17537887 -0.16333997 -0.15147186 #>  [37] -0.13976747 -0.12822021 -0.11682391 -0.10557281 -0.09446149 -0.08348486 #>  [43] -0.07263815 -0.06191685 -0.05131670 -0.04083370 -0.03046403 -0.02020410 #>  [49] -0.01005051  0.00000000  0.01005051  0.02020410  0.03046403  0.04083370 #>  [55]  0.05131670  0.06191685  0.07263815  0.08348486  0.09446149  0.10557281 #>  [61]  0.11682391  0.12822021  0.13976747  0.15147186  0.16333997  0.17537887 #>  [67]  0.18759616  0.20000000  0.21259921  0.22540333  0.23842269  0.25166852 #>  [73]  0.26515308  0.27888974  0.29289322  0.30717968  0.32176700  0.33667504 #>  [79]  0.35192593  0.36754447  0.38355860  0.40000000  0.41690481  0.43431458 #>  [85]  0.45227744  0.47084974  0.49009805  0.51010205  0.53095842  0.55278640 #>  [91]  0.57573593  0.60000000  0.62583426  0.65358984  0.68377223  0.71715729 #>  [97]  0.75505103  0.80000000  0.85857864  1.00000000 #> attr(,\".label\") #> [1] \"rtriangular_dist(100, -1, 0, 1)\" #> attr(,\"class\") #> [1] \"rtriangular_dist\"  x <- rtriangular_dist(n = 1000, lower = -0.5, mode = 0, upper = 0.5) hist(x)   x <- rtriangular_dist(100, 0, 0, 0.5) hist(x)"},{"path":"/reference/sample_fcms.html","id":null,"dir":"Reference","previous_headings":"","what":"sample_fcms — sample_fcms","title":"sample_fcms — sample_fcms","text":"collection FCM datasets based stakeholder perceptions rising salinization local reservoir socio-ecological system. collection separated two sub-collections: one larger FCMs incorporate 40 nodes, one smaller, simpler FCMs greatly reduce number nodes (n = 7) per map. sub-collection smaller, simplified FCMs included hasten testing.","code":""},{"path":"/reference/sample_fcms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sample_fcms — sample_fcms","text":"","code":"sample_fcms"},{"path":"/reference/sample_fcms.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"sample_fcms — sample_fcms","text":"## `sample_fcms` collection simple large FCMs conventional, ivfn, tfn edge types","code":""},{"path":"/reference/sample_fcms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"sample_fcms — sample_fcms","text":"$simple_fcms: FCMs filtered versions larger FCMs include following nodes, Guidance.Docs..Salt.Management, Public.Education.Programs, Salts.Added..Water.Treatment, Salts.Added..Winter.Maintenance.Activities, Ecosystem.Health, Public.Awareness..Reservoir.Salinization, Salinization...Reservoir. (Renamd, based nodes larger FCMs)  - $conventional_fcms: list smaller, simplified conventional FCMs  - $ivfn_fcms: list smaller, simplified ivfn FCMs  - $tfn_fcms: list smaller, simplified tfn FCMs $large_fcms: FCMs large (n > 40) likely increase runtimes represent complete dataset  - $conventional_fcms: list large conventional FCMs  - $ivfn_fcms: list large ivfn FCMs  - $tfn_fcms: list large tfn FCMs Given Rippy et al, (Review); stakeholder FCMs used .","code":""},{"path":"/reference/simulate_conventional_fcm.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate (Conventional) FCM — simulate_conventional_fcm","title":"Simulate (Conventional) FCM — simulate_conventional_fcm","text":"simulates conventional fcm based adjacency matrix.","code":""},{"path":"/reference/simulate_conventional_fcm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate (Conventional) FCM — simulate_conventional_fcm","text":"","code":"simulate_conventional_fcm(   adj_matrix = matrix(),   initial_state_vector = c(),   clamping_vector = c(),   activation = c(\"kosko\", \"modified-kosko\", \"rescale\"),   squashing = c(\"sigmoid\", \"tanh\"),   lambda = 1,   point_of_inference = c(\"peak\", \"final\"),   max_iter = 100,   min_error = 1e-05 )"},{"path":"/reference/simulate_conventional_fcm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate (Conventional) FCM — simulate_conventional_fcm","text":"adj_matrix n x n adjacency matrix represents FCM initial_state_vector list state values start fcm simulation clamping_vector list values representing specific actions taken control behavior FCM. Specifically, non-zero values defined vector remain constant throughout entire simulation \"clamped\" values. activation activation function applied. Must one following: 'kosko', 'modified-kosko', 'rescale'. squashing squashing function apply. Must one following: 'bivalent', 'saturation', 'trivalent', 'tanh', 'sigmoid'. lambda numeric value defines steepness slope squashing function tanh sigmoid applied point_of_inference point along simulation time-series identified inference. Must one following: 'peak' 'final' max_iter maximum number iterations run minimum error value achieved min_error lowest error (sum absolute value current state vector minus previous state vector) iterations necessary simulation stop","code":""},{"path":"/reference/simulate_conventional_fcm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate (Conventional) FCM — simulate_conventional_fcm","text":"(Conventional) FCM simulation results","code":""},{"path":"/reference/simulate_conventional_fcm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate (Conventional) FCM — simulate_conventional_fcm","text":"function performs two fcm simulations compares output two. first simulation considers baseline activity nodes \"clamped\" system behaves without outside inputs. second simulation considers scenario one multiple nodes \"clamped\" system reactive additional inputs. function returns difference simulation results scenario baseline activity understand system manipulations compare structural expectations system. function produces output mental modeler following inputs:  - initial_state_vector = c(1, 1, ..., 1)  - activation = \"kosko\"  - squashing = either \"sigmoid\" \"tanh\"  - lambda = 1","code":""},{"path":"/reference/simulate_conventional_fcm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate (Conventional) FCM — simulate_conventional_fcm","text":"","code":"adj_matrix <- data.frame(   C1 = c(0, 0, 0, 0, 0, 0),   C2 = c(-0.85, 0, 0, 0.35, 0, 0),   C3 = c(0, 0, 0, 0, 0, 0),   C4 = c(-0.7, 0.6, -1, 0, -1, 0),   C5 = c(0.1, 0, 0, -0.8, 0, 0),   C6 = c(0, -0.95, 0, 0, -0.95, 0) )  simulate_fcm(adj_matrix,              initial_state_vector = c(1, 1, 1, 1, 1, 1),              clamping_vector = c(1, 0, 0, 0, 0, 0),              activation = \"kosko\",              squashing = \"sigmoid\",              lambda = 1,              point_of_inference = \"final\") #> $inferences #>       C1        C2  C3        C4        C5        C6 #> final  1 0.3129871 0.5 0.1823157 0.4885399 0.3183326 #>  #> $state_vectors #>   iter C1        C2  C3        C4        C5        C6 #> 1    0  1 1.0000000 1.0 1.0000000 1.0000000 1.0000000 #> 2    1  1 0.3775407 0.5 0.1090968 0.3318122 0.1301085 #> 3    2  1 0.3075036 0.5 0.2132764 0.5031806 0.3376274 #> 4    3  1 0.3153222 0.5 0.1796562 0.4823520 0.3164467 #> 5    4  1 0.3127873 0.5 0.1834481 0.4890705 0.3191262 #> 6    5  1 0.3130727 0.5 0.1822171 0.4883125 0.3182632 #> 7    6  1 0.3129800 0.5 0.1823556 0.4885586 0.3183606 #> 8    7  1 0.3129904 0.5 0.1823106 0.4885309 0.3183290 #> 9    8  1 0.3129871 0.5 0.1823157 0.4885399 0.3183326 #>  #> $errors #>   iter C1           C2  C3           C4           C5           C6 #> 1    0  0 0.000000e+00 0.0 0.000000e+00 0.000000e+00 0.000000e+00 #> 2    1  0 6.224593e-01 0.5 8.909032e-01 6.681878e-01 8.698915e-01 #> 3    2  0 7.003704e-02 0.0 1.041796e-01 1.713684e-01 2.075189e-01 #> 4    3  0 7.818602e-03 0.0 3.362022e-02 2.082854e-02 2.118076e-02 #> 5    4  0 2.534905e-03 0.0 3.791884e-03 6.718451e-03 2.679494e-03 #> 6    5  0 2.853456e-04 0.0 1.231001e-03 7.579887e-04 8.629478e-04 #> 7    6  0 9.265046e-05 0.0 1.385041e-04 2.460686e-04 9.743062e-05 #> 8    7  0 1.042367e-05 0.0 4.497364e-05 2.768629e-05 3.162735e-05 #> 9    8  0 3.384688e-06 0.0 5.059681e-06 8.989999e-06 3.558627e-06 #>  #> $params #> $params$adj_matrix #>   C1    C2 C3   C4   C5    C6 #> 1  0 -0.85  0 -0.7  0.1  0.00 #> 2  0  0.00  0  0.6  0.0 -0.95 #> 3  0  0.00  0 -1.0  0.0  0.00 #> 4  0  0.35  0  0.0 -0.8  0.00 #> 5  0  0.00  0 -1.0  0.0 -0.95 #> 6  0  0.00  0  0.0  0.0  0.00 #>  #> $params$initial_state_vector #> [1] 1 1 1 1 1 1 #>  #> $params$activation #> [1] \"kosko\" #>  #> $params$squashing #> [1] \"sigmoid\" #>  #> $params$lambda #> [1] 1 #>  #> $params$max_iter #> [1] 100 #>  #> $params$min_error #> [1] 1e-05 #>  #> $params$concepts #> [1] \"C1\" \"C2\" \"C3\" \"C4\" \"C5\" \"C6\" #>  #>  #> attr(,\"class\") #> [1] \"fcm_simulation\"  # To simulate an fcm without clamping (i.e. don't calculate the difference # from steady-state), change the values in the initial_state_vector while # leaving all values in the clamping_vector at 0 simulate_fcm(adj_matrix,              initial_state_vector = c(1, 0, 0, 0, 0, 0),              clamping_vector = c(0, 0, 0, 0, 0, 0),              activation = \"kosko\",              squashing = \"sigmoid\",              lambda = 1,              point_of_inference = \"final\") #> $inferences #>        C1        C2  C3        C4       C5        C6 #> final 0.5 0.4170232 0.5 0.2571306 0.461153 0.3027438 #>  #> $state_vectors #>    iter  C1        C2  C3        C4        C5        C6 #> 1     0 1.0 0.0000000 0.0 0.0000000 0.0000000 0.0000000 #> 2     1 0.5 0.2994329 0.5 0.3318122 0.5249792 0.5000000 #> 3     2 0.5 0.4233916 0.5 0.2323089 0.4463449 0.3136325 #> 4     3 0.5 0.4149130 0.5 0.2607045 0.4660904 0.3044386 #> 5     4 0.5 0.4173276 0.5 0.2559469 0.4604419 0.3021769 #> 6     5 0.5 0.4169228 0.5 0.2573008 0.4613877 0.3028251 #> 7     6 0.5 0.4170380 0.5 0.2570737 0.4611185 0.3027166 #> 8     7 0.5 0.4170187 0.5 0.2571383 0.4611636 0.3027475 #> 9     8 0.5 0.4170242 0.5 0.2571275 0.4611508 0.3027423 #> 10    9 0.5 0.4170232 0.5 0.2571306 0.4611530 0.3027438 #>  #> $errors #>    iter  C1           C2  C3           C4           C5           C6 #> 1     0 0.0 0.000000e+00 0.0 0.000000e+00 0.000000e+00 0.000000e+00 #> 2     1 0.5 2.994329e-01 0.5 3.318122e-01 5.249792e-01 5.000000e-01 #> 3     2 0.0 1.239588e-01 0.0 9.950333e-02 7.863424e-02 1.863675e-01 #> 4     3 0.0 8.478674e-03 0.0 2.839563e-02 1.974541e-02 9.193839e-03 #> 5     4 0.0 2.414687e-03 0.0 4.757664e-03 5.648411e-03 2.261750e-03 #> 6     5 0.0 4.048587e-04 0.0 1.353921e-03 9.457181e-04 6.481817e-04 #> 7     6 0.0 1.152020e-04 0.0 2.270788e-04 2.691580e-04 1.084670e-04 #> 8     7 0.0 1.932225e-05 0.0 6.461218e-05 4.514145e-05 3.087296e-05 #> 9     8 0.0 5.497857e-06 0.0 1.083723e-05 1.284445e-05 5.177677e-06 #> 10    9 0.0 9.221424e-07 0.0 3.083565e-06 2.154362e-06 1.473250e-06 #>  #> $params #> $params$adj_matrix #>   C1    C2 C3   C4   C5    C6 #> 1  0 -0.85  0 -0.7  0.1  0.00 #> 2  0  0.00  0  0.6  0.0 -0.95 #> 3  0  0.00  0 -1.0  0.0  0.00 #> 4  0  0.35  0  0.0 -0.8  0.00 #> 5  0  0.00  0 -1.0  0.0 -0.95 #> 6  0  0.00  0  0.0  0.0  0.00 #>  #> $params$initial_state_vector #> [1] 1 0 0 0 0 0 #>  #> $params$activation #> [1] \"kosko\" #>  #> $params$squashing #> [1] \"sigmoid\" #>  #> $params$lambda #> [1] 1 #>  #> $params$max_iter #> [1] 100 #>  #> $params$min_error #> [1] 1e-05 #>  #> $params$concepts #> [1] \"C1\" \"C2\" \"C3\" \"C4\" \"C5\" \"C6\" #>  #>  #> attr(,\"class\") #> [1] \"fcm_simulation\""},{"path":"/reference/simulate_fcm.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate FCM — simulate_fcm","title":"Simulate FCM — simulate_fcm","text":"simulates fcm (conventional, ivfn, tfn) based adjacency matrix.","code":""},{"path":"/reference/simulate_fcm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate FCM — simulate_fcm","text":"","code":"simulate_fcm(   adj_matrix = matrix(),   initial_state_vector = c(),   clamping_vector = c(),   activation = c(\"kosko\", \"modified-kosko\", \"rescale\"),   squashing = c(\"sigmoid\", \"tanh\"),   lambda = 1,   point_of_inference = c(\"peak\", \"final\"),   max_iter = 100,   min_error = 1e-05 )"},{"path":"/reference/simulate_fcm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate FCM — simulate_fcm","text":"adj_matrix n x n adjacency matrix represents FCM initial_state_vector list state values start fcm simulation clamping_vector list values representing specific actions taken control behavior FCM. Specifically, non-zero values defined vector remain constant throughout entire simulation \"clamped\" values. activation activation function applied. Must one following: 'kosko', 'modified-kosko', 'rescale'. squashing squashing function apply. Must one following: 'bivalent', 'saturation', 'trivalent', 'tanh', 'sigmoid'. lambda numeric value defines steepness slope squashing function tanh sigmoid applied point_of_inference point along simulation time-series identified inference. Must one following: 'peak' 'final' max_iter maximum number iterations run minimum error value achieved min_error lowest error (sum absolute value current state vector minus previous state vector) iterations necessary simulation stop","code":""},{"path":"/reference/simulate_fcm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate FCM — simulate_fcm","text":"(Conventional, IVFN, TFN) FCM simulation results","code":""},{"path":"/reference/simulate_fcm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate FCM — simulate_fcm","text":"function performs two fcm simulations compares output two. first simulation considers baseline activity nodes \"clamped\" system behaves without outside inputs. second simulation considers scenario one multiple nodes \"clamped\" system reactive additional inputs. function returns difference simulation results scenario baseline activity understand system manipulations compare structural expectations system. function produces output mental modeler following inputs:  - initial_state_vector = c(1, 1, ..., 1)  - activation = \"kosko\"  - squashing = either \"sigmoid\" \"tanh\"  - lambda = 1","code":""},{"path":"/reference/simulate_fcm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate FCM — simulate_fcm","text":"","code":"adj_matrix <- data.frame(   C1 = c(0, 0, 0, 0, 0, 0),   C2 = c(-0.85, 0, 0, 0.35, 0, 0),   C3 = c(0, 0, 0, 0, 0, 0),   C4 = c(-0.7, 0.6, -1, 0, -1, 0),   C5 = c(0.1, 0, 0, -0.8, 0, 0),   C6 = c(0, -0.95, 0, 0, -0.95, 0) )  simulate_fcm(adj_matrix,           initial_state_vector = c(1, 1, 1, 1, 1, 1),           clamping_vector = c(1, 0, 0, 0, 0, 0),           activation = \"kosko\",           squashing = \"sigmoid\",           lambda = 1,           point_of_inference = \"final\") #> $inferences #>       C1        C2  C3        C4        C5        C6 #> final  1 0.3129871 0.5 0.1823157 0.4885399 0.3183326 #>  #> $state_vectors #>   iter C1        C2  C3        C4        C5        C6 #> 1    0  1 1.0000000 1.0 1.0000000 1.0000000 1.0000000 #> 2    1  1 0.3775407 0.5 0.1090968 0.3318122 0.1301085 #> 3    2  1 0.3075036 0.5 0.2132764 0.5031806 0.3376274 #> 4    3  1 0.3153222 0.5 0.1796562 0.4823520 0.3164467 #> 5    4  1 0.3127873 0.5 0.1834481 0.4890705 0.3191262 #> 6    5  1 0.3130727 0.5 0.1822171 0.4883125 0.3182632 #> 7    6  1 0.3129800 0.5 0.1823556 0.4885586 0.3183606 #> 8    7  1 0.3129904 0.5 0.1823106 0.4885309 0.3183290 #> 9    8  1 0.3129871 0.5 0.1823157 0.4885399 0.3183326 #>  #> $errors #>   iter C1           C2  C3           C4           C5           C6 #> 1    0  0 0.000000e+00 0.0 0.000000e+00 0.000000e+00 0.000000e+00 #> 2    1  0 6.224593e-01 0.5 8.909032e-01 6.681878e-01 8.698915e-01 #> 3    2  0 7.003704e-02 0.0 1.041796e-01 1.713684e-01 2.075189e-01 #> 4    3  0 7.818602e-03 0.0 3.362022e-02 2.082854e-02 2.118076e-02 #> 5    4  0 2.534905e-03 0.0 3.791884e-03 6.718451e-03 2.679494e-03 #> 6    5  0 2.853456e-04 0.0 1.231001e-03 7.579887e-04 8.629478e-04 #> 7    6  0 9.265046e-05 0.0 1.385041e-04 2.460686e-04 9.743062e-05 #> 8    7  0 1.042367e-05 0.0 4.497364e-05 2.768629e-05 3.162735e-05 #> 9    8  0 3.384688e-06 0.0 5.059681e-06 8.989999e-06 3.558627e-06 #>  #> $params #> $params$adj_matrix #>   C1    C2 C3   C4   C5    C6 #> 1  0 -0.85  0 -0.7  0.1  0.00 #> 2  0  0.00  0  0.6  0.0 -0.95 #> 3  0  0.00  0 -1.0  0.0  0.00 #> 4  0  0.35  0  0.0 -0.8  0.00 #> 5  0  0.00  0 -1.0  0.0 -0.95 #> 6  0  0.00  0  0.0  0.0  0.00 #>  #> $params$initial_state_vector #> [1] 1 1 1 1 1 1 #>  #> $params$activation #> [1] \"kosko\" #>  #> $params$squashing #> [1] \"sigmoid\" #>  #> $params$lambda #> [1] 1 #>  #> $params$max_iter #> [1] 100 #>  #> $params$min_error #> [1] 1e-05 #>  #> $params$concepts #> [1] \"C1\" \"C2\" \"C3\" \"C4\" \"C5\" \"C6\" #>  #>  #> attr(,\"class\") #> [1] \"fcm_simulation\"  # To simulate an fcm without clamping (i.e. don't calculate the difference # from steady-state), change the values in the initial_state_vector while # leaving all values in the clamping_vector at 0 simulate_fcm(adj_matrix,           initial_state_vector = c(1, 0, 0, 0, 0, 0),           clamping_vector = c(0, 0, 0, 0, 0, 0),           activation = \"kosko\",           squashing = \"sigmoid\",           lambda = 1,           point_of_inference = \"final\") #> $inferences #>        C1        C2  C3        C4       C5        C6 #> final 0.5 0.4170232 0.5 0.2571306 0.461153 0.3027438 #>  #> $state_vectors #>    iter  C1        C2  C3        C4        C5        C6 #> 1     0 1.0 0.0000000 0.0 0.0000000 0.0000000 0.0000000 #> 2     1 0.5 0.2994329 0.5 0.3318122 0.5249792 0.5000000 #> 3     2 0.5 0.4233916 0.5 0.2323089 0.4463449 0.3136325 #> 4     3 0.5 0.4149130 0.5 0.2607045 0.4660904 0.3044386 #> 5     4 0.5 0.4173276 0.5 0.2559469 0.4604419 0.3021769 #> 6     5 0.5 0.4169228 0.5 0.2573008 0.4613877 0.3028251 #> 7     6 0.5 0.4170380 0.5 0.2570737 0.4611185 0.3027166 #> 8     7 0.5 0.4170187 0.5 0.2571383 0.4611636 0.3027475 #> 9     8 0.5 0.4170242 0.5 0.2571275 0.4611508 0.3027423 #> 10    9 0.5 0.4170232 0.5 0.2571306 0.4611530 0.3027438 #>  #> $errors #>    iter  C1           C2  C3           C4           C5           C6 #> 1     0 0.0 0.000000e+00 0.0 0.000000e+00 0.000000e+00 0.000000e+00 #> 2     1 0.5 2.994329e-01 0.5 3.318122e-01 5.249792e-01 5.000000e-01 #> 3     2 0.0 1.239588e-01 0.0 9.950333e-02 7.863424e-02 1.863675e-01 #> 4     3 0.0 8.478674e-03 0.0 2.839563e-02 1.974541e-02 9.193839e-03 #> 5     4 0.0 2.414687e-03 0.0 4.757664e-03 5.648411e-03 2.261750e-03 #> 6     5 0.0 4.048587e-04 0.0 1.353921e-03 9.457181e-04 6.481817e-04 #> 7     6 0.0 1.152020e-04 0.0 2.270788e-04 2.691580e-04 1.084670e-04 #> 8     7 0.0 1.932225e-05 0.0 6.461218e-05 4.514145e-05 3.087296e-05 #> 9     8 0.0 5.497857e-06 0.0 1.083723e-05 1.284445e-05 5.177677e-06 #> 10    9 0.0 9.221424e-07 0.0 3.083565e-06 2.154362e-06 1.473250e-06 #>  #> $params #> $params$adj_matrix #>   C1    C2 C3   C4   C5    C6 #> 1  0 -0.85  0 -0.7  0.1  0.00 #> 2  0  0.00  0  0.6  0.0 -0.95 #> 3  0  0.00  0 -1.0  0.0  0.00 #> 4  0  0.35  0  0.0 -0.8  0.00 #> 5  0  0.00  0 -1.0  0.0 -0.95 #> 6  0  0.00  0  0.0  0.0  0.00 #>  #> $params$initial_state_vector #> [1] 1 0 0 0 0 0 #>  #> $params$activation #> [1] \"kosko\" #>  #> $params$squashing #> [1] \"sigmoid\" #>  #> $params$lambda #> [1] 1 #>  #> $params$max_iter #> [1] 100 #>  #> $params$min_error #> [1] 1e-05 #>  #> $params$concepts #> [1] \"C1\" \"C2\" \"C3\" \"C4\" \"C5\" \"C6\" #>  #>  #> attr(,\"class\") #> [1] \"fcm_simulation\"   # Inference w/ Interval-Valued Fuzzy Numbers (IVFNs) lower_adj_matrix <- data.frame(   C1 = c(0, 0, 0, 0, 0, 0),   C2 = c(-0.85, 0, 0, 0.35, 0, 0),   C3 = c(0, 0, 0, 0, 0, 0),   C4 = c(-0.7, 0.6, -1, 0, -1, 0),   C5 = c(0.1, 0, 0, -0.8, 0, 0),   C6 = c(0, -0.95, 0, 0, -0.95, 0) ) upper_adj_matrix <- data.frame(   C1 = c(0, 0, 0, 0, 0, 0),   C2 = c(-0.2, 0, 0, 0.9, 0, 0),   C3 = c(0, 0, 0, 0, 0, 0),   C4 = c(-0.3, 0.9, -0.5, 0, -0.5, 0),   C5 = c(0.5, 0, 0, -0.3, 0, 0),   C6 = c(0, -0.4, 0, 0, -0.5, 0) ) adj_matrix <- make_adj_matrix_w_ivfns(lower_adj_matrix, upper_adj_matrix)  simulate_fcm(adj_matrix,           initial_state_vector = c(1, 1, 1, 1, 1, 1),           clamping_vector = c(1, 0, 0, 0, 0, 0),           activation = \"kosko\",           squashing = \"sigmoid\",           lambda = 1,           point_of_inference = \"final\") #> $inferences #>         C1                   C2       C3                   C4 #> final 1, 1 0.3210064, 0.5148274 0.5, 0.5 0.1848365, 0.3914542 #>                         C5                   C6 #> final 0.4674180, 0.6019406 0.2880308, 0.3930508 #>  #> $state_vectors #>   iter   C1                   C2       C3                   C4 #> 1    0 1, 1                 1, 1     1, 1                 1, 1 #> 2    1 1, 1 0.3775407, 0.6681878 0.5, 0.5 0.1090968, 0.4013123 #> 3    2 1, 1 0.3184990, 0.5074205 0.5, 0.5 0.2096387, 0.4255981 #> 4    3 1, 1 0.3232593, 0.5214510 0.5, 0.5 0.1837164, 0.3898582 #> 5    4 1, 1 0.3209031, 0.5145231 0.5, 0.5 0.1858397, 0.3928797 #> 6    5 1, 1 0.3210994, 0.5151013 0.5, 0.5 0.1847886, 0.3913861 #> 7    6 1, 1 0.3210023, 0.5148153 0.5, 0.5 0.1848761, 0.3915106 #> 8    7 1, 1 0.3210104, 0.5148392 0.5, 0.5 0.1848328, 0.3914490 #> 9    8 1, 1 0.3210064, 0.5148274 0.5, 0.5 0.1848365, 0.3914542 #>                     C5                   C6 #> 1                 1, 1                 1, 1 #> 2 0.3318122, 0.5498340 0.1301085, 0.2890505 #> 3 0.4739826, 0.6043058 0.2858751, 0.3942321 #> 4 0.4615524, 0.5998198 0.2881269, 0.3929912 #> 5 0.4676876, 0.6020379 0.2879443, 0.3931036 #> 6 0.4671753, 0.6018530 0.2880349, 0.3930483 #> 7 0.4674287, 0.6019445 0.2880274, 0.3930529 #> 8 0.4674076, 0.6019369 0.2880311, 0.3930507 #> 9 0.4674180, 0.6019406 0.2880308, 0.3930508 #>  #> $crisp_state_vectors #>   iter C1        C2  C3        C4        C5        C6 #> 1    0  1 1.0000000 1.0 1.0000000 1.0000000 1.0000000 #> 2    1  1 0.5228642 0.5 0.2552046 0.4408231 0.2095795 #> 3    2  1 0.4129597 0.5 0.3176184 0.5391442 0.3400536 #> 4    3  1 0.4223551 0.5 0.2867873 0.5306861 0.3405591 #> 5    4  1 0.4177131 0.5 0.2893597 0.5348628 0.3405239 #> 6    5  1 0.4181004 0.5 0.2880873 0.5345142 0.3405416 #> 7    6  1 0.4179088 0.5 0.2881934 0.5346866 0.3405402 #> 8    7  1 0.4179248 0.5 0.2881409 0.5346722 0.3405409 #> 9    8  1 0.4179169 0.5 0.2881453 0.5346793 0.3405408 #>  #> $errors #>   iter      C1                         C2       C3                         C4 #> 1    0 0, 0, 0                    0, 0, 0  0, 0, 0                    0, 0, 0 #> 2    1    0, 0       0.6224593, 0.3318122 0.5, 0.5       0.8909032, 0.5986877 #> 3    2    0, 0     0.05904167, 0.16076729     0, 0     0.10054188, 0.02428578 #> 4    3    0, 0   0.004760269, 0.014030482     0, 0     0.02592227, 0.03573993 #> 5    4    0, 0   0.002356127, 0.006927909     0, 0   0.002123231, 0.003021519 #> 6    5    0, 0 0.0001962357, 0.0005782764     0, 0   0.001051055, 0.001493630 #> 7    6    0, 0 9.706957e-05, 2.860208e-04     0, 0 8.753192e-05, 1.245469e-04 #> 8    7    0, 0 8.089368e-06, 2.383788e-05     0, 0 4.329861e-05, 6.160488e-05 #> 9    8    0, 0 4.001370e-06, 1.179125e-05     0, 0 3.608305e-06, 5.134132e-06 #>                           C5                         C6 #> 1                    0, 0, 0                    0, 0, 0 #> 2       0.6681878, 0.4501660       0.8698915, 0.7109495 #> 3     0.14217038, 0.05447179       0.1557666, 0.1051816 #> 4   0.012430238, 0.004485955   0.002251801, 0.001240845 #> 5   0.006135267, 0.002218108 0.0001825984, 0.0001123379 #> 6 0.0005122922, 0.0001849078 9.064582e-05, 5.523709e-05 #> 7 2.533802e-04, 9.146232e-05 7.530812e-06, 4.627520e-06 #> 8 2.111782e-05, 7.622369e-06 3.725627e-06, 2.288420e-06 #> 9 1.044579e-05, 3.770365e-06 3.104444e-07, 1.907536e-07 #>  #> $crisp_errors #>   iter C1           C2  C3           C4           C5           C6 #> 1    0  0 0.000000e+00 0.0 0.000000e+00 0.000000e+00 0.000000e+00 #> 2    1  0 4.771358e-01 0.5 7.447954e-01 5.591769e-01 7.904205e-01 #> 3    2  0 1.099045e-01 0.0 6.241383e-02 9.832108e-02 1.304741e-01 #> 4    3  0 9.395375e-03 0.0 3.083110e-02 8.458096e-03 5.054783e-04 #> 5    4  0 4.642018e-03 0.0 2.572375e-03 4.176688e-03 3.513023e-05 #> 6    5  0 3.872561e-04 0.0 1.272342e-03 3.486000e-04 1.770437e-05 #> 7    6  0 1.915452e-04 0.0 1.060394e-04 1.724213e-04 1.451646e-06 #> 8    7  0 1.596363e-05 0.0 5.245174e-05 1.437010e-05 7.186036e-07 #> 9    8  0 7.896313e-06 0.0 4.371219e-06 7.108076e-06 5.984542e-08 #>  #> $params #> $params$adj_matrix #>      C1           C2   C3         C4         C5           C6 #> C1 0, 0 -0.85, -0.20 0, 0 -0.7, -0.3   0.1, 0.5         0, 0 #> C2 0, 0         0, 0 0, 0   0.6, 0.9       0, 0 -0.95, -0.40 #> C3 0, 0         0, 0 0, 0 -1.0, -0.5       0, 0         0, 0 #> C4 0, 0   0.35, 0.90 0, 0       0, 0 -0.8, -0.3         0, 0 #> C5 0, 0         0, 0 0, 0 -1.0, -0.5       0, 0 -0.95, -0.50 #> C6 0, 0         0, 0 0, 0       0, 0       0, 0         0, 0 #>  #> $params$initial_state_vector #> [1] 1 1 1 1 1 1 #>  #> $params$clamping_vector #> [1] 1 0 0 0 0 0 #>  #> $params$activation #> [1] \"kosko\" #>  #> $params$squashing #> [1] \"sigmoid\" #>  #> $params$lambda #> [1] 1 #>  #> $params$max_iter #> [1] 100 #>  #> $params$min_error #> [1] 1e-05 #>  #> $params$concepts #> [1] \"C1\" \"C2\" \"C3\" \"C4\" \"C5\" \"C6\" #>  #>  #> attr(,\"class\") #> [1] \"ivfn_or_tfn_simulation\"   # Inference w/ Triangular Fuzzy Numbers (TFNs) lower_adj_matrix <- data.frame(   C1 = c(0, 0, 0, 0, 0, 0),   C2 = c(-0.85, 0, 0, 0.35, 0, 0),   C3 = c(0, 0, 0, 0, 0, 0),   C4 = c(-0.7, 0.6, -1, 0, -1, 0),   C5 = c(0.1, 0, 0, -0.8, 0, 0),   C6 = c(0, -0.95, 0, 0, -0.95, 0) ) mode_adj_matrix <- data.frame(   C1 = c(0, 0, 0, 0, 0, 0),   C2 = c(-0.5, 0, 0, 0.6, 0, 0),   C3 = c(0, 0, 0, 0, 0, 0),   C4 = c(-0.5, 0.7, -0.8, 0, -0.8, 0),   C5 = c(0.2, 0, 0, -0.6, 0, 0),   C6 = c(0, -0.7, 0, 0, -0.6, 0) ) upper_adj_matrix <- data.frame(   C1 = c(0, 0, 0, 0, 0, 0),   C2 = c(-0.2, 0, 0, 0.9, 0, 0),   C3 = c(0, 0, 0, 0, 0, 0),   C4 = c(-0.3, 0.9, -0.5, 0, -0.5, 0),   C5 = c(0.5, 0, 0, -0.3, 0, 0),   C6 = c(0, -0.4, 0, 0, -0.5, 0) ) adj_matrix <- make_adj_matrix_w_tfns(   lower_adj_matrix, mode_adj_matrix, upper_adj_matrix )  simulate_fcm(adj_matrix,           initial_state_vector = c(1, 1, 1, 1, 1, 1),           clamping_vector = c(1, 0, 0, 0, 0, 0),           activation = \"kosko\",           squashing = \"sigmoid\",           lambda = 1,           point_of_inference = \"final\") #> $inferences #>            C1                              C2            C3 #> final 1, 1, 1 0.3204238, 0.4178271, 0.5131095 0.5, 0.5, 0.5 #>                                    C4                              C5 #> final 0.1860072, 0.2632461, 0.3922639 0.4689400, 0.5079243, 0.6024897 #>                                    C6 #> final 0.2897922, 0.3525484, 0.3941089 #>  #> $state_vectors #>   iter      C1                              C2            C3 #> 1    0 1, 1, 1                         1, 1, 1       1, 1, 1 #> 2    1 1, 1, 1 0.3775407, 0.5249792, 0.6681878 0.5, 0.5, 0.5 #> 3    2 1, 1, 1 0.3170475, 0.4113578, 0.5031169 0.5, 0.5, 0.5 #> 4    3 1, 1, 1 0.3227616, 0.4223021, 0.5199905 0.5, 0.5, 0.5 #> 5    4 1, 1, 1 0.3202828, 0.4175570, 0.5126935 0.5, 0.5, 0.5 #> 6    5 1, 1, 1 0.3205218, 0.4180148, 0.5133987 0.5, 0.5, 0.5 #> 7    6 1, 1, 1 0.3204181, 0.4178162, 0.5130928 0.5, 0.5, 0.5 #> 8    7 1, 1, 1 0.3204281, 0.4178354, 0.5131223 0.5, 0.5, 0.5 #> 9    8 1, 1, 1 0.3204238, 0.4178271, 0.5131095 0.5, 0.5, 0.5 #>                                C4                              C5 #> 1                         1, 1, 1                         1, 1, 1 #> 2 0.1090968, 0.1978161, 0.4013123 0.3318122, 0.4013123, 0.5498340 #> 3 0.2118999, 0.2940854, 0.4273640 0.4777996, 0.5145846, 0.6056772 #> 4 0.1844653, 0.2613827, 0.3901012 0.4628453, 0.5033325, 0.6002880 #> 5 0.1870727, 0.2645320, 0.3937536 0.4693087, 0.5082018, 0.6026227 #> 6 0.1859409, 0.2631660, 0.3921710 0.4686838, 0.5077315, 0.6023974 #> 7 0.1860499, 0.2632977, 0.3923237 0.4689548, 0.5079354, 0.6024951 #> 8 0.1860026, 0.2632406, 0.3922575 0.4689287, 0.5079158, 0.6024857 #> 9 0.1860072, 0.2632461, 0.3922639 0.4689400, 0.5079243, 0.6024897 #>                                C6 #> 1                         1, 1, 1 #> 2 0.1301085, 0.2141650, 0.2890505 #> 3 0.2882988, 0.3490790, 0.3957383 #> 4 0.2898660, 0.3527513, 0.3939958 #> 5 0.2897398, 0.3524077, 0.3941857 #> 6 0.2897954, 0.3525572, 0.3941041 #> 7 0.2897901, 0.3525428, 0.3941120 #> 8 0.2897924, 0.3525490, 0.3941085 #> 9 0.2897922, 0.3525484, 0.3941089 #>  #> $crisp_state_vectors #>   iter C1        C2  C3        C4        C5        C6 #> 1    0  1 1.0000000 1.0 1.0000000 1.0000000 1.0000000 #> 2    1  1 0.5235692 0.5 0.2360751 0.4276529 0.2111080 #> 3    2  1 0.4105074 0.5 0.3111164 0.5326871 0.3443720 #> 4    3  1 0.4216848 0.5 0.2786497 0.5221553 0.3455377 #> 5    4  1 0.4168444 0.5 0.2817861 0.5267111 0.3454444 #> 6    5  1 0.4173117 0.5 0.2804259 0.5262709 0.3454856 #> 7    6  1 0.4171091 0.5 0.2805571 0.5264618 0.3454816 #> 8    7  1 0.4171286 0.5 0.2805002 0.5264434 0.3454833 #> 9    8  1 0.4171201 0.5 0.2805057 0.5264513 0.3454832 #>  #> $errors #>   iter      C1                                       C2            C3 #> 1    0 0, 0, 0                                  0, 0, 0       0, 0, 0 #> 2    1 0, 0, 0          0.6224593, 0.4750208, 0.3318122 0.5, 0.5, 0.5 #> 3    2 0, 0, 0       0.06049317, 0.11362134, 0.16507092       0, 0, 0 #> 4    3 0, 0, 0    0.005714132, 0.010944254, 0.016873682       0, 0, 0 #> 5    4 0, 0, 0    0.002478858, 0.004745077, 0.007297080       0, 0, 0 #> 6    5 0, 0, 0 0.0002390248, 0.0004577361, 0.0007052029       0, 0, 0 #> 7    6 0, 0, 0 0.0001036682, 0.0001985214, 0.0003058153       0, 0, 0 #> 8    7 0, 0, 0 9.998275e-06, 1.914670e-05, 2.949705e-05       0, 0, 0 #> 9    8 0, 0, 0 4.336339e-06, 8.304085e-06, 1.279306e-05       0, 0, 0 #>                                         C4 #> 1                                  0, 0, 0 #> 2          0.8909032, 0.8021839, 0.5986877 #> 3       0.10280304, 0.09626934, 0.02605166 #> 4       0.02743458, 0.03270279, 0.03726282 #> 5    0.002607410, 0.003149330, 0.003652373 #> 6    0.001131845, 0.001366014, 0.001582542 #> 7 0.0001090955, 0.0001317379, 0.0001527310 #> 8 4.731736e-05, 5.713608e-05, 6.623810e-05 #> 9 4.563439e-06, 5.510512e-06, 6.388555e-06 #>                                         C5 #> 1                                  0, 0, 0 #> 2          0.6681878, 0.5986877, 0.4501660 #> 3       0.14598736, 0.11327226, 0.05584324 #> 4    0.014954260, 0.011252113, 0.005389284 #> 5    0.006463364, 0.004869323, 0.002334744 #> 6 0.0006248623, 0.0004703362, 0.0002253404 #> 7 2.709689e-04, 2.039700e-04, 9.772756e-05 #> 8 2.613639e-05, 1.967328e-05, 9.425699e-06 #> 9 1.133551e-05, 8.532435e-06, 4.087999e-06 #>                                         C6 #> 1                                  0, 0, 0 #> 2          0.8698915, 0.7858350, 0.7109495 #> 3          0.1581903, 0.1349140, 0.1066878 #> 4    0.001567275, 0.003672301, 0.001742500 #> 5 0.0001262064, 0.0003435462, 0.0001898328 #> 6 5.562870e-05, 1.494393e-04, 8.161282e-05 #> 7 5.306794e-06, 1.438419e-05, 7.918486e-06 #> 8 2.303152e-06, 6.239309e-06, 3.433063e-06 #> 9 2.220257e-07, 6.017034e-07, 3.311875e-07 #>  #> $crisp_errors #>   iter C1           C2  C3           C4           C5           C6 #> 1    0  0 0.000000e+00 0.0 0.000000e+00 0.000000e+00 0.000000e+00 #> 2    1  0 4.764308e-01 0.5 7.639249e-01 5.723471e-01 7.888920e-01 #> 3    2  0 1.130618e-01 0.0 7.504135e-02 1.050343e-01 1.332640e-01 #> 4    3  0 1.117736e-02 0.0 3.246673e-02 1.053189e-02 1.165692e-03 #> 5    4  0 4.840338e-03 0.0 3.136371e-03 4.555810e-03 9.330661e-05 #> 6    5  0 4.673212e-04 0.0 1.360134e-03 4.401796e-04 4.115174e-05 #> 7    6  0 2.026683e-04 0.0 1.311881e-04 1.908888e-04 3.924166e-06 #> 8    7  0 1.954734e-05 0.0 5.689718e-05 1.841179e-05 1.703133e-06 #> 9    8  0 8.477827e-06 0.0 5.487502e-06 7.985314e-06 1.641805e-07 #>  #> $params #> $params$adj_matrix #>         C1                  C2      C3               C4               C5 #> C1 0, 0, 0 -0.85, -0.50, -0.20 0, 0, 0 -0.7, -0.5, -0.3    0.1, 0.2, 0.5 #> C2 0, 0, 0             0, 0, 0 0, 0, 0    0.6, 0.7, 0.9          0, 0, 0 #> C3 0, 0, 0             0, 0, 0 0, 0, 0 -1.0, -0.8, -0.5          0, 0, 0 #> C4 0, 0, 0    0.35, 0.60, 0.90 0, 0, 0          0, 0, 0 -0.8, -0.6, -0.3 #> C5 0, 0, 0             0, 0, 0 0, 0, 0 -1.0, -0.8, -0.5          0, 0, 0 #> C6 0, 0, 0             0, 0, 0 0, 0, 0          0, 0, 0          0, 0, 0 #>                     C6 #> C1             0, 0, 0 #> C2 -0.95, -0.70, -0.40 #> C3             0, 0, 0 #> C4             0, 0, 0 #> C5 -0.95, -0.60, -0.50 #> C6             0, 0, 0 #>  #> $params$initial_state_vector #> [1] 1 1 1 1 1 1 #>  #> $params$clamping_vector #> [1] 1 0 0 0 0 0 #>  #> $params$activation #> [1] \"kosko\" #>  #> $params$squashing #> [1] \"sigmoid\" #>  #> $params$lambda #> [1] 1 #>  #> $params$max_iter #> [1] 100 #>  #> $params$min_error #> [1] 1e-05 #>  #> $params$concepts #> [1] \"C1\" \"C2\" \"C3\" \"C4\" \"C5\" \"C6\" #>  #>  #> attr(,\"class\") #> [1] \"ivfn_or_tfn_simulation\""},{"path":"/reference/simulate_ivfn_or_tfn_fcm.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate (IVFN or TFN) FCM — simulate_ivfn_or_tfn_fcm","title":"Simulate (IVFN or TFN) FCM — simulate_ivfn_or_tfn_fcm","text":"simulates (IVFN TFN) fcm based adjacency matrix.","code":""},{"path":"/reference/simulate_ivfn_or_tfn_fcm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate (IVFN or TFN) FCM — simulate_ivfn_or_tfn_fcm","text":"","code":"simulate_ivfn_or_tfn_fcm(   adj_matrix = matrix(),   initial_state_vector = c(),   clamping_vector = c(),   activation = \"kosko\",   squashing = \"tanh\",   lambda = 1,   point_of_inference = c(\"peak\", \"final\"),   max_iter = 100,   min_error = 1e-05 )"},{"path":"/reference/simulate_ivfn_or_tfn_fcm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate (IVFN or TFN) FCM — simulate_ivfn_or_tfn_fcm","text":"adj_matrix n x n adjacency matrix represents FCM initial_state_vector list state values start fcm simulation clamping_vector list values representing specific actions taken control behavior FCM. Specifically, non-zero values defined vector remain constant throughout entire simulation \"clamped\" values. activation activation function applied. Must one following: 'kosko', 'modified-kosko', 'rescale'. squashing squashing function apply. Must one following: 'bivalent', 'saturation', 'trivalent', 'tanh', 'sigmoid'. lambda numeric value defines steepness slope squashing function tanh sigmoid applied point_of_inference point along simulation time-series identified inference. Must one following: 'peak' 'final' max_iter maximum number iterations run minimum error value achieved min_error lowest error (sum absolute value current state vector minus previous state vector) iterations necessary simulation stop","code":""},{"path":"/reference/simulate_ivfn_or_tfn_fcm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate (IVFN or TFN) FCM — simulate_ivfn_or_tfn_fcm","text":"(IVFN TFN) FCM simulation results","code":""},{"path":"/reference/simulate_ivfn_or_tfn_fcm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate (IVFN or TFN) FCM — simulate_ivfn_or_tfn_fcm","text":"function performs two fcm simulations compares output two. first simulation considers baseline activity nodes \"clamped\" system behaves without outside inputs. second simulation considers scenario one multiple nodes \"clamped\" system reactive additional inputs. function returns difference simulation results scenario baseline activity understand system manipulations compare structural expectations system. function produces output mental modeler following inputs:  - initial_state_vector = c(1, 1, ..., 1)  - activation = \"kosko\"  - squashing = either \"sigmoid\" \"tanh\"  - lambda = 1","code":""},{"path":"/reference/simulate_ivfn_or_tfn_fcm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate (IVFN or TFN) FCM — simulate_ivfn_or_tfn_fcm","text":"","code":"# Inference w/ Interval-Valued Fuzzy Numbers (IVFNs) lower_adj_matrix <- data.frame(   C1 = c(0, 0, 0, 0, 0, 0),   C2 = c(-0.85, 0, 0, 0.35, 0, 0),   C3 = c(0, 0, 0, 0, 0, 0),   C4 = c(-0.7, 0.6, -1, 0, -1, 0),   C5 = c(0.1, 0, 0, -0.8, 0, 0),   C6 = c(0, -0.95, 0, 0, -0.95, 0) ) upper_adj_matrix <- data.frame(   C1 = c(0, 0, 0, 0, 0, 0),   C2 = c(-0.2, 0, 0, 0.9, 0, 0),   C3 = c(0, 0, 0, 0, 0, 0),   C4 = c(-0.3, 0.9, -0.5, 0, -0.5, 0),   C5 = c(0.5, 0, 0, -0.3, 0, 0),   C6 = c(0, -0.4, 0, 0, -0.5, 0) ) adj_matrix <- make_adj_matrix_w_ivfns(lower_adj_matrix, upper_adj_matrix)  simulate_fcm(adj_matrix,              initial_state_vector = c(1, 1, 1, 1, 1, 1),              clamping_vector = c(1, 0, 0, 0, 0, 0),              activation = \"kosko\",              squashing = \"sigmoid\",              lambda = 1,              point_of_inference = \"final\") #> $inferences #>         C1                   C2       C3                   C4 #> final 1, 1 0.3210064, 0.5148274 0.5, 0.5 0.1848365, 0.3914542 #>                         C5                   C6 #> final 0.4674180, 0.6019406 0.2880308, 0.3930508 #>  #> $state_vectors #>   iter   C1                   C2       C3                   C4 #> 1    0 1, 1                 1, 1     1, 1                 1, 1 #> 2    1 1, 1 0.3775407, 0.6681878 0.5, 0.5 0.1090968, 0.4013123 #> 3    2 1, 1 0.3184990, 0.5074205 0.5, 0.5 0.2096387, 0.4255981 #> 4    3 1, 1 0.3232593, 0.5214510 0.5, 0.5 0.1837164, 0.3898582 #> 5    4 1, 1 0.3209031, 0.5145231 0.5, 0.5 0.1858397, 0.3928797 #> 6    5 1, 1 0.3210994, 0.5151013 0.5, 0.5 0.1847886, 0.3913861 #> 7    6 1, 1 0.3210023, 0.5148153 0.5, 0.5 0.1848761, 0.3915106 #> 8    7 1, 1 0.3210104, 0.5148392 0.5, 0.5 0.1848328, 0.3914490 #> 9    8 1, 1 0.3210064, 0.5148274 0.5, 0.5 0.1848365, 0.3914542 #>                     C5                   C6 #> 1                 1, 1                 1, 1 #> 2 0.3318122, 0.5498340 0.1301085, 0.2890505 #> 3 0.4739826, 0.6043058 0.2858751, 0.3942321 #> 4 0.4615524, 0.5998198 0.2881269, 0.3929912 #> 5 0.4676876, 0.6020379 0.2879443, 0.3931036 #> 6 0.4671753, 0.6018530 0.2880349, 0.3930483 #> 7 0.4674287, 0.6019445 0.2880274, 0.3930529 #> 8 0.4674076, 0.6019369 0.2880311, 0.3930507 #> 9 0.4674180, 0.6019406 0.2880308, 0.3930508 #>  #> $crisp_state_vectors #>   iter C1        C2  C3        C4        C5        C6 #> 1    0  1 1.0000000 1.0 1.0000000 1.0000000 1.0000000 #> 2    1  1 0.5228642 0.5 0.2552046 0.4408231 0.2095795 #> 3    2  1 0.4129597 0.5 0.3176184 0.5391442 0.3400536 #> 4    3  1 0.4223551 0.5 0.2867873 0.5306861 0.3405591 #> 5    4  1 0.4177131 0.5 0.2893597 0.5348628 0.3405239 #> 6    5  1 0.4181004 0.5 0.2880873 0.5345142 0.3405416 #> 7    6  1 0.4179088 0.5 0.2881934 0.5346866 0.3405402 #> 8    7  1 0.4179248 0.5 0.2881409 0.5346722 0.3405409 #> 9    8  1 0.4179169 0.5 0.2881453 0.5346793 0.3405408 #>  #> $errors #>   iter      C1                         C2       C3                         C4 #> 1    0 0, 0, 0                    0, 0, 0  0, 0, 0                    0, 0, 0 #> 2    1    0, 0       0.6224593, 0.3318122 0.5, 0.5       0.8909032, 0.5986877 #> 3    2    0, 0     0.05904167, 0.16076729     0, 0     0.10054188, 0.02428578 #> 4    3    0, 0   0.004760269, 0.014030482     0, 0     0.02592227, 0.03573993 #> 5    4    0, 0   0.002356127, 0.006927909     0, 0   0.002123231, 0.003021519 #> 6    5    0, 0 0.0001962357, 0.0005782764     0, 0   0.001051055, 0.001493630 #> 7    6    0, 0 9.706957e-05, 2.860208e-04     0, 0 8.753192e-05, 1.245469e-04 #> 8    7    0, 0 8.089368e-06, 2.383788e-05     0, 0 4.329861e-05, 6.160488e-05 #> 9    8    0, 0 4.001370e-06, 1.179125e-05     0, 0 3.608305e-06, 5.134132e-06 #>                           C5                         C6 #> 1                    0, 0, 0                    0, 0, 0 #> 2       0.6681878, 0.4501660       0.8698915, 0.7109495 #> 3     0.14217038, 0.05447179       0.1557666, 0.1051816 #> 4   0.012430238, 0.004485955   0.002251801, 0.001240845 #> 5   0.006135267, 0.002218108 0.0001825984, 0.0001123379 #> 6 0.0005122922, 0.0001849078 9.064582e-05, 5.523709e-05 #> 7 2.533802e-04, 9.146232e-05 7.530812e-06, 4.627520e-06 #> 8 2.111782e-05, 7.622369e-06 3.725627e-06, 2.288420e-06 #> 9 1.044579e-05, 3.770365e-06 3.104444e-07, 1.907536e-07 #>  #> $crisp_errors #>   iter C1           C2  C3           C4           C5           C6 #> 1    0  0 0.000000e+00 0.0 0.000000e+00 0.000000e+00 0.000000e+00 #> 2    1  0 4.771358e-01 0.5 7.447954e-01 5.591769e-01 7.904205e-01 #> 3    2  0 1.099045e-01 0.0 6.241383e-02 9.832108e-02 1.304741e-01 #> 4    3  0 9.395375e-03 0.0 3.083110e-02 8.458096e-03 5.054783e-04 #> 5    4  0 4.642018e-03 0.0 2.572375e-03 4.176688e-03 3.513023e-05 #> 6    5  0 3.872561e-04 0.0 1.272342e-03 3.486000e-04 1.770437e-05 #> 7    6  0 1.915452e-04 0.0 1.060394e-04 1.724213e-04 1.451646e-06 #> 8    7  0 1.596363e-05 0.0 5.245174e-05 1.437010e-05 7.186036e-07 #> 9    8  0 7.896313e-06 0.0 4.371219e-06 7.108076e-06 5.984542e-08 #>  #> $params #> $params$adj_matrix #>      C1           C2   C3         C4         C5           C6 #> C1 0, 0 -0.85, -0.20 0, 0 -0.7, -0.3   0.1, 0.5         0, 0 #> C2 0, 0         0, 0 0, 0   0.6, 0.9       0, 0 -0.95, -0.40 #> C3 0, 0         0, 0 0, 0 -1.0, -0.5       0, 0         0, 0 #> C4 0, 0   0.35, 0.90 0, 0       0, 0 -0.8, -0.3         0, 0 #> C5 0, 0         0, 0 0, 0 -1.0, -0.5       0, 0 -0.95, -0.50 #> C6 0, 0         0, 0 0, 0       0, 0       0, 0         0, 0 #>  #> $params$initial_state_vector #> [1] 1 1 1 1 1 1 #>  #> $params$clamping_vector #> [1] 1 0 0 0 0 0 #>  #> $params$activation #> [1] \"kosko\" #>  #> $params$squashing #> [1] \"sigmoid\" #>  #> $params$lambda #> [1] 1 #>  #> $params$max_iter #> [1] 100 #>  #> $params$min_error #> [1] 1e-05 #>  #> $params$concepts #> [1] \"C1\" \"C2\" \"C3\" \"C4\" \"C5\" \"C6\" #>  #>  #> attr(,\"class\") #> [1] \"ivfn_or_tfn_simulation\"   # Inference w/ Triangular Fuzzy Numbers (TFNs) lower_adj_matrix <- data.frame(   C1 = c(0, 0, 0, 0, 0, 0),   C2 = c(-0.85, 0, 0, 0.35, 0, 0),   C3 = c(0, 0, 0, 0, 0, 0),   C4 = c(-0.7, 0.6, -1, 0, -1, 0),   C5 = c(0.1, 0, 0, -0.8, 0, 0),   C6 = c(0, -0.95, 0, 0, -0.95, 0) ) mode_adj_matrix <- data.frame(   C1 = c(0, 0, 0, 0, 0, 0),   C2 = c(-0.5, 0, 0, 0.6, 0, 0),   C3 = c(0, 0, 0, 0, 0, 0),   C4 = c(-0.5, 0.7, -0.8, 0, -0.8, 0),   C5 = c(0.2, 0, 0, -0.6, 0, 0),   C6 = c(0, -0.7, 0, 0, -0.6, 0) ) upper_adj_matrix <- data.frame(   C1 = c(0, 0, 0, 0, 0, 0),   C2 = c(-0.2, 0, 0, 0.9, 0, 0),   C3 = c(0, 0, 0, 0, 0, 0),   C4 = c(-0.3, 0.9, -0.5, 0, -0.5, 0),   C5 = c(0.5, 0, 0, -0.3, 0, 0),   C6 = c(0, -0.4, 0, 0, -0.5, 0) ) adj_matrix <- make_adj_matrix_w_tfns(   lower_adj_matrix, mode_adj_matrix, upper_adj_matrix )  simulate_fcm(adj_matrix,              initial_state_vector = c(1, 1, 1, 1, 1, 1),              clamping_vector = c(1, 0, 0, 0, 0, 0),              activation = \"kosko\",              squashing = \"sigmoid\",              lambda = 1,              point_of_inference = \"final\") #> $inferences #>            C1                              C2            C3 #> final 1, 1, 1 0.3204238, 0.4178271, 0.5131095 0.5, 0.5, 0.5 #>                                    C4                              C5 #> final 0.1860072, 0.2632461, 0.3922639 0.4689400, 0.5079243, 0.6024897 #>                                    C6 #> final 0.2897922, 0.3525484, 0.3941089 #>  #> $state_vectors #>   iter      C1                              C2            C3 #> 1    0 1, 1, 1                         1, 1, 1       1, 1, 1 #> 2    1 1, 1, 1 0.3775407, 0.5249792, 0.6681878 0.5, 0.5, 0.5 #> 3    2 1, 1, 1 0.3170475, 0.4113578, 0.5031169 0.5, 0.5, 0.5 #> 4    3 1, 1, 1 0.3227616, 0.4223021, 0.5199905 0.5, 0.5, 0.5 #> 5    4 1, 1, 1 0.3202828, 0.4175570, 0.5126935 0.5, 0.5, 0.5 #> 6    5 1, 1, 1 0.3205218, 0.4180148, 0.5133987 0.5, 0.5, 0.5 #> 7    6 1, 1, 1 0.3204181, 0.4178162, 0.5130928 0.5, 0.5, 0.5 #> 8    7 1, 1, 1 0.3204281, 0.4178354, 0.5131223 0.5, 0.5, 0.5 #> 9    8 1, 1, 1 0.3204238, 0.4178271, 0.5131095 0.5, 0.5, 0.5 #>                                C4                              C5 #> 1                         1, 1, 1                         1, 1, 1 #> 2 0.1090968, 0.1978161, 0.4013123 0.3318122, 0.4013123, 0.5498340 #> 3 0.2118999, 0.2940854, 0.4273640 0.4777996, 0.5145846, 0.6056772 #> 4 0.1844653, 0.2613827, 0.3901012 0.4628453, 0.5033325, 0.6002880 #> 5 0.1870727, 0.2645320, 0.3937536 0.4693087, 0.5082018, 0.6026227 #> 6 0.1859409, 0.2631660, 0.3921710 0.4686838, 0.5077315, 0.6023974 #> 7 0.1860499, 0.2632977, 0.3923237 0.4689548, 0.5079354, 0.6024951 #> 8 0.1860026, 0.2632406, 0.3922575 0.4689287, 0.5079158, 0.6024857 #> 9 0.1860072, 0.2632461, 0.3922639 0.4689400, 0.5079243, 0.6024897 #>                                C6 #> 1                         1, 1, 1 #> 2 0.1301085, 0.2141650, 0.2890505 #> 3 0.2882988, 0.3490790, 0.3957383 #> 4 0.2898660, 0.3527513, 0.3939958 #> 5 0.2897398, 0.3524077, 0.3941857 #> 6 0.2897954, 0.3525572, 0.3941041 #> 7 0.2897901, 0.3525428, 0.3941120 #> 8 0.2897924, 0.3525490, 0.3941085 #> 9 0.2897922, 0.3525484, 0.3941089 #>  #> $crisp_state_vectors #>   iter C1        C2  C3        C4        C5        C6 #> 1    0  1 1.0000000 1.0 1.0000000 1.0000000 1.0000000 #> 2    1  1 0.5235692 0.5 0.2360751 0.4276529 0.2111080 #> 3    2  1 0.4105074 0.5 0.3111164 0.5326871 0.3443720 #> 4    3  1 0.4216848 0.5 0.2786497 0.5221553 0.3455377 #> 5    4  1 0.4168444 0.5 0.2817861 0.5267111 0.3454444 #> 6    5  1 0.4173117 0.5 0.2804259 0.5262709 0.3454856 #> 7    6  1 0.4171091 0.5 0.2805571 0.5264618 0.3454816 #> 8    7  1 0.4171286 0.5 0.2805002 0.5264434 0.3454833 #> 9    8  1 0.4171201 0.5 0.2805057 0.5264513 0.3454832 #>  #> $errors #>   iter      C1                                       C2            C3 #> 1    0 0, 0, 0                                  0, 0, 0       0, 0, 0 #> 2    1 0, 0, 0          0.6224593, 0.4750208, 0.3318122 0.5, 0.5, 0.5 #> 3    2 0, 0, 0       0.06049317, 0.11362134, 0.16507092       0, 0, 0 #> 4    3 0, 0, 0    0.005714132, 0.010944254, 0.016873682       0, 0, 0 #> 5    4 0, 0, 0    0.002478858, 0.004745077, 0.007297080       0, 0, 0 #> 6    5 0, 0, 0 0.0002390248, 0.0004577361, 0.0007052029       0, 0, 0 #> 7    6 0, 0, 0 0.0001036682, 0.0001985214, 0.0003058153       0, 0, 0 #> 8    7 0, 0, 0 9.998275e-06, 1.914670e-05, 2.949705e-05       0, 0, 0 #> 9    8 0, 0, 0 4.336339e-06, 8.304085e-06, 1.279306e-05       0, 0, 0 #>                                         C4 #> 1                                  0, 0, 0 #> 2          0.8909032, 0.8021839, 0.5986877 #> 3       0.10280304, 0.09626934, 0.02605166 #> 4       0.02743458, 0.03270279, 0.03726282 #> 5    0.002607410, 0.003149330, 0.003652373 #> 6    0.001131845, 0.001366014, 0.001582542 #> 7 0.0001090955, 0.0001317379, 0.0001527310 #> 8 4.731736e-05, 5.713608e-05, 6.623810e-05 #> 9 4.563439e-06, 5.510512e-06, 6.388555e-06 #>                                         C5 #> 1                                  0, 0, 0 #> 2          0.6681878, 0.5986877, 0.4501660 #> 3       0.14598736, 0.11327226, 0.05584324 #> 4    0.014954260, 0.011252113, 0.005389284 #> 5    0.006463364, 0.004869323, 0.002334744 #> 6 0.0006248623, 0.0004703362, 0.0002253404 #> 7 2.709689e-04, 2.039700e-04, 9.772756e-05 #> 8 2.613639e-05, 1.967328e-05, 9.425699e-06 #> 9 1.133551e-05, 8.532435e-06, 4.087999e-06 #>                                         C6 #> 1                                  0, 0, 0 #> 2          0.8698915, 0.7858350, 0.7109495 #> 3          0.1581903, 0.1349140, 0.1066878 #> 4    0.001567275, 0.003672301, 0.001742500 #> 5 0.0001262064, 0.0003435462, 0.0001898328 #> 6 5.562870e-05, 1.494393e-04, 8.161282e-05 #> 7 5.306794e-06, 1.438419e-05, 7.918486e-06 #> 8 2.303152e-06, 6.239309e-06, 3.433063e-06 #> 9 2.220257e-07, 6.017034e-07, 3.311875e-07 #>  #> $crisp_errors #>   iter C1           C2  C3           C4           C5           C6 #> 1    0  0 0.000000e+00 0.0 0.000000e+00 0.000000e+00 0.000000e+00 #> 2    1  0 4.764308e-01 0.5 7.639249e-01 5.723471e-01 7.888920e-01 #> 3    2  0 1.130618e-01 0.0 7.504135e-02 1.050343e-01 1.332640e-01 #> 4    3  0 1.117736e-02 0.0 3.246673e-02 1.053189e-02 1.165692e-03 #> 5    4  0 4.840338e-03 0.0 3.136371e-03 4.555810e-03 9.330661e-05 #> 6    5  0 4.673212e-04 0.0 1.360134e-03 4.401796e-04 4.115174e-05 #> 7    6  0 2.026683e-04 0.0 1.311881e-04 1.908888e-04 3.924166e-06 #> 8    7  0 1.954734e-05 0.0 5.689718e-05 1.841179e-05 1.703133e-06 #> 9    8  0 8.477827e-06 0.0 5.487502e-06 7.985314e-06 1.641805e-07 #>  #> $params #> $params$adj_matrix #>         C1                  C2      C3               C4               C5 #> C1 0, 0, 0 -0.85, -0.50, -0.20 0, 0, 0 -0.7, -0.5, -0.3    0.1, 0.2, 0.5 #> C2 0, 0, 0             0, 0, 0 0, 0, 0    0.6, 0.7, 0.9          0, 0, 0 #> C3 0, 0, 0             0, 0, 0 0, 0, 0 -1.0, -0.8, -0.5          0, 0, 0 #> C4 0, 0, 0    0.35, 0.60, 0.90 0, 0, 0          0, 0, 0 -0.8, -0.6, -0.3 #> C5 0, 0, 0             0, 0, 0 0, 0, 0 -1.0, -0.8, -0.5          0, 0, 0 #> C6 0, 0, 0             0, 0, 0 0, 0, 0          0, 0, 0          0, 0, 0 #>                     C6 #> C1             0, 0, 0 #> C2 -0.95, -0.70, -0.40 #> C3             0, 0, 0 #> C4             0, 0, 0 #> C5 -0.95, -0.60, -0.50 #> C6             0, 0, 0 #>  #> $params$initial_state_vector #> [1] 1 1 1 1 1 1 #>  #> $params$clamping_vector #> [1] 1 0 0 0 0 0 #>  #> $params$activation #> [1] \"kosko\" #>  #> $params$squashing #> [1] \"sigmoid\" #>  #> $params$lambda #> [1] 1 #>  #> $params$max_iter #> [1] 100 #>  #> $params$min_error #> [1] 1e-05 #>  #> $params$concepts #> [1] \"C1\" \"C2\" \"C3\" \"C4\" \"C5\" \"C6\" #>  #>  #> attr(,\"class\") #> [1] \"ivfn_or_tfn_simulation\""},{"path":"/reference/squash.html","id":null,"dir":"Reference","previous_headings":"","what":"Squash — squash","title":"Squash — squash","text":"Calculate squashing function output input value lambda values","code":""},{"path":"/reference/squash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Squash — squash","text":"","code":"squash(   value = numeric(),   squashing = c(\"sigmoid\", \"tanh\", \"bivalent\", \"saturation\", \"trivalent\"),   lambda = 1 )"},{"path":"/reference/squash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Squash — squash","text":"value numeric value 'squash' squashing squashing function apply. Must one following: 'bivalent', 'saturation', 'trivalent', 'tanh', 'sigmoid' lambda numeric value defines steepness slope squashing function tanh sigmoid applied","code":""},{"path":"/reference/squash.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Squash — squash","text":"\"squashed\" value, output selected transfer (\"squashing\") function","code":""},{"path":"/reference/squash.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Squash — squash","text":"function calculates 'squashed' value state based upon five available squashing functions typical literature (identified Gonzales et al. 2018 - https://doi.org/10.1142/S0218213018600102)","code":""},{"path":"/reference/squash.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Squash — squash","text":"","code":"squash(1, \"sigmoid\", lambda = 1) #> [1] 0.7310586 squash(0.6, \"tanh\", lambda = 0.7) #> [1] 0.3969304"},{"path":"/reference/standardize_adj_matrices.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize a List of Adjacency Matrices — standardize_adj_matrices","title":"Standardize a List of Adjacency Matrices — standardize_adj_matrices","text":"Given list adj. matrices different sizes, transforms inputs adj. matrices size 0 values added edges undefined included maps. Solves problem Map 1 nodes B Map 2 nodes B C need analyse together.","code":""},{"path":"/reference/standardize_adj_matrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize a List of Adjacency Matrices — standardize_adj_matrices","text":"","code":"standardize_adj_matrices(adj_matrices = list(matrix()))"},{"path":"/reference/standardize_adj_matrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize a List of Adjacency Matrices — standardize_adj_matrices","text":"adj_matrices list adj. matrix objects","code":""},{"path":"/reference/standardize_adj_matrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize a List of Adjacency Matrices — standardize_adj_matrices","text":"list adj. matrices constructed input adj. matrices, contain concepts (dimensions). Rows/Columns added concepts 0's.","code":""},{"path":[]},{"path":"/reference/standardize_adj_matrices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardize a List of Adjacency Matrices — standardize_adj_matrices","text":"","code":"adj_matrix_1 <- data.frame(   \"A\" = c(0, 0),   \"B\" = c(1, 0) ) adj_matrix_2 <- data.frame(   \"A\" = c(0, 0, 0),   \"B\" = c(0.25, 0, 1),   \"C\" = c(0, 0.7, 0) ) adj_matrix_3 <- data.frame(   \"B\" = c(0, 0),   \"D\" = c(0.75, 0) ) adj_matrix_4 <- data.frame(   \"A\" = c(0, 0, 0.3, 0),   \"B\" = c(0.5, 0, 0, 0.6),   \"E\" = c(0, 0, 0, 0),   \"F\" = c(1, 0, 1, 0) ) adj_matrices_w_different_concepts <- list(   adj_matrix_1, adj_matrix_2, adj_matrix_3, adj_matrix_4 ) standardize_adj_matrices(adj_matrices_w_different_concepts) #> [[1]] #>   A B C D E F #> 1 0 1 0 0 0 0 #> 2 0 0 0 0 0 0 #> 3 0 0 0 0 0 0 #> 4 0 0 0 0 0 0 #> 5 0 0 0 0 0 0 #> 6 0 0 0 0 0 0 #>  #> [[2]] #>   A    B   C D E F #> 1 0 0.25 0.0 0 0 0 #> 2 0 0.00 0.7 0 0 0 #> 3 0 1.00 0.0 0 0 0 #> 4 0 0.00 0.0 0 0 0 #> 5 0 0.00 0.0 0 0 0 #> 6 0 0.00 0.0 0 0 0 #>  #> [[3]] #>   A B C    D E F #> 1 0 0 0 0.00 0 0 #> 2 0 0 0 0.75 0 0 #> 3 0 0 0 0.00 0 0 #> 4 0 0 0 0.00 0 0 #> 5 0 0 0 0.00 0 0 #> 6 0 0 0 0.00 0 0 #>  #> [[4]] #>     A   B C D E F #> 1 0.0 0.5 0 0 0 1 #> 2 0.0 0.0 0 0 0 0 #> 3 0.0 0.0 0 0 0 0 #> 4 0.0 0.0 0 0 0 0 #> 5 0.3 0.0 0 0 0 1 #> 6 0.0 0.6 0 0 0 0 #>"},{"path":"/reference/subtract_ivfn.html","id":null,"dir":"Reference","previous_headings":"","what":"IVFN Subtraction (Interval Calculus) — subtract_ivfn","title":"IVFN Subtraction (Interval Calculus) — subtract_ivfn","text":"subtracts one Interval-Value Fuzzy Number (IVFN) another via interval calculus. IVFN represented interval X: $$X\\  =( x_{1}, x_{3}) \\ =\\ [ x_{1} ;x_{2}] =\\{x\\\\mathbb{R} \\ |\\ x_{1} \\ \\leq x\\ \\leq x_{2}\\}$$ \\(x_1\\) \\(x_2\\) represent lower upper bounds, respectively. IVFN X may another IVFN Y subtracted via: $$X\\ -\\ Y\\ =\\ [ x_{1} \\ -\\ y_{2} ;\\ x_{2} \\ -\\ y_{1}]$$","code":""},{"path":"/reference/subtract_ivfn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IVFN Subtraction (Interval Calculus) — subtract_ivfn","text":"","code":"subtract_ivfn(ivfn_1 = ivfn(), ivfn_2 = ivfn())"},{"path":"/reference/subtract_ivfn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IVFN Subtraction (Interval Calculus) — subtract_ivfn","text":"ivfn_1 interval-value fuzzy number (ivfn) object ivfn_2 interval-value fuzzy number (ivfn) object","code":""},{"path":"/reference/subtract_ivfn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IVFN Subtraction (Interval Calculus) — subtract_ivfn","text":"IVFN object representing subtraction ivfn_2 ivfn_1","code":""},{"path":"/reference/subtract_ivfn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"IVFN Subtraction (Interval Calculus) — subtract_ivfn","text":"required one IVFN \"greater \" . difference may also estimated translating IVFN's corresponding distributions (e.g. ivfn(-1, 1) = runif(n, -1, 1)), subtracting one distribution , estimating minimum maximum values difference distribution.","code":""},{"path":"/reference/subtract_ivfn.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"IVFN Subtraction (Interval Calculus) — subtract_ivfn","text":"mooreIntervalAnalysisFuzzy2003fcmconfr dimuroIntervalFuzzyNumbers2011fcmconfr mooreIntervalAnalysis1966fcmconfr","code":""},{"path":[]},{"path":"/reference/subtract_ivfn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IVFN Subtraction (Interval Calculus) — subtract_ivfn","text":"","code":"subtract_ivfn(ivfn(0.5, 0.8), ivfn(0.2, 0.5)) #> ivfn: [0, 0.6] subtract_ivfn(ivfn(-0.5, 0.3), ivfn(0.4, 0.6)) #> ivfn: [-1.1, -0.1] subtract_ivfn(ivfn(-1, 1), ivfn(-0.5, 0.5)) #> ivfn: [-1.5, 1.5]"},{"path":"/reference/subtract_tfn.html","id":null,"dir":"Reference","previous_headings":"","what":"TFN Subtraction (Interval Calculus) — subtract_tfn","title":"TFN Subtraction (Interval Calculus) — subtract_tfn","text":"subtracts one Triangular Fuzzy Number (TFN) another via interval calculus. TFN represented fuzzy set (triangular distribution): $$X\\  =( x_{1} ,x_{2} ,x_{3}) \\ =\\ \\left\\{\\begin{matrix} 0 & \\  & x< x_{1}\\\\ \\frac{2( x\\ -\\ x_{1})}{( x_{3} -x_{1})( x_{2} -x_{1})} & \\  & x_{1} \\leq x< x_{3} \\ \\\\ \\frac{2}{x_{3} -x_{1}} & & x\\ =\\ x_{2}\\\\ \\frac{2( x_{3} -x)}{( x_{3} -x_{1})( x_{3} -x_{2})} & \\  & x_{2} < x\\leq x_{3}\\\\ 0 & & x >x_{3} \\end{matrix}\\right.$$ \\(x_1\\) \\(x_3\\) lower upper bounds, respectively, \\(x_2\\) mode. TFN X may another TFN Y subtracted via: $$X\\ -\\ Y\\ =\\ ( x_{1} -y_{3} ,\\ x_{2} -y_{2} ,\\ x_{3} -y_{1})$$","code":""},{"path":"/reference/subtract_tfn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TFN Subtraction (Interval Calculus) — subtract_tfn","text":"","code":"subtract_tfn(tfn_1 = tfn(), tfn_2 = tfn())"},{"path":"/reference/subtract_tfn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TFN Subtraction (Interval Calculus) — subtract_tfn","text":"tfn_1 triangular fuzzy number (tfn) object tfn_2 triangular fuzzy number (tfn) object","code":""},{"path":"/reference/subtract_tfn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TFN Subtraction (Interval Calculus) — subtract_tfn","text":"TFN object representing subtraction tfn_2 tfn_1","code":""},{"path":"/reference/subtract_tfn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"TFN Subtraction (Interval Calculus) — subtract_tfn","text":"required one IVFN \"greater \" . difference may also estimated translating TFN's corresponding distributions (e.g. tfn(-1, 0, 1) = EnvStats::rtri(n, min = -1, max = 1, mode = 0)), subtracting one distribution , estimating minimum, mode, maximum values difference distribution.","code":""},{"path":"/reference/subtract_tfn.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"TFN Subtraction (Interval Calculus) — subtract_tfn","text":"chakravertyFuzzyNumbers2019fcmconfr hanssAppliedFuzzyArithmetic2005fcmconfr trillasFuzzyArithmetic2015fcmconfr","code":""},{"path":[]},{"path":"/reference/subtract_tfn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TFN Subtraction (Interval Calculus) — subtract_tfn","text":"","code":"subtract_tfn(tfn(0.5, 0.6, 0.8), tfn(0.2, 0.3, 0.5)) #> tfn: [0, 0.3, 0.6] subtract_tfn(tfn(-0.5, -0.2, 0.3), tfn(0.4, 0.5, 0.6)) #> tfn: [-1.1, -0.7, -0.1] subtract_tfn(tfn(-1, 0, 1), tfn(-0.5, 0, 0.5)) #> tfn: [-1.5, 0, 1.5]"},{"path":"/reference/tfn.html","id":null,"dir":"Reference","previous_headings":"","what":"Triangular Fuzzy Number (TFN) - S3 Class — tfn","title":"Triangular Fuzzy Number (TFN) - S3 Class — tfn","text":"constructs triangular fuzzy number (ivfn) represents continuous, triangular distribution values within given range","code":""},{"path":"/reference/tfn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Triangular Fuzzy Number (TFN) - S3 Class — tfn","text":"","code":"tfn(lower = double(), mode = double(), upper = double())"},{"path":"/reference/tfn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Triangular Fuzzy Number (TFN) - S3 Class — tfn","text":"lower lower limit Triangular Number set (lower value must less equal upper value) mode likely value Triangular Number set upper upper limit Triangular Number set (upper value must greater equal lower value)","code":""},{"path":"/reference/tfn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Triangular Fuzzy Number (TFN) - S3 Class — tfn","text":"triangular fuzzy number (TFN)","code":""},{"path":"/reference/tfn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Triangular Fuzzy Number (TFN) - S3 Class — tfn","text":"TFN class perform operations input, rather checks whether input follows defining criteria TFNs TFNs, lower bound must less equal mode must less equal upper bound. lower bound, mode, upper bound equal, TFN represents \"crisp\" numeric value.","code":""},{"path":[]},{"path":"/reference/tfn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Triangular Fuzzy Number (TFN) - S3 Class — tfn","text":"","code":"tfn(-1, 0, 1) #> tfn: [-1, 0, 1] tfn(0, 0, 1) #> tfn: [0, 0, 1] tfn(1, 1, 1) #> tfn: [1, 1, 1]"},{"path":"/news/index.html","id":"fcmconfr-010","dir":"Changelog","previous_headings":"","what":"fcmconfr 0.1.0","title":"fcmconfr 0.1.0","text":"Initial CRAN submission.","code":""}]
